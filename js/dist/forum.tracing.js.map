{"version":3,"file":"forum.tracing.js","mappings":"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","sources":["webpack://@fof/sentry/../../src/env.ts","webpack://@fof/sentry/../../src/node.ts","webpack://@fof/sentry/../../src/time.ts","webpack://@fof/sentry/../../src/worldwide.ts","webpack://@fof/sentry/webpack/bootstrap","webpack://@fof/sentry/webpack/runtime/compat get default export","webpack://@fof/sentry/webpack/runtime/define property getters","webpack://@fof/sentry/webpack/runtime/global","webpack://@fof/sentry/webpack/runtime/harmony module decorator","webpack://@fof/sentry/webpack/runtime/hasOwnProperty shorthand","webpack://@fof/sentry/webpack/runtime/make namespace object","webpack://@fof/sentry/external root \"flarum.core.compat['forum/app']\"","webpack://@fof/sentry/../../src/is.ts","webpack://@fof/sentry/../../src/string.ts","webpack://@fof/sentry/../../../src/integrations/inboundfilters.ts","webpack://@fof/sentry/./node_modules/@babel/runtime/helpers/esm/extends.js","webpack://@fof/sentry/../../../src/integrations/functiontostring.ts","webpack://@fof/sentry/../../src/browser.ts","webpack://@fof/sentry/../../src/object.ts","webpack://@fof/sentry/../../src/stacktrace.ts","webpack://@fof/sentry/../../src/misc.ts","webpack://@fof/sentry/../../src/logger.ts","webpack://@fof/sentry/../../src/constants.ts","webpack://@fof/sentry/../../src/syncpromise.ts","webpack://@fof/sentry/../../src/session.ts","webpack://@fof/sentry/../../src/scope.ts","webpack://@fof/sentry/../../src/hub.ts","webpack://@fof/sentry/../../../src/helpers.ts","webpack://@fof/sentry/../../src/exports.ts","webpack://@fof/sentry/../../../../src/integrations/trycatch.ts","webpack://@fof/sentry/../../src/supports.ts","webpack://@fof/sentry/../../../src/vendor/supportsHistory.ts","webpack://@fof/sentry/../../src/instrument.ts","webpack://@fof/sentry/../../src/normalize.ts","webpack://@fof/sentry/../../src/memo.ts","webpack://@fof/sentry/../../../src/eventbuilder.ts","webpack://@fof/sentry/../../../../src/integrations/globalhandlers.ts","webpack://@fof/sentry/../../src/severity.ts","webpack://@fof/sentry/../../src/url.ts","webpack://@fof/sentry/../../../../src/integrations/breadcrumbs.ts","webpack://@fof/sentry/../../../../src/integrations/linkederrors.ts","webpack://@fof/sentry/../../../../src/integrations/httpcontext.ts","webpack://@fof/sentry/./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js","webpack://@fof/sentry/./node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js","webpack://@fof/sentry/./node_modules/@babel/runtime/helpers/esm/inheritsLoose.js","webpack://@fof/sentry/../../../src/tracing/span.ts","webpack://@fof/sentry/./node_modules/@babel/runtime/helpers/esm/typeof.js","webpack://@fof/sentry/./node_modules/@babel/runtime/helpers/esm/createClass.js","webpack://@fof/sentry/./node_modules/@babel/runtime/helpers/esm/toPropertyKey.js","webpack://@fof/sentry/./node_modules/@babel/runtime/helpers/esm/toPrimitive.js","webpack://@fof/sentry/../../../src/tracing/transaction.ts","webpack://@fof/sentry/../../../src/tracing/idletransaction.ts","webpack://@fof/sentry/../../../src/utils/hasTracingEnabled.ts","webpack://@fof/sentry/../../../src/tracing/utils.ts","webpack://@fof/sentry/../../../src/tracing/errors.ts","webpack://@fof/sentry/../../../src/tracing/hubextensions.ts","webpack://@fof/sentry/../../src/tracing.ts","webpack://@fof/sentry/../../src/baggage.ts","webpack://@fof/sentry/../../../src/browser/types.ts","webpack://@fof/sentry/../../../../../src/browser/web-vitals/lib/bindReporter.ts","webpack://@fof/sentry/../../../../../src/browser/web-vitals/lib/getNavigationEntry.ts","webpack://@fof/sentry/../../../../../src/browser/web-vitals/lib/getActivationStart.ts","webpack://@fof/sentry/../../../../../src/browser/web-vitals/lib/initMetric.ts","webpack://@fof/sentry/../../../../../src/browser/web-vitals/lib/generateUniqueID.ts","webpack://@fof/sentry/../../../../../src/browser/web-vitals/lib/observe.ts","webpack://@fof/sentry/../../../../../src/browser/web-vitals/lib/onHidden.ts","webpack://@fof/sentry/../../../../../src/browser/web-vitals/lib/getVisibilityWatcher.ts","webpack://@fof/sentry/../../../../src/browser/web-vitals/getLCP.ts","webpack://@fof/sentry/../../../../src/browser/metrics/utils.ts","webpack://@fof/sentry/./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","webpack://@fof/sentry/../../../../src/browser/metrics/index.ts","webpack://@fof/sentry/../../../../src/browser/web-vitals/getFID.ts","webpack://@fof/sentry/../../../../src/browser/web-vitals/getCLS.ts","webpack://@fof/sentry/../../../src/browser/request.ts","webpack://@fof/sentry/../../../src/browser/browsertracing.ts","webpack://@fof/sentry/../../../src/browser/router.ts","webpack://@fof/sentry/../../../src/browser/backgroundtab.ts","webpack://@fof/sentry/../../src/version.ts","webpack://@fof/sentry/../../src/dsn.ts","webpack://@fof/sentry/../../src/envelope.ts","webpack://@fof/sentry/./node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js","webpack://@fof/sentry/./node_modules/@babel/runtime/helpers/esm/construct.js","webpack://@fof/sentry/./node_modules/@babel/runtime/helpers/esm/isNativeReflectConstruct.js","webpack://@fof/sentry/./node_modules/@babel/runtime/helpers/esm/wrapNativeSuper.js","webpack://@fof/sentry/./node_modules/@babel/runtime/helpers/esm/isNativeFunction.js","webpack://@fof/sentry/../../src/error.ts","webpack://@fof/sentry/../../src/api.ts","webpack://@fof/sentry/../../src/integration.ts","webpack://@fof/sentry/../../../src/utils/prepareEvent.ts","webpack://@fof/sentry/../../src/baseclient.ts","webpack://@fof/sentry/../../../src/client.ts","webpack://@fof/sentry/../../../src/userfeedback.ts","webpack://@fof/sentry/../../src/clientreport.ts","webpack://@fof/sentry/../../src/ratelimit.ts","webpack://@fof/sentry/../../../src/transports/base.ts","webpack://@fof/sentry/../../src/promisebuffer.ts","webpack://@fof/sentry/../../../../src/transports/utils.ts","webpack://@fof/sentry/../../../../src/transports/fetch.ts","webpack://@fof/sentry/../../../src/stack-parsers.ts","webpack://@fof/sentry/../../../../src/integrations/dedupe.ts","webpack://@fof/sentry/../../../src/sdk.ts","webpack://@fof/sentry/../../../src/captureconsole.ts","webpack://@fof/sentry/./src/forum/index.js"],"sourcesContent":["/*\n * This module exists for optimizations in the build process through rollup and terser.  We define some global\n * constants, which can be overridden during build. By guarding certain pieces of code with functions that return these\n * constants, we can control whether or not they appear in the final bundle. (Any code guarded by a false condition will\n * never run, and will hence be dropped during treeshaking.) The two primary uses for this are stripping out calls to\n * `logger` and preventing node-related code from appearing in browser bundles.\n *\n * Attention:\n * This file should not be used to define constants/flags that are intended to be used for tree-shaking conducted by\n * users. These flags should live in their respective packages, as we identified user tooling (specifically webpack)\n * having issues tree-shaking these constants across package boundaries.\n * An example for this is the __SENTRY_DEBUG__ constant. It is declared in each package individually because we want\n * users to be able to shake away expressions that it guards.\n */\n\ndeclare const __SENTRY_BROWSER_BUNDLE__: boolean | undefined;\n\nexport type SdkSource = 'npm' | 'cdn' | 'loader';\n\n/**\n * Figures out if we're building a browser bundle.\n *\n * @returns true if this is a browser bundle build.\n */\nexport function isBrowserBundle(): boolean {\n  return typeof __SENTRY_BROWSER_BUNDLE__ !== 'undefined' && !!__SENTRY_BROWSER_BUNDLE__;\n}\n\n/**\n * Get source of SDK.\n */\nexport function getSDKSource(): SdkSource {\n  // @ts-ignore __SENTRY_SDK_SOURCE__ is injected by rollup during build process\n  return __SENTRY_SDK_SOURCE__;\n}\n","/**\n * NOTE: In order to avoid circular dependencies, if you add a function to this module and it needs to print something,\n * you must either a) use `console.log` rather than the logger, or b) put your function elsewhere.\n */\n\nimport { isBrowserBundle } from './env';\n\n/**\n * Checks whether we're in the Node.js or Browser environment\n *\n * @returns Answer to given question\n */\nexport function isNodeEnv(): boolean {\n  // explicitly check for browser bundles as those can be optimized statically\n  // by terser/rollup.\n  return (\n    !isBrowserBundle() &&\n    Object.prototype.toString.call(typeof process !== 'undefined' ? process : 0) === '[object process]'\n  );\n}\n\n/**\n * Requires a module which is protected against bundler minification.\n *\n * @param request The module path to resolve\n */\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types, @typescript-eslint/no-explicit-any\nexport function dynamicRequire(mod: any, request: string): any {\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n  return mod.require(request);\n}\n\n/**\n * Helper for dynamically loading module that should work with linked dependencies.\n * The problem is that we _should_ be using `require(require.resolve(moduleName, { paths: [cwd()] }))`\n * However it's _not possible_ to do that with Webpack, as it has to know all the dependencies during\n * build time. `require.resolve` is also not available in any other way, so we cannot create,\n * a fake helper like we do with `dynamicRequire`.\n *\n * We always prefer to use local package, thus the value is not returned early from each `try/catch` block.\n * That is to mimic the behavior of `require.resolve` exactly.\n *\n * @param moduleName module name to require\n * @returns possibly required module\n */\nexport function loadModule<T>(moduleName: string): T | undefined {\n  let mod: T | undefined;\n\n  try {\n    mod = dynamicRequire(module, moduleName);\n  } catch (e) {\n    // no-empty\n  }\n\n  try {\n    const { cwd } = dynamicRequire(module, 'process');\n    mod = dynamicRequire(module, `${cwd()}/node_modules/${moduleName}`) as T;\n  } catch (e) {\n    // no-empty\n  }\n\n  return mod;\n}\n","import { dynamicRequire, isNodeEnv } from './node';\nimport { getGlobalObject } from './worldwide';\n\n// eslint-disable-next-line deprecation/deprecation\nconst WINDOW = getGlobalObject<Window>();\n\n/**\n * An object that can return the current timestamp in seconds since the UNIX epoch.\n */\ninterface TimestampSource {\n  nowSeconds(): number;\n}\n\n/**\n * A TimestampSource implementation for environments that do not support the Performance Web API natively.\n *\n * Note that this TimestampSource does not use a monotonic clock. A call to `nowSeconds` may return a timestamp earlier\n * than a previously returned value. We do not try to emulate a monotonic behavior in order to facilitate debugging. It\n * is more obvious to explain \"why does my span have negative duration\" than \"why my spans have zero duration\".\n */\nconst dateTimestampSource: TimestampSource = {\n  nowSeconds: () => Date.now() / 1000,\n};\n\n/**\n * A partial definition of the [Performance Web API]{@link https://developer.mozilla.org/en-US/docs/Web/API/Performance}\n * for accessing a high-resolution monotonic clock.\n */\ninterface Performance {\n  /**\n   * The millisecond timestamp at which measurement began, measured in Unix time.\n   */\n  timeOrigin: number;\n  /**\n   * Returns the current millisecond timestamp, where 0 represents the start of measurement.\n   */\n  now(): number;\n}\n\n/**\n * Returns a wrapper around the native Performance API browser implementation, or undefined for browsers that do not\n * support the API.\n *\n * Wrapping the native API works around differences in behavior from different browsers.\n */\nfunction getBrowserPerformance(): Performance | undefined {\n  const { performance } = WINDOW;\n  if (!performance || !performance.now) {\n    return undefined;\n  }\n\n  // Replace performance.timeOrigin with our own timeOrigin based on Date.now().\n  //\n  // This is a partial workaround for browsers reporting performance.timeOrigin such that performance.timeOrigin +\n  // performance.now() gives a date arbitrarily in the past.\n  //\n  // Additionally, computing timeOrigin in this way fills the gap for browsers where performance.timeOrigin is\n  // undefined.\n  //\n  // The assumption that performance.timeOrigin + performance.now() ~= Date.now() is flawed, but we depend on it to\n  // interact with data coming out of performance entries.\n  //\n  // Note that despite recommendations against it in the spec, browsers implement the Performance API with a clock that\n  // might stop when the computer is asleep (and perhaps under other circumstances). Such behavior causes\n  // performance.timeOrigin + performance.now() to have an arbitrary skew over Date.now(). In laptop computers, we have\n  // observed skews that can be as long as days, weeks or months.\n  //\n  // See https://github.com/getsentry/sentry-javascript/issues/2590.\n  //\n  // BUG: despite our best intentions, this workaround has its limitations. It mostly addresses timings of pageload\n  // transactions, but ignores the skew built up over time that can aversely affect timestamps of navigation\n  // transactions of long-lived web pages.\n  const timeOrigin = Date.now() - performance.now();\n\n  return {\n    now: () => performance.now(),\n    timeOrigin,\n  };\n}\n\n/**\n * Returns the native Performance API implementation from Node.js. Returns undefined in old Node.js versions that don't\n * implement the API.\n */\nfunction getNodePerformance(): Performance | undefined {\n  try {\n    const perfHooks = dynamicRequire(module, 'perf_hooks') as { performance: Performance };\n    return perfHooks.performance;\n  } catch (_) {\n    return undefined;\n  }\n}\n\n/**\n * The Performance API implementation for the current platform, if available.\n */\nconst platformPerformance: Performance | undefined = isNodeEnv() ? getNodePerformance() : getBrowserPerformance();\n\nconst timestampSource: TimestampSource =\n  platformPerformance === undefined\n    ? dateTimestampSource\n    : {\n        nowSeconds: () => (platformPerformance.timeOrigin + platformPerformance.now()) / 1000,\n      };\n\n/**\n * Returns a timestamp in seconds since the UNIX epoch using the Date API.\n */\nexport const dateTimestampInSeconds: () => number = dateTimestampSource.nowSeconds.bind(dateTimestampSource);\n\n/**\n * Returns a timestamp in seconds since the UNIX epoch using either the Performance or Date APIs, depending on the\n * availability of the Performance API.\n *\n * See `usingPerformanceAPI` to test whether the Performance API is used.\n *\n * BUG: Note that because of how browsers implement the Performance API, the clock might stop when the computer is\n * asleep. This creates a skew between `dateTimestampInSeconds` and `timestampInSeconds`. The\n * skew can grow to arbitrary amounts like days, weeks or months.\n * See https://github.com/getsentry/sentry-javascript/issues/2590.\n */\nexport const timestampInSeconds: () => number = timestampSource.nowSeconds.bind(timestampSource);\n\n/**\n * Re-exported with an old name for backwards-compatibility.\n * TODO (v8): Remove this\n *\n * @deprecated Use `timestampInSeconds` instead.\n */\nexport const timestampWithMs = timestampInSeconds;\n\n/**\n * A boolean that is true when timestampInSeconds uses the Performance API to produce monotonic timestamps.\n */\nexport const usingPerformanceAPI = platformPerformance !== undefined;\n\n/**\n * Internal helper to store what is the source of browserPerformanceTimeOrigin below. For debugging only.\n */\nexport let _browserPerformanceTimeOriginMode: string;\n\n/**\n * The number of milliseconds since the UNIX epoch. This value is only usable in a browser, and only when the\n * performance API is available.\n */\nexport const browserPerformanceTimeOrigin = ((): number | undefined => {\n  // Unfortunately browsers may report an inaccurate time origin data, through either performance.timeOrigin or\n  // performance.timing.navigationStart, which results in poor results in performance data. We only treat time origin\n  // data as reliable if they are within a reasonable threshold of the current time.\n\n  const { performance } = WINDOW;\n  if (!performance || !performance.now) {\n    _browserPerformanceTimeOriginMode = 'none';\n    return undefined;\n  }\n\n  const threshold = 3600 * 1000;\n  const performanceNow = performance.now();\n  const dateNow = Date.now();\n\n  // if timeOrigin isn't available set delta to threshold so it isn't used\n  const timeOriginDelta = performance.timeOrigin\n    ? Math.abs(performance.timeOrigin + performanceNow - dateNow)\n    : threshold;\n  const timeOriginIsReliable = timeOriginDelta < threshold;\n\n  // While performance.timing.navigationStart is deprecated in favor of performance.timeOrigin, performance.timeOrigin\n  // is not as widely supported. Namely, performance.timeOrigin is undefined in Safari as of writing.\n  // Also as of writing, performance.timing is not available in Web Workers in mainstream browsers, so it is not always\n  // a valid fallback. In the absence of an initial time provided by the browser, fallback to the current time from the\n  // Date API.\n  // eslint-disable-next-line deprecation/deprecation\n  const navigationStart = performance.timing && performance.timing.navigationStart;\n  const hasNavigationStart = typeof navigationStart === 'number';\n  // if navigationStart isn't available set delta to threshold so it isn't used\n  const navigationStartDelta = hasNavigationStart ? Math.abs(navigationStart + performanceNow - dateNow) : threshold;\n  const navigationStartIsReliable = navigationStartDelta < threshold;\n\n  if (timeOriginIsReliable || navigationStartIsReliable) {\n    // Use the more reliable time origin\n    if (timeOriginDelta <= navigationStartDelta) {\n      _browserPerformanceTimeOriginMode = 'timeOrigin';\n      return performance.timeOrigin;\n    } else {\n      _browserPerformanceTimeOriginMode = 'navigationStart';\n      return navigationStart;\n    }\n  }\n\n  // Either both timeOrigin and navigationStart are skewed or neither is available, fallback to Date.\n  _browserPerformanceTimeOriginMode = 'dateNow';\n  return dateNow;\n})();\n","/**\n * NOTE: In order to avoid circular dependencies, if you add a function to this module and it needs to print something,\n * you must either a) use `console.log` rather than the logger, or b) put your function elsewhere.\n *\n * Note: This file was originally called `global.ts`, but was changed to unblock users which might be doing\n * string replaces with bundlers like Vite for `global` (would break imports that rely on importing from utils/src/global).\n *\n * Why worldwide?\n *\n * Why not?\n */\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport type { Integration } from '@sentry/types';\n\nimport type { SdkSource } from './env';\n\n/** Internal global with common properties and Sentry extensions  */\nexport interface InternalGlobal {\n  navigator?: { userAgent?: string };\n  console: Console;\n  Sentry?: {\n    Integrations?: Integration[];\n  };\n  onerror?: {\n    (msg: unknown, url: unknown, line: unknown, column: unknown, error: unknown): boolean;\n    __SENTRY_INSTRUMENTED__?: true;\n    __SENTRY_LOADER__?: true;\n  };\n  onunhandledrejection?: {\n    (event: unknown): boolean;\n    __SENTRY_INSTRUMENTED__?: true;\n    __SENTRY_LOADER__?: true;\n  };\n  SENTRY_ENVIRONMENT?: string;\n  SENTRY_DSN?: string;\n  SENTRY_RELEASE?: {\n    id?: string;\n  };\n  SENTRY_SDK_SOURCE?: SdkSource;\n  /**\n   * Debug IDs are indirectly injected by Sentry CLI or bundler plugins to directly reference a particular source map\n   * for resolving of a source file. The injected code will place an entry into the record for each loaded bundle/JS\n   * file.\n   */\n  _sentryDebugIds?: Record<string, string>;\n  __SENTRY__: {\n    globalEventProcessors: any;\n    hub: any;\n    logger: any;\n    extensions?: {\n      /** Extension methods for the hub, which are bound to the current Hub instance */\n      // eslint-disable-next-line @typescript-eslint/ban-types\n      [key: string]: Function;\n    };\n  };\n}\n\n// The code below for 'isGlobalObj' and 'GLOBAL_OBJ' was copied from core-js before modification\n// https://github.com/zloirock/core-js/blob/1b944df55282cdc99c90db5f49eb0b6eda2cc0a3/packages/core-js/internals/global.js\n// core-js has the following licence:\n//\n// Copyright (c) 2014-2022 Denis Pushkarev\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n/** Returns 'obj' if it's the global object, otherwise returns undefined */\nfunction isGlobalObj(obj: { Math?: Math }): any | undefined {\n  return obj && obj.Math == Math ? obj : undefined;\n}\n\n/** Get's the global object for the current JavaScript runtime */\nexport const GLOBAL_OBJ: InternalGlobal =\n  (typeof globalThis == 'object' && isGlobalObj(globalThis)) ||\n  // eslint-disable-next-line no-restricted-globals\n  (typeof window == 'object' && isGlobalObj(window)) ||\n  (typeof self == 'object' && isGlobalObj(self)) ||\n  (typeof global == 'object' && isGlobalObj(global)) ||\n  (function (this: any) {\n    return this;\n  })() ||\n  {};\n\n/**\n * @deprecated Use GLOBAL_OBJ instead or WINDOW from @sentry/browser. This will be removed in v8\n */\nexport function getGlobalObject<T>(): T & InternalGlobal {\n  return GLOBAL_OBJ as T & InternalGlobal;\n}\n\n/**\n * Returns a global singleton contained in the global `__SENTRY__` object.\n *\n * If the singleton doesn't already exist in `__SENTRY__`, it will be created using the given factory\n * function and added to the `__SENTRY__` object.\n *\n * @param name name of the global singleton on __SENTRY__\n * @param creator creator Factory function to create the singleton if it doesn't already exist on `__SENTRY__`\n * @param obj (Optional) The global object on which to look for `__SENTRY__`, if not `GLOBAL_OBJ`'s return value\n * @returns the singleton\n */\nexport function getGlobalSingleton<T>(name: keyof InternalGlobal['__SENTRY__'], creator: () => T, obj?: unknown): T {\n  const gbl = (obj || GLOBAL_OBJ) as InternalGlobal;\n  const __SENTRY__ = (gbl.__SENTRY__ = gbl.__SENTRY__ || {});\n  const singleton = __SENTRY__[name] || (__SENTRY__[name] = creator());\n  return singleton;\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\tloaded: false,\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Flag the module as loaded\n\tmodule.loaded = true;\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.hmd = (module) => {\n\tmodule = Object.create(module);\n\tif (!module.children) module.children = [];\n\tObject.defineProperty(module, 'exports', {\n\t\tenumerable: true,\n\t\tset: () => {\n\t\t\tthrow new Error('ES Modules may not assign module.exports or exports.*, Use ESM export syntax, instead: ' + module.id);\n\t\t}\n\t});\n\treturn module;\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/app'];","/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\n\nimport type { PolymorphicEvent, Primitive } from '@sentry/types';\n\n// eslint-disable-next-line @typescript-eslint/unbound-method\nconst objectToString = Object.prototype.toString;\n\n/**\n * Checks whether given value's type is one of a few Error or Error-like\n * {@link isError}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isError(wat: unknown): wat is Error {\n  switch (objectToString.call(wat)) {\n    case '[object Error]':\n    case '[object Exception]':\n    case '[object DOMException]':\n      return true;\n    default:\n      return isInstanceOf(wat, Error);\n  }\n}\n/**\n * Checks whether given value is an instance of the given built-in class.\n *\n * @param wat The value to be checked\n * @param className\n * @returns A boolean representing the result.\n */\nfunction isBuiltin(wat: unknown, className: string): boolean {\n  return objectToString.call(wat) === `[object ${className}]`;\n}\n\n/**\n * Checks whether given value's type is ErrorEvent\n * {@link isErrorEvent}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isErrorEvent(wat: unknown): boolean {\n  return isBuiltin(wat, 'ErrorEvent');\n}\n\n/**\n * Checks whether given value's type is DOMError\n * {@link isDOMError}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isDOMError(wat: unknown): boolean {\n  return isBuiltin(wat, 'DOMError');\n}\n\n/**\n * Checks whether given value's type is DOMException\n * {@link isDOMException}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isDOMException(wat: unknown): boolean {\n  return isBuiltin(wat, 'DOMException');\n}\n\n/**\n * Checks whether given value's type is a string\n * {@link isString}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isString(wat: unknown): wat is string {\n  return isBuiltin(wat, 'String');\n}\n\n/**\n * Checks whether given value is a primitive (undefined, null, number, boolean, string, bigint, symbol)\n * {@link isPrimitive}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isPrimitive(wat: unknown): wat is Primitive {\n  return wat === null || (typeof wat !== 'object' && typeof wat !== 'function');\n}\n\n/**\n * Checks whether given value's type is an object literal\n * {@link isPlainObject}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isPlainObject(wat: unknown): wat is Record<string, unknown> {\n  return isBuiltin(wat, 'Object');\n}\n\n/**\n * Checks whether given value's type is an Event instance\n * {@link isEvent}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isEvent(wat: unknown): wat is PolymorphicEvent {\n  return typeof Event !== 'undefined' && isInstanceOf(wat, Event);\n}\n\n/**\n * Checks whether given value's type is an Element instance\n * {@link isElement}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isElement(wat: unknown): boolean {\n  return typeof Element !== 'undefined' && isInstanceOf(wat, Element);\n}\n\n/**\n * Checks whether given value's type is an regexp\n * {@link isRegExp}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isRegExp(wat: unknown): wat is RegExp {\n  return isBuiltin(wat, 'RegExp');\n}\n\n/**\n * Checks whether given value has a then function.\n * @param wat A value to be checked.\n */\nexport function isThenable(wat: any): wat is PromiseLike<any> {\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n  return Boolean(wat && wat.then && typeof wat.then === 'function');\n}\n\n/**\n * Checks whether given value's type is a SyntheticEvent\n * {@link isSyntheticEvent}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isSyntheticEvent(wat: unknown): boolean {\n  return isPlainObject(wat) && 'nativeEvent' in wat && 'preventDefault' in wat && 'stopPropagation' in wat;\n}\n\n/**\n * Checks whether given value is NaN\n * {@link isNaN}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isNaN(wat: unknown): boolean {\n  return typeof wat === 'number' && wat !== wat;\n}\n\n/**\n * Checks whether given value's type is an instance of provided constructor.\n * {@link isInstanceOf}.\n *\n * @param wat A value to be checked.\n * @param base A constructor to be used in a check.\n * @returns A boolean representing the result.\n */\nexport function isInstanceOf(wat: any, base: any): boolean {\n  try {\n    return wat instanceof base;\n  } catch (_e) {\n    return false;\n  }\n}\n","import { isRegExp, isString } from './is';\n\nexport { escapeStringForRegex } from './vendor/escapeStringForRegex';\n\n/**\n * Truncates given string to the maximum characters count\n *\n * @param str An object that contains serializable values\n * @param max Maximum number of characters in truncated string (0 = unlimited)\n * @returns string Encoded\n */\nexport function truncate(str: string, max: number = 0): string {\n  if (typeof str !== 'string' || max === 0) {\n    return str;\n  }\n  return str.length <= max ? str : `${str.slice(0, max)}...`;\n}\n\n/**\n * This is basically just `trim_line` from\n * https://github.com/getsentry/sentry/blob/master/src/sentry/lang/javascript/processor.py#L67\n *\n * @param str An object that contains serializable values\n * @param max Maximum number of characters in truncated string\n * @returns string Encoded\n */\nexport function snipLine(line: string, colno: number): string {\n  let newLine = line;\n  const lineLength = newLine.length;\n  if (lineLength <= 150) {\n    return newLine;\n  }\n  if (colno > lineLength) {\n    // eslint-disable-next-line no-param-reassign\n    colno = lineLength;\n  }\n\n  let start = Math.max(colno - 60, 0);\n  if (start < 5) {\n    start = 0;\n  }\n\n  let end = Math.min(start + 140, lineLength);\n  if (end > lineLength - 5) {\n    end = lineLength;\n  }\n  if (end === lineLength) {\n    start = Math.max(end - 140, 0);\n  }\n\n  newLine = newLine.slice(start, end);\n  if (start > 0) {\n    newLine = `'{snip} ${newLine}`;\n  }\n  if (end < lineLength) {\n    newLine += ' {snip}';\n  }\n\n  return newLine;\n}\n\n/**\n * Join values in array\n * @param input array of values to be joined together\n * @param delimiter string to be placed in-between values\n * @returns Joined values\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function safeJoin(input: any[], delimiter?: string): string {\n  if (!Array.isArray(input)) {\n    return '';\n  }\n\n  const output = [];\n  // eslint-disable-next-line @typescript-eslint/prefer-for-of\n  for (let i = 0; i < input.length; i++) {\n    const value = input[i];\n    try {\n      output.push(String(value));\n    } catch (e) {\n      output.push('[value cannot be serialized]');\n    }\n  }\n\n  return output.join(delimiter);\n}\n\n/**\n * Checks if the given value matches a regex or string\n *\n * @param value The string to test\n * @param pattern Either a regex or a string against which `value` will be matched\n * @param requireExactStringMatch If true, `value` must match `pattern` exactly. If false, `value` will match\n * `pattern` if it contains `pattern`. Only applies to string-type patterns.\n */\nexport function isMatchingPattern(\n  value: string,\n  pattern: RegExp | string,\n  requireExactStringMatch: boolean = false,\n): boolean {\n  if (!isString(value)) {\n    return false;\n  }\n\n  if (isRegExp(pattern)) {\n    return pattern.test(value);\n  }\n  if (isString(pattern)) {\n    return requireExactStringMatch ? value === pattern : value.includes(pattern);\n  }\n\n  return false;\n}\n\n/**\n * Test the given string against an array of strings and regexes. By default, string matching is done on a\n * substring-inclusion basis rather than a strict equality basis\n *\n * @param testString The string to test\n * @param patterns The patterns against which to test the string\n * @param requireExactStringMatch If true, `testString` must match one of the given string patterns exactly in order to\n * count. If false, `testString` will match a string pattern if it contains that pattern.\n * @returns\n */\nexport function stringMatchesSomePattern(\n  testString: string,\n  patterns: Array<string | RegExp> = [],\n  requireExactStringMatch: boolean = false,\n): boolean {\n  return patterns.some(pattern => isMatchingPattern(testString, pattern, requireExactStringMatch));\n}\n","import type { Event, EventProcessor, Hub, Integration, StackFrame } from '@sentry/types';\nimport { getEventDescription, logger, stringMatchesSomePattern } from '@sentry/utils';\n\n// \"Script error.\" is hard coded into browsers for errors that it can't read.\n// this is the result of a script being pulled in from an external domain and CORS.\nconst DEFAULT_IGNORE_ERRORS = [/^Script error\\.?$/, /^Javascript error: Script error\\.? on line 0$/];\n\nconst DEFAULT_IGNORE_TRANSACTIONS = [\n  /^.*healthcheck.*$/,\n  /^.*healthy.*$/,\n  /^.*live.*$/,\n  /^.*ready.*$/,\n  /^.*heartbeat.*$/,\n  /^.*\\/health$/,\n  /^.*\\/healthz$/,\n];\n\n/** Options for the InboundFilters integration */\nexport interface InboundFiltersOptions {\n  allowUrls: Array<string | RegExp>;\n  denyUrls: Array<string | RegExp>;\n  ignoreErrors: Array<string | RegExp>;\n  ignoreTransactions: Array<string | RegExp>;\n  ignoreInternal: boolean;\n  disableErrorDefaults: boolean;\n  disableTransactionDefaults: boolean;\n}\n\n/** Inbound filters configurable by the user */\nexport class InboundFilters implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'InboundFilters';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = InboundFilters.id;\n\n  public constructor(private readonly _options: Partial<InboundFiltersOptions> = {}) {}\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(addGlobalEventProcessor: (processor: EventProcessor) => void, getCurrentHub: () => Hub): void {\n    const eventProcess: EventProcessor = (event: Event) => {\n      const hub = getCurrentHub();\n      if (hub) {\n        const self = hub.getIntegration(InboundFilters);\n        if (self) {\n          const client = hub.getClient();\n          const clientOptions = client ? client.getOptions() : {};\n          const options = _mergeOptions(self._options, clientOptions);\n          return _shouldDropEvent(event, options) ? null : event;\n        }\n      }\n      return event;\n    };\n\n    eventProcess.id = this.name;\n    addGlobalEventProcessor(eventProcess);\n  }\n}\n\n/** JSDoc */\nexport function _mergeOptions(\n  internalOptions: Partial<InboundFiltersOptions> = {},\n  clientOptions: Partial<InboundFiltersOptions> = {},\n): Partial<InboundFiltersOptions> {\n  return {\n    allowUrls: [...(internalOptions.allowUrls || []), ...(clientOptions.allowUrls || [])],\n    denyUrls: [...(internalOptions.denyUrls || []), ...(clientOptions.denyUrls || [])],\n    ignoreErrors: [\n      ...(internalOptions.ignoreErrors || []),\n      ...(clientOptions.ignoreErrors || []),\n      ...(internalOptions.disableErrorDefaults ? [] : DEFAULT_IGNORE_ERRORS),\n    ],\n    ignoreTransactions: [\n      ...(internalOptions.ignoreTransactions || []),\n      ...(clientOptions.ignoreTransactions || []),\n      ...(internalOptions.disableTransactionDefaults ? [] : DEFAULT_IGNORE_TRANSACTIONS),\n    ],\n    ignoreInternal: internalOptions.ignoreInternal !== undefined ? internalOptions.ignoreInternal : true,\n  };\n}\n\n/** JSDoc */\nexport function _shouldDropEvent(event: Event, options: Partial<InboundFiltersOptions>): boolean {\n  if (options.ignoreInternal && _isSentryError(event)) {\n    __DEBUG_BUILD__ &&\n      logger.warn(`Event dropped due to being internal Sentry Error.\\nEvent: ${getEventDescription(event)}`);\n    return true;\n  }\n  if (_isIgnoredError(event, options.ignoreErrors)) {\n    __DEBUG_BUILD__ &&\n      logger.warn(\n        `Event dropped due to being matched by \\`ignoreErrors\\` option.\\nEvent: ${getEventDescription(event)}`,\n      );\n    return true;\n  }\n  if (_isIgnoredTransaction(event, options.ignoreTransactions)) {\n    __DEBUG_BUILD__ &&\n      logger.warn(\n        `Event dropped due to being matched by \\`ignoreTransactions\\` option.\\nEvent: ${getEventDescription(event)}`,\n      );\n    return true;\n  }\n  if (_isDeniedUrl(event, options.denyUrls)) {\n    __DEBUG_BUILD__ &&\n      logger.warn(\n        `Event dropped due to being matched by \\`denyUrls\\` option.\\nEvent: ${getEventDescription(\n          event,\n        )}.\\nUrl: ${_getEventFilterUrl(event)}`,\n      );\n    return true;\n  }\n  if (!_isAllowedUrl(event, options.allowUrls)) {\n    __DEBUG_BUILD__ &&\n      logger.warn(\n        `Event dropped due to not being matched by \\`allowUrls\\` option.\\nEvent: ${getEventDescription(\n          event,\n        )}.\\nUrl: ${_getEventFilterUrl(event)}`,\n      );\n    return true;\n  }\n  return false;\n}\n\nfunction _isIgnoredError(event: Event, ignoreErrors?: Array<string | RegExp>): boolean {\n  // If event.type, this is not an error\n  if (event.type || !ignoreErrors || !ignoreErrors.length) {\n    return false;\n  }\n\n  return _getPossibleEventMessages(event).some(message => stringMatchesSomePattern(message, ignoreErrors));\n}\n\nfunction _isIgnoredTransaction(event: Event, ignoreTransactions?: Array<string | RegExp>): boolean {\n  if (event.type !== 'transaction' || !ignoreTransactions || !ignoreTransactions.length) {\n    return false;\n  }\n\n  const name = event.transaction;\n  return name ? stringMatchesSomePattern(name, ignoreTransactions) : false;\n}\n\nfunction _isDeniedUrl(event: Event, denyUrls?: Array<string | RegExp>): boolean {\n  // TODO: Use Glob instead?\n  if (!denyUrls || !denyUrls.length) {\n    return false;\n  }\n  const url = _getEventFilterUrl(event);\n  return !url ? false : stringMatchesSomePattern(url, denyUrls);\n}\n\nfunction _isAllowedUrl(event: Event, allowUrls?: Array<string | RegExp>): boolean {\n  // TODO: Use Glob instead?\n  if (!allowUrls || !allowUrls.length) {\n    return true;\n  }\n  const url = _getEventFilterUrl(event);\n  return !url ? true : stringMatchesSomePattern(url, allowUrls);\n}\n\nfunction _getPossibleEventMessages(event: Event): string[] {\n  if (event.message) {\n    return [event.message];\n  }\n  if (event.exception) {\n    const { values } = event.exception;\n    try {\n      const { type = '', value = '' } = (values && values[values.length - 1]) || {};\n      return [`${value}`, `${type}: ${value}`];\n    } catch (oO) {\n      __DEBUG_BUILD__ && logger.error(`Cannot extract message for event ${getEventDescription(event)}`);\n      return [];\n    }\n  }\n  return [];\n}\n\nfunction _isSentryError(event: Event): boolean {\n  try {\n    // @ts-ignore can't be a sentry error if undefined\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    return event.exception.values[0].type === 'SentryError';\n  } catch (e) {\n    // ignore\n  }\n  return false;\n}\n\nfunction _getLastValidUrl(frames: StackFrame[] = []): string | null {\n  for (let i = frames.length - 1; i >= 0; i--) {\n    const frame = frames[i];\n\n    if (frame && frame.filename !== '<anonymous>' && frame.filename !== '[native code]') {\n      return frame.filename || null;\n    }\n  }\n\n  return null;\n}\n\nfunction _getEventFilterUrl(event: Event): string | null {\n  try {\n    let frames;\n    try {\n      // @ts-ignore we only care about frames if the whole thing here is defined\n      frames = event.exception.values[0].stacktrace.frames;\n    } catch (e) {\n      // ignore\n    }\n    return frames ? _getLastValidUrl(frames) : null;\n  } catch (oO) {\n    __DEBUG_BUILD__ && logger.error(`Cannot extract url for event ${getEventDescription(event)}`);\n    return null;\n  }\n}\n","export default function _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}","import type { Integration, WrappedFunction } from '@sentry/types';\nimport { getOriginalFunction } from '@sentry/utils';\n\nlet originalFunctionToString: () => void;\n\n/** Patch toString calls to return proper name for wrapped functions */\nexport class FunctionToString implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'FunctionToString';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = FunctionToString.id;\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(): void {\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    originalFunctionToString = Function.prototype.toString;\n\n    // intrinsics (like Function.prototype) might be immutable in some environments\n    // e.g. Node with --frozen-intrinsics, XS (an embedded JavaScript engine) or SES (a JavaScript proposal)\n    try {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      Function.prototype.toString = function (this: WrappedFunction, ...args: any[]): string {\n        const context = getOriginalFunction(this) || this;\n        return originalFunctionToString.apply(context, args);\n      };\n    } catch {\n      // ignore errors here, just don't patch this\n    }\n  }\n}\n","import { isString } from './is';\nimport { getGlobalObject } from './worldwide';\n\n// eslint-disable-next-line deprecation/deprecation\nconst WINDOW = getGlobalObject<Window>();\n\nconst DEFAULT_MAX_STRING_LENGTH = 80;\n\n/**\n * Given a child DOM element, returns a query-selector statement describing that\n * and its ancestors\n * e.g. [HTMLElement] => body > div > input#foo.btn[name=baz]\n * @returns generated DOM path\n */\nexport function htmlTreeAsString(\n  elem: unknown,\n  options: string[] | { keyAttrs?: string[]; maxStringLength?: number } = {},\n): string {\n  type SimpleNode = {\n    parentNode: SimpleNode;\n  } | null;\n\n  // try/catch both:\n  // - accessing event.target (see getsentry/raven-js#838, #768)\n  // - `htmlTreeAsString` because it's complex, and just accessing the DOM incorrectly\n  // - can throw an exception in some circumstances.\n  try {\n    let currentElem = elem as SimpleNode;\n    const MAX_TRAVERSE_HEIGHT = 5;\n    const out = [];\n    let height = 0;\n    let len = 0;\n    const separator = ' > ';\n    const sepLength = separator.length;\n    let nextStr;\n    const keyAttrs = Array.isArray(options) ? options : options.keyAttrs;\n    const maxStringLength = (!Array.isArray(options) && options.maxStringLength) || DEFAULT_MAX_STRING_LENGTH;\n\n    while (currentElem && height++ < MAX_TRAVERSE_HEIGHT) {\n      nextStr = _htmlElementAsString(currentElem, keyAttrs);\n      // bail out if\n      // - nextStr is the 'html' element\n      // - the length of the string that would be created exceeds maxStringLength\n      //   (ignore this limit if we are on the first iteration)\n      if (nextStr === 'html' || (height > 1 && len + out.length * sepLength + nextStr.length >= maxStringLength)) {\n        break;\n      }\n\n      out.push(nextStr);\n\n      len += nextStr.length;\n      currentElem = currentElem.parentNode;\n    }\n\n    return out.reverse().join(separator);\n  } catch (_oO) {\n    return '<unknown>';\n  }\n}\n\n/**\n * Returns a simple, query-selector representation of a DOM element\n * e.g. [HTMLElement] => input#foo.btn[name=baz]\n * @returns generated DOM path\n */\nfunction _htmlElementAsString(el: unknown, keyAttrs?: string[]): string {\n  const elem = el as {\n    tagName?: string;\n    id?: string;\n    className?: string;\n    getAttribute(key: string): string;\n  };\n\n  const out = [];\n  let className;\n  let classes;\n  let key;\n  let attr;\n  let i;\n\n  if (!elem || !elem.tagName) {\n    return '';\n  }\n\n  out.push(elem.tagName.toLowerCase());\n\n  // Pairs of attribute keys defined in `serializeAttribute` and their values on element.\n  const keyAttrPairs =\n    keyAttrs && keyAttrs.length\n      ? keyAttrs.filter(keyAttr => elem.getAttribute(keyAttr)).map(keyAttr => [keyAttr, elem.getAttribute(keyAttr)])\n      : null;\n\n  if (keyAttrPairs && keyAttrPairs.length) {\n    keyAttrPairs.forEach(keyAttrPair => {\n      out.push(`[${keyAttrPair[0]}=\"${keyAttrPair[1]}\"]`);\n    });\n  } else {\n    if (elem.id) {\n      out.push(`#${elem.id}`);\n    }\n\n    // eslint-disable-next-line prefer-const\n    className = elem.className;\n    if (className && isString(className)) {\n      classes = className.split(/\\s+/);\n      for (i = 0; i < classes.length; i++) {\n        out.push(`.${classes[i]}`);\n      }\n    }\n  }\n  const allowedAttrs = ['aria-label', 'type', 'name', 'title', 'alt'];\n  for (i = 0; i < allowedAttrs.length; i++) {\n    key = allowedAttrs[i];\n    attr = elem.getAttribute(key);\n    if (attr) {\n      out.push(`[${key}=\"${attr}\"]`);\n    }\n  }\n  return out.join('');\n}\n\n/**\n * A safe form of location.href\n */\nexport function getLocationHref(): string {\n  try {\n    return WINDOW.document.location.href;\n  } catch (oO) {\n    return '';\n  }\n}\n\n/**\n * Gets a DOM element by using document.querySelector.\n *\n * This wrapper will first check for the existance of the function before\n * actually calling it so that we don't have to take care of this check,\n * every time we want to access the DOM.\n *\n * Reason: DOM/querySelector is not available in all environments.\n *\n * We have to cast to any because utils can be consumed by a variety of environments,\n * and we don't want to break TS users. If you know what element will be selected by\n * `document.querySelector`, specify it as part of the generic call. For example,\n * `const element = getDomElement<Element>('selector');`\n *\n * @param selector the selector string passed on to document.querySelector\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function getDomElement<E = any>(selector: string): E | null {\n  if (WINDOW.document && WINDOW.document.querySelector) {\n    return WINDOW.document.querySelector(selector) as unknown as E;\n  }\n  return null;\n}\n","/* eslint-disable max-lines */\n/* eslint-disable @typescript-eslint/no-explicit-any */\nimport type { WrappedFunction } from '@sentry/types';\n\nimport { htmlTreeAsString } from './browser';\nimport { isElement, isError, isEvent, isInstanceOf, isPlainObject, isPrimitive } from './is';\nimport { truncate } from './string';\n\n/**\n * Replace a method in an object with a wrapped version of itself.\n *\n * @param source An object that contains a method to be wrapped.\n * @param name The name of the method to be wrapped.\n * @param replacementFactory A higher-order function that takes the original version of the given method and returns a\n * wrapped version. Note: The function returned by `replacementFactory` needs to be a non-arrow function, in order to\n * preserve the correct value of `this`, and the original method must be called using `origMethod.call(this, <other\n * args>)` or `origMethod.apply(this, [<other args>])` (rather than being called directly), again to preserve `this`.\n * @returns void\n */\nexport function fill(source: { [key: string]: any }, name: string, replacementFactory: (...args: any[]) => any): void {\n  if (!(name in source)) {\n    return;\n  }\n\n  const original = source[name] as () => any;\n  const wrapped = replacementFactory(original) as WrappedFunction;\n\n  // Make sure it's a function first, as we need to attach an empty prototype for `defineProperties` to work\n  // otherwise it'll throw \"TypeError: Object.defineProperties called on non-object\"\n  if (typeof wrapped === 'function') {\n    try {\n      markFunctionWrapped(wrapped, original);\n    } catch (_Oo) {\n      // This can throw if multiple fill happens on a global object like XMLHttpRequest\n      // Fixes https://github.com/getsentry/sentry-javascript/issues/2043\n    }\n  }\n\n  source[name] = wrapped;\n}\n\n/**\n * Defines a non-enumerable property on the given object.\n *\n * @param obj The object on which to set the property\n * @param name The name of the property to be set\n * @param value The value to which to set the property\n */\nexport function addNonEnumerableProperty(obj: { [key: string]: unknown }, name: string, value: unknown): void {\n  Object.defineProperty(obj, name, {\n    // enumerable: false, // the default, so we can save on bundle size by not explicitly setting it\n    value: value,\n    writable: true,\n    configurable: true,\n  });\n}\n\n/**\n * Remembers the original function on the wrapped function and\n * patches up the prototype.\n *\n * @param wrapped the wrapper function\n * @param original the original function that gets wrapped\n */\nexport function markFunctionWrapped(wrapped: WrappedFunction, original: WrappedFunction): void {\n  const proto = original.prototype || {};\n  wrapped.prototype = original.prototype = proto;\n  addNonEnumerableProperty(wrapped, '__sentry_original__', original);\n}\n\n/**\n * This extracts the original function if available.  See\n * `markFunctionWrapped` for more information.\n *\n * @param func the function to unwrap\n * @returns the unwrapped version of the function if available.\n */\nexport function getOriginalFunction(func: WrappedFunction): WrappedFunction | undefined {\n  return func.__sentry_original__;\n}\n\n/**\n * Encodes given object into url-friendly format\n *\n * @param object An object that contains serializable values\n * @returns string Encoded\n */\nexport function urlEncode(object: { [key: string]: any }): string {\n  return Object.keys(object)\n    .map(key => `${encodeURIComponent(key)}=${encodeURIComponent(object[key])}`)\n    .join('&');\n}\n\n/**\n * Transforms any `Error` or `Event` into a plain object with all of their enumerable properties, and some of their\n * non-enumerable properties attached.\n *\n * @param value Initial source that we have to transform in order for it to be usable by the serializer\n * @returns An Event or Error turned into an object - or the value argurment itself, when value is neither an Event nor\n *  an Error.\n */\nexport function convertToPlainObject<V>(value: V):\n  | {\n      [ownProps: string]: unknown;\n      type: string;\n      target: string;\n      currentTarget: string;\n      detail?: unknown;\n    }\n  | {\n      [ownProps: string]: unknown;\n      message: string;\n      name: string;\n      stack?: string;\n    }\n  | V {\n  if (isError(value)) {\n    return {\n      message: value.message,\n      name: value.name,\n      stack: value.stack,\n      ...getOwnProperties(value),\n    };\n  } else if (isEvent(value)) {\n    const newObj: {\n      [ownProps: string]: unknown;\n      type: string;\n      target: string;\n      currentTarget: string;\n      detail?: unknown;\n    } = {\n      type: value.type,\n      target: serializeEventTarget(value.target),\n      currentTarget: serializeEventTarget(value.currentTarget),\n      ...getOwnProperties(value),\n    };\n\n    if (typeof CustomEvent !== 'undefined' && isInstanceOf(value, CustomEvent)) {\n      newObj.detail = value.detail;\n    }\n\n    return newObj;\n  } else {\n    return value;\n  }\n}\n\n/** Creates a string representation of the target of an `Event` object */\nfunction serializeEventTarget(target: unknown): string {\n  try {\n    return isElement(target) ? htmlTreeAsString(target) : Object.prototype.toString.call(target);\n  } catch (_oO) {\n    return '<unknown>';\n  }\n}\n\n/** Filters out all but an object's own properties */\nfunction getOwnProperties(obj: unknown): { [key: string]: unknown } {\n  if (typeof obj === 'object' && obj !== null) {\n    const extractedProps: { [key: string]: unknown } = {};\n    for (const property in obj) {\n      if (Object.prototype.hasOwnProperty.call(obj, property)) {\n        extractedProps[property] = (obj as Record<string, unknown>)[property];\n      }\n    }\n    return extractedProps;\n  } else {\n    return {};\n  }\n}\n\n/**\n * Given any captured exception, extract its keys and create a sorted\n * and truncated list that will be used inside the event message.\n * eg. `Non-error exception captured with keys: foo, bar, baz`\n */\nexport function extractExceptionKeysForMessage(exception: Record<string, unknown>, maxLength: number = 40): string {\n  const keys = Object.keys(convertToPlainObject(exception));\n  keys.sort();\n\n  if (!keys.length) {\n    return '[object has no keys]';\n  }\n\n  if (keys[0].length >= maxLength) {\n    return truncate(keys[0], maxLength);\n  }\n\n  for (let includedKeys = keys.length; includedKeys > 0; includedKeys--) {\n    const serialized = keys.slice(0, includedKeys).join(', ');\n    if (serialized.length > maxLength) {\n      continue;\n    }\n    if (includedKeys === keys.length) {\n      return serialized;\n    }\n    return truncate(serialized, maxLength);\n  }\n\n  return '';\n}\n\n/**\n * Given any object, return a new object having removed all fields whose value was `undefined`.\n * Works recursively on objects and arrays.\n *\n * Attention: This function keeps circular references in the returned object.\n */\nexport function dropUndefinedKeys<T>(inputValue: T): T {\n  // This map keeps track of what already visited nodes map to.\n  // Our Set - based memoBuilder doesn't work here because we want to the output object to have the same circular\n  // references as the input object.\n  const memoizationMap = new Map<unknown, unknown>();\n\n  // This function just proxies `_dropUndefinedKeys` to keep the `memoBuilder` out of this function's API\n  return _dropUndefinedKeys(inputValue, memoizationMap);\n}\n\nfunction _dropUndefinedKeys<T>(inputValue: T, memoizationMap: Map<unknown, unknown>): T {\n  if (isPlainObject(inputValue)) {\n    // If this node has already been visited due to a circular reference, return the object it was mapped to in the new object\n    const memoVal = memoizationMap.get(inputValue);\n    if (memoVal !== undefined) {\n      return memoVal as T;\n    }\n\n    const returnValue: { [key: string]: any } = {};\n    // Store the mapping of this value in case we visit it again, in case of circular data\n    memoizationMap.set(inputValue, returnValue);\n\n    for (const key of Object.keys(inputValue)) {\n      if (typeof inputValue[key] !== 'undefined') {\n        returnValue[key] = _dropUndefinedKeys(inputValue[key], memoizationMap);\n      }\n    }\n\n    return returnValue as T;\n  }\n\n  if (Array.isArray(inputValue)) {\n    // If this node has already been visited due to a circular reference, return the array it was mapped to in the new object\n    const memoVal = memoizationMap.get(inputValue);\n    if (memoVal !== undefined) {\n      return memoVal as T;\n    }\n\n    const returnValue: unknown[] = [];\n    // Store the mapping of this value in case we visit it again, in case of circular data\n    memoizationMap.set(inputValue, returnValue);\n\n    inputValue.forEach((item: unknown) => {\n      returnValue.push(_dropUndefinedKeys(item, memoizationMap));\n    });\n\n    return returnValue as unknown as T;\n  }\n\n  return inputValue;\n}\n\n/**\n * Ensure that something is an object.\n *\n * Turns `undefined` and `null` into `String`s and all other primitives into instances of their respective wrapper\n * classes (String, Boolean, Number, etc.). Acts as the identity function on non-primitives.\n *\n * @param wat The subject of the objectification\n * @returns A version of `wat` which can safely be used with `Object` class methods\n */\nexport function objectify(wat: unknown): typeof Object {\n  let objectified;\n  switch (true) {\n    case wat === undefined || wat === null:\n      objectified = new String(wat);\n      break;\n\n    // Though symbols and bigints do have wrapper classes (`Symbol` and `BigInt`, respectively), for whatever reason\n    // those classes don't have constructors which can be used with the `new` keyword. We therefore need to cast each as\n    // an object in order to wrap it.\n    case typeof wat === 'symbol' || typeof wat === 'bigint':\n      objectified = Object(wat);\n      break;\n\n    // this will catch the remaining primitives: `String`, `Number`, and `Boolean`\n    case isPrimitive(wat):\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      objectified = new (wat as any).constructor(wat);\n      break;\n\n    // by process of elimination, at this point we know that `wat` must already be an object\n    default:\n      objectified = wat;\n      break;\n  }\n  return objectified;\n}\n","import type { StackFrame, StackLineParser, StackParser } from '@sentry/types';\n\nimport type { GetModuleFn } from './node-stack-trace';\nimport { node } from './node-stack-trace';\n\nconst STACKTRACE_FRAME_LIMIT = 50;\n// Used to sanitize webpack (error: *) wrapped stack errors\nconst WEBPACK_ERROR_REGEXP = /\\(error: (.*)\\)/;\n\n/**\n * Creates a stack parser with the supplied line parsers\n *\n * StackFrames are returned in the correct order for Sentry Exception\n * frames and with Sentry SDK internal frames removed from the top and bottom\n *\n */\nexport function createStackParser(...parsers: StackLineParser[]): StackParser {\n  const sortedParsers = parsers.sort((a, b) => a[0] - b[0]).map(p => p[1]);\n\n  return (stack: string, skipFirst: number = 0): StackFrame[] => {\n    const frames: StackFrame[] = [];\n    const lines = stack.split('\\n');\n\n    for (let i = skipFirst; i < lines.length; i++) {\n      const line = lines[i];\n      // Ignore lines over 1kb as they are unlikely to be stack frames.\n      // Many of the regular expressions use backtracking which results in run time that increases exponentially with\n      // input size. Huge strings can result in hangs/Denial of Service:\n      // https://github.com/getsentry/sentry-javascript/issues/2286\n      if (line.length > 1024) {\n        continue;\n      }\n\n      // https://github.com/getsentry/sentry-javascript/issues/5459\n      // Remove webpack (error: *) wrappers\n      const cleanedLine = WEBPACK_ERROR_REGEXP.test(line) ? line.replace(WEBPACK_ERROR_REGEXP, '$1') : line;\n\n      // https://github.com/getsentry/sentry-javascript/issues/7813\n      // Skip Error: lines\n      if (cleanedLine.match(/\\S*Error: /)) {\n        continue;\n      }\n\n      for (const parser of sortedParsers) {\n        const frame = parser(cleanedLine);\n\n        if (frame) {\n          frames.push(frame);\n          break;\n        }\n      }\n\n      if (frames.length >= STACKTRACE_FRAME_LIMIT) {\n        break;\n      }\n    }\n\n    return stripSentryFramesAndReverse(frames);\n  };\n}\n\n/**\n * Gets a stack parser implementation from Options.stackParser\n * @see Options\n *\n * If options contains an array of line parsers, it is converted into a parser\n */\nexport function stackParserFromStackParserOptions(stackParser: StackParser | StackLineParser[]): StackParser {\n  if (Array.isArray(stackParser)) {\n    return createStackParser(...stackParser);\n  }\n  return stackParser;\n}\n\n/**\n * Removes Sentry frames from the top and bottom of the stack if present and enforces a limit of max number of frames.\n * Assumes stack input is ordered from top to bottom and returns the reverse representation so call site of the\n * function that caused the crash is the last frame in the array.\n * @hidden\n */\nexport function stripSentryFramesAndReverse(stack: ReadonlyArray<StackFrame>): StackFrame[] {\n  if (!stack.length) {\n    return [];\n  }\n\n  const localStack = stack.slice(0, STACKTRACE_FRAME_LIMIT);\n\n  const lastFrameFunction = localStack[localStack.length - 1].function;\n  // If stack starts with one of our API calls, remove it (starts, meaning it's the top of the stack - aka last call)\n  if (lastFrameFunction && /sentryWrapped/.test(lastFrameFunction)) {\n    localStack.pop();\n  }\n\n  // Reversing in the middle of the procedure allows us to just pop the values off the stack\n  localStack.reverse();\n\n  const firstFrameFunction = localStack[localStack.length - 1].function;\n  // If stack ends with one of our internal API calls, remove it (ends, meaning it's the bottom of the stack - aka top-most call)\n  if (firstFrameFunction && /captureMessage|captureException/.test(firstFrameFunction)) {\n    localStack.pop();\n  }\n\n  return localStack.map(frame => ({\n    ...frame,\n    filename: frame.filename || localStack[localStack.length - 1].filename,\n    function: frame.function || '?',\n  }));\n}\n\nconst defaultFunctionName = '<anonymous>';\n\n/**\n * Safely extract function name from itself\n */\nexport function getFunctionName(fn: unknown): string {\n  try {\n    if (!fn || typeof fn !== 'function') {\n      return defaultFunctionName;\n    }\n    return fn.name || defaultFunctionName;\n  } catch (e) {\n    // Just accessing custom props in some Selenium environments\n    // can cause a \"Permission denied\" exception (see raven-js#495).\n    return defaultFunctionName;\n  }\n}\n\n/**\n * Node.js stack line parser\n *\n * This is in @sentry/utils so it can be used from the Electron SDK in the browser for when `nodeIntegration == true`.\n * This allows it to be used without referencing or importing any node specific code which causes bundlers to complain\n */\nexport function nodeStackLineParser(getModule?: GetModuleFn): StackLineParser {\n  return [90, node(getModule)];\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport type { Event, Exception, Mechanism, StackFrame } from '@sentry/types';\n\nimport { addNonEnumerableProperty } from './object';\nimport { snipLine } from './string';\nimport { GLOBAL_OBJ } from './worldwide';\n\ninterface CryptoInternal {\n  getRandomValues(array: Uint8Array): Uint8Array;\n  randomUUID?(): string;\n}\n\n/** An interface for common properties on global */\ninterface CryptoGlobal {\n  msCrypto?: CryptoInternal;\n  crypto?: CryptoInternal;\n}\n\n/**\n * UUID4 generator\n *\n * @returns string Generated UUID4.\n */\nexport function uuid4(): string {\n  const gbl = GLOBAL_OBJ as typeof GLOBAL_OBJ & CryptoGlobal;\n  const crypto = gbl.crypto || gbl.msCrypto;\n\n  if (crypto && crypto.randomUUID) {\n    return crypto.randomUUID().replace(/-/g, '');\n  }\n\n  const getRandomByte =\n    crypto && crypto.getRandomValues ? () => crypto.getRandomValues(new Uint8Array(1))[0] : () => Math.random() * 16;\n\n  // http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/2117523#2117523\n  // Concatenating the following numbers as strings results in '10000000100040008000100000000000'\n  return (([1e7] as unknown as string) + 1e3 + 4e3 + 8e3 + 1e11).replace(/[018]/g, c =>\n    // eslint-disable-next-line no-bitwise\n    ((c as unknown as number) ^ ((getRandomByte() & 15) >> ((c as unknown as number) / 4))).toString(16),\n  );\n}\n\nfunction getFirstException(event: Event): Exception | undefined {\n  return event.exception && event.exception.values ? event.exception.values[0] : undefined;\n}\n\n/**\n * Extracts either message or type+value from an event that can be used for user-facing logs\n * @returns event's description\n */\nexport function getEventDescription(event: Event): string {\n  const { message, event_id: eventId } = event;\n  if (message) {\n    return message;\n  }\n\n  const firstException = getFirstException(event);\n  if (firstException) {\n    if (firstException.type && firstException.value) {\n      return `${firstException.type}: ${firstException.value}`;\n    }\n    return firstException.type || firstException.value || eventId || '<unknown>';\n  }\n  return eventId || '<unknown>';\n}\n\n/**\n * Adds exception values, type and value to an synthetic Exception.\n * @param event The event to modify.\n * @param value Value of the exception.\n * @param type Type of the exception.\n * @hidden\n */\nexport function addExceptionTypeValue(event: Event, value?: string, type?: string): void {\n  const exception = (event.exception = event.exception || {});\n  const values = (exception.values = exception.values || []);\n  const firstException = (values[0] = values[0] || {});\n  if (!firstException.value) {\n    firstException.value = value || '';\n  }\n  if (!firstException.type) {\n    firstException.type = type || 'Error';\n  }\n}\n\n/**\n * Adds exception mechanism data to a given event. Uses defaults if the second parameter is not passed.\n *\n * @param event The event to modify.\n * @param newMechanism Mechanism data to add to the event.\n * @hidden\n */\nexport function addExceptionMechanism(event: Event, newMechanism?: Partial<Mechanism>): void {\n  const firstException = getFirstException(event);\n  if (!firstException) {\n    return;\n  }\n\n  const defaultMechanism = { type: 'generic', handled: true };\n  const currentMechanism = firstException.mechanism;\n  firstException.mechanism = { ...defaultMechanism, ...currentMechanism, ...newMechanism };\n\n  if (newMechanism && 'data' in newMechanism) {\n    const mergedData = { ...(currentMechanism && currentMechanism.data), ...newMechanism.data };\n    firstException.mechanism.data = mergedData;\n  }\n}\n\n// https://semver.org/#is-there-a-suggested-regular-expression-regex-to-check-a-semver-string\nconst SEMVER_REGEXP =\n  /^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$/;\n\n/**\n * Represents Semantic Versioning object\n */\ninterface SemVer {\n  major?: number;\n  minor?: number;\n  patch?: number;\n  prerelease?: string;\n  buildmetadata?: string;\n}\n\n/**\n * Parses input into a SemVer interface\n * @param input string representation of a semver version\n */\nexport function parseSemver(input: string): SemVer {\n  const match = input.match(SEMVER_REGEXP) || [];\n  const major = parseInt(match[1], 10);\n  const minor = parseInt(match[2], 10);\n  const patch = parseInt(match[3], 10);\n  return {\n    buildmetadata: match[5],\n    major: isNaN(major) ? undefined : major,\n    minor: isNaN(minor) ? undefined : minor,\n    patch: isNaN(patch) ? undefined : patch,\n    prerelease: match[4],\n  };\n}\n\n/**\n * This function adds context (pre/post/line) lines to the provided frame\n *\n * @param lines string[] containing all lines\n * @param frame StackFrame that will be mutated\n * @param linesOfContext number of context lines we want to add pre/post\n */\nexport function addContextToFrame(lines: string[], frame: StackFrame, linesOfContext: number = 5): void {\n  // When there is no line number in the frame, attaching context is nonsensical and will even break grouping\n  if (frame.lineno === undefined) {\n    return;\n  }\n\n  const maxLines = lines.length;\n  const sourceLine = Math.max(Math.min(maxLines, frame.lineno - 1), 0);\n\n  frame.pre_context = lines\n    .slice(Math.max(0, sourceLine - linesOfContext), sourceLine)\n    .map((line: string) => snipLine(line, 0));\n\n  frame.context_line = snipLine(lines[Math.min(maxLines - 1, sourceLine)], frame.colno || 0);\n\n  frame.post_context = lines\n    .slice(Math.min(sourceLine + 1, maxLines), sourceLine + 1 + linesOfContext)\n    .map((line: string) => snipLine(line, 0));\n}\n\n/**\n * Checks whether or not we've already captured the given exception (note: not an identical exception - the very object\n * in question), and marks it captured if not.\n *\n * This is useful because it's possible for an error to get captured by more than one mechanism. After we intercept and\n * record an error, we rethrow it (assuming we've intercepted it before it's reached the top-level global handlers), so\n * that we don't interfere with whatever effects the error might have had were the SDK not there. At that point, because\n * the error has been rethrown, it's possible for it to bubble up to some other code we've instrumented. If it's not\n * caught after that, it will bubble all the way up to the global handlers (which of course we also instrument). This\n * function helps us ensure that even if we encounter the same error more than once, we only record it the first time we\n * see it.\n *\n * Note: It will ignore primitives (always return `false` and not mark them as seen), as properties can't be set on\n * them. {@link: Object.objectify} can be used on exceptions to convert any that are primitives into their equivalent\n * object wrapper forms so that this check will always work. However, because we need to flag the exact object which\n * will get rethrown, and because that rethrowing happens outside of the event processing pipeline, the objectification\n * must be done before the exception captured.\n *\n * @param A thrown exception to check or flag as having been seen\n * @returns `true` if the exception has already been captured, `false` if not (with the side effect of marking it seen)\n */\nexport function checkOrSetAlreadyCaught(exception: unknown): boolean {\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n  if (exception && (exception as any).__sentry_captured__) {\n    return true;\n  }\n\n  try {\n    // set it this way rather than by assignment so that it's not ennumerable and therefore isn't recorded by the\n    // `ExtraErrorData` integration\n    addNonEnumerableProperty(exception as { [key: string]: unknown }, '__sentry_captured__', true);\n  } catch (err) {\n    // `exception` is a primitive, so we can't mark it seen\n  }\n\n  return false;\n}\n\n/**\n * Checks whether the given input is already an array, and if it isn't, wraps it in one.\n *\n * @param maybeArray Input to turn into an array, if necessary\n * @returns The input, if already an array, or an array with the input as the only element, if not\n */\nexport function arrayify<T = unknown>(maybeArray: T | T[]): T[] {\n  return Array.isArray(maybeArray) ? maybeArray : [maybeArray];\n}\n","import type { WrappedFunction } from '@sentry/types';\n\nimport { getGlobalSingleton, GLOBAL_OBJ } from './worldwide';\n\n/** Prefix for logging strings */\nconst PREFIX = 'Sentry Logger ';\n\nexport const CONSOLE_LEVELS = ['debug', 'info', 'warn', 'error', 'log', 'assert', 'trace'] as const;\nexport type ConsoleLevel = (typeof CONSOLE_LEVELS)[number];\n\ntype LoggerMethod = (...args: unknown[]) => void;\ntype LoggerConsoleMethods = Record<(typeof CONSOLE_LEVELS)[number], LoggerMethod>;\n\n/** JSDoc */\ninterface Logger extends LoggerConsoleMethods {\n  disable(): void;\n  enable(): void;\n}\n\n/**\n * Temporarily disable sentry console instrumentations.\n *\n * @param callback The function to run against the original `console` messages\n * @returns The results of the callback\n */\nexport function consoleSandbox<T>(callback: () => T): T {\n  if (!('console' in GLOBAL_OBJ)) {\n    return callback();\n  }\n\n  const originalConsole = GLOBAL_OBJ.console as Console & Record<string, unknown>;\n  const wrappedLevels: Partial<LoggerConsoleMethods> = {};\n\n  // Restore all wrapped console methods\n  CONSOLE_LEVELS.forEach(level => {\n    // TODO(v7): Remove this check as it's only needed for Node 6\n    const originalWrappedFunc =\n      originalConsole[level] && (originalConsole[level] as WrappedFunction).__sentry_original__;\n    if (level in originalConsole && originalWrappedFunc) {\n      wrappedLevels[level] = originalConsole[level] as LoggerConsoleMethods[typeof level];\n      originalConsole[level] = originalWrappedFunc as Console[typeof level];\n    }\n  });\n\n  try {\n    return callback();\n  } finally {\n    // Revert restoration to wrapped state\n    Object.keys(wrappedLevels).forEach(level => {\n      originalConsole[level] = wrappedLevels[level as (typeof CONSOLE_LEVELS)[number]];\n    });\n  }\n}\n\nfunction makeLogger(): Logger {\n  let enabled = false;\n  const logger: Partial<Logger> = {\n    enable: () => {\n      enabled = true;\n    },\n    disable: () => {\n      enabled = false;\n    },\n  };\n\n  if (__DEBUG_BUILD__) {\n    CONSOLE_LEVELS.forEach(name => {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      logger[name] = (...args: any[]) => {\n        if (enabled) {\n          consoleSandbox(() => {\n            GLOBAL_OBJ.console[name](`${PREFIX}[${name}]:`, ...args);\n          });\n        }\n      };\n    });\n  } else {\n    CONSOLE_LEVELS.forEach(name => {\n      logger[name] = () => undefined;\n    });\n  }\n\n  return logger as Logger;\n}\n\n// Ensure we only have a single logger instance, even if multiple versions of @sentry/utils are being used\nlet logger: Logger;\nif (__DEBUG_BUILD__) {\n  logger = getGlobalSingleton('logger', makeLogger);\n} else {\n  logger = makeLogger();\n}\n\nexport { logger };\n","export const DEFAULT_ENVIRONMENT = 'production';\n","/* eslint-disable @typescript-eslint/explicit-function-return-type */\n/* eslint-disable @typescript-eslint/typedef */\n/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\n/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { isThenable } from './is';\n\n/** SyncPromise internal states */\nconst enum States {\n  /** Pending */\n  PENDING = 0,\n  /** Resolved / OK */\n  RESOLVED = 1,\n  /** Rejected / Error */\n  REJECTED = 2,\n}\n\n// Overloads so we can call resolvedSyncPromise without arguments and generic argument\nexport function resolvedSyncPromise(): PromiseLike<void>;\nexport function resolvedSyncPromise<T>(value: T | PromiseLike<T>): PromiseLike<T>;\n\n/**\n * Creates a resolved sync promise.\n *\n * @param value the value to resolve the promise with\n * @returns the resolved sync promise\n */\nexport function resolvedSyncPromise<T>(value?: T | PromiseLike<T>): PromiseLike<T> {\n  return new SyncPromise(resolve => {\n    resolve(value);\n  });\n}\n\n/**\n * Creates a rejected sync promise.\n *\n * @param value the value to reject the promise with\n * @returns the rejected sync promise\n */\nexport function rejectedSyncPromise<T = never>(reason?: any): PromiseLike<T> {\n  return new SyncPromise((_, reject) => {\n    reject(reason);\n  });\n}\n\n/**\n * Thenable class that behaves like a Promise and follows it's interface\n * but is not async internally\n */\nclass SyncPromise<T> implements PromiseLike<T> {\n  private _state: States = States.PENDING;\n  private _handlers: Array<[boolean, (value: T) => void, (reason: any) => any]> = [];\n  private _value: any;\n\n  public constructor(\n    executor: (resolve: (value?: T | PromiseLike<T> | null) => void, reject: (reason?: any) => void) => void,\n  ) {\n    try {\n      executor(this._resolve, this._reject);\n    } catch (e) {\n      this._reject(e);\n    }\n  }\n\n  /** JSDoc */\n  public then<TResult1 = T, TResult2 = never>(\n    onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | null,\n    onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | null,\n  ): PromiseLike<TResult1 | TResult2> {\n    return new SyncPromise((resolve, reject) => {\n      this._handlers.push([\n        false,\n        result => {\n          if (!onfulfilled) {\n            // TODO: ¯\\_(ツ)_/¯\n            // TODO: FIXME\n            resolve(result as any);\n          } else {\n            try {\n              resolve(onfulfilled(result));\n            } catch (e) {\n              reject(e);\n            }\n          }\n        },\n        reason => {\n          if (!onrejected) {\n            reject(reason);\n          } else {\n            try {\n              resolve(onrejected(reason));\n            } catch (e) {\n              reject(e);\n            }\n          }\n        },\n      ]);\n      this._executeHandlers();\n    });\n  }\n\n  /** JSDoc */\n  public catch<TResult = never>(\n    onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | null,\n  ): PromiseLike<T | TResult> {\n    return this.then(val => val, onrejected);\n  }\n\n  /** JSDoc */\n  public finally<TResult>(onfinally?: (() => void) | null): PromiseLike<TResult> {\n    return new SyncPromise<TResult>((resolve, reject) => {\n      let val: TResult | any;\n      let isRejected: boolean;\n\n      return this.then(\n        value => {\n          isRejected = false;\n          val = value;\n          if (onfinally) {\n            onfinally();\n          }\n        },\n        reason => {\n          isRejected = true;\n          val = reason;\n          if (onfinally) {\n            onfinally();\n          }\n        },\n      ).then(() => {\n        if (isRejected) {\n          reject(val);\n          return;\n        }\n\n        resolve(val as unknown as any);\n      });\n    });\n  }\n\n  /** JSDoc */\n  private readonly _resolve = (value?: T | PromiseLike<T> | null) => {\n    this._setResult(States.RESOLVED, value);\n  };\n\n  /** JSDoc */\n  private readonly _reject = (reason?: any) => {\n    this._setResult(States.REJECTED, reason);\n  };\n\n  /** JSDoc */\n  private readonly _setResult = (state: States, value?: T | PromiseLike<T> | any) => {\n    if (this._state !== States.PENDING) {\n      return;\n    }\n\n    if (isThenable(value)) {\n      void (value as PromiseLike<T>).then(this._resolve, this._reject);\n      return;\n    }\n\n    this._state = state;\n    this._value = value;\n\n    this._executeHandlers();\n  };\n\n  /** JSDoc */\n  private readonly _executeHandlers = () => {\n    if (this._state === States.PENDING) {\n      return;\n    }\n\n    const cachedHandlers = this._handlers.slice();\n    this._handlers = [];\n\n    cachedHandlers.forEach(handler => {\n      if (handler[0]) {\n        return;\n      }\n\n      if (this._state === States.RESOLVED) {\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        handler[1](this._value as unknown as any);\n      }\n\n      if (this._state === States.REJECTED) {\n        handler[2](this._value);\n      }\n\n      handler[0] = true;\n    });\n  };\n}\n\nexport { SyncPromise };\n","import type { SerializedSession, Session, SessionContext, SessionStatus } from '@sentry/types';\nimport { dropUndefinedKeys, timestampInSeconds, uuid4 } from '@sentry/utils';\n\n/**\n * Creates a new `Session` object by setting certain default parameters. If optional @param context\n * is passed, the passed properties are applied to the session object.\n *\n * @param context (optional) additional properties to be applied to the returned session object\n *\n * @returns a new `Session` object\n */\nexport function makeSession(context?: Omit<SessionContext, 'started' | 'status'>): Session {\n  // Both timestamp and started are in seconds since the UNIX epoch.\n  const startingTime = timestampInSeconds();\n\n  const session: Session = {\n    sid: uuid4(),\n    init: true,\n    timestamp: startingTime,\n    started: startingTime,\n    duration: 0,\n    status: 'ok',\n    errors: 0,\n    ignoreDuration: false,\n    toJSON: () => sessionToJSON(session),\n  };\n\n  if (context) {\n    updateSession(session, context);\n  }\n\n  return session;\n}\n\n/**\n * Updates a session object with the properties passed in the context.\n *\n * Note that this function mutates the passed object and returns void.\n * (Had to do this instead of returning a new and updated session because closing and sending a session\n * makes an update to the session after it was passed to the sending logic.\n * @see BaseClient.captureSession )\n *\n * @param session the `Session` to update\n * @param context the `SessionContext` holding the properties that should be updated in @param session\n */\n// eslint-disable-next-line complexity\nexport function updateSession(session: Session, context: SessionContext = {}): void {\n  if (context.user) {\n    if (!session.ipAddress && context.user.ip_address) {\n      session.ipAddress = context.user.ip_address;\n    }\n\n    if (!session.did && !context.did) {\n      session.did = context.user.id || context.user.email || context.user.username;\n    }\n  }\n\n  session.timestamp = context.timestamp || timestampInSeconds();\n\n  if (context.ignoreDuration) {\n    session.ignoreDuration = context.ignoreDuration;\n  }\n  if (context.sid) {\n    // Good enough uuid validation. — Kamil\n    session.sid = context.sid.length === 32 ? context.sid : uuid4();\n  }\n  if (context.init !== undefined) {\n    session.init = context.init;\n  }\n  if (!session.did && context.did) {\n    session.did = `${context.did}`;\n  }\n  if (typeof context.started === 'number') {\n    session.started = context.started;\n  }\n  if (session.ignoreDuration) {\n    session.duration = undefined;\n  } else if (typeof context.duration === 'number') {\n    session.duration = context.duration;\n  } else {\n    const duration = session.timestamp - session.started;\n    session.duration = duration >= 0 ? duration : 0;\n  }\n  if (context.release) {\n    session.release = context.release;\n  }\n  if (context.environment) {\n    session.environment = context.environment;\n  }\n  if (!session.ipAddress && context.ipAddress) {\n    session.ipAddress = context.ipAddress;\n  }\n  if (!session.userAgent && context.userAgent) {\n    session.userAgent = context.userAgent;\n  }\n  if (typeof context.errors === 'number') {\n    session.errors = context.errors;\n  }\n  if (context.status) {\n    session.status = context.status;\n  }\n}\n\n/**\n * Closes a session by setting its status and updating the session object with it.\n * Internally calls `updateSession` to update the passed session object.\n *\n * Note that this function mutates the passed session (@see updateSession for explanation).\n *\n * @param session the `Session` object to be closed\n * @param status the `SessionStatus` with which the session was closed. If you don't pass a status,\n *               this function will keep the previously set status, unless it was `'ok'` in which case\n *               it is changed to `'exited'`.\n */\nexport function closeSession(session: Session, status?: Exclude<SessionStatus, 'ok'>): void {\n  let context = {};\n  if (status) {\n    context = { status };\n  } else if (session.status === 'ok') {\n    context = { status: 'exited' };\n  }\n\n  updateSession(session, context);\n}\n\n/**\n * Serializes a passed session object to a JSON object with a slightly different structure.\n * This is necessary because the Sentry backend requires a slightly different schema of a session\n * than the one the JS SDKs use internally.\n *\n * @param session the session to be converted\n *\n * @returns a JSON object of the passed session\n */\nfunction sessionToJSON(session: Session): SerializedSession {\n  return dropUndefinedKeys({\n    sid: `${session.sid}`,\n    init: session.init,\n    // Make sure that sec is converted to ms for date constructor\n    started: new Date(session.started * 1000).toISOString(),\n    timestamp: new Date(session.timestamp * 1000).toISOString(),\n    status: session.status,\n    errors: session.errors,\n    did: typeof session.did === 'number' || typeof session.did === 'string' ? `${session.did}` : undefined,\n    duration: session.duration,\n    attrs: {\n      release: session.release,\n      environment: session.environment,\n      ip_address: session.ipAddress,\n      user_agent: session.userAgent,\n    },\n  });\n}\n","/* eslint-disable max-lines */\nimport type {\n  Attachment,\n  Breadcrumb,\n  CaptureContext,\n  Context,\n  Contexts,\n  Event,\n  EventHint,\n  EventProcessor,\n  Extra,\n  Extras,\n  Primitive,\n  RequestSession,\n  Scope as ScopeInterface,\n  ScopeContext,\n  Session,\n  Severity,\n  SeverityLevel,\n  Span,\n  Transaction,\n  User,\n} from '@sentry/types';\nimport {\n  arrayify,\n  dateTimestampInSeconds,\n  getGlobalSingleton,\n  isPlainObject,\n  isThenable,\n  logger,\n  SyncPromise,\n} from '@sentry/utils';\n\nimport { updateSession } from './session';\n\n/**\n * Default value for maximum number of breadcrumbs added to an event.\n */\nconst DEFAULT_MAX_BREADCRUMBS = 100;\n\n/**\n * Holds additional event information. {@link Scope.applyToEvent} will be\n * called by the client before an event will be sent.\n */\nexport class Scope implements ScopeInterface {\n  /** Flag if notifying is happening. */\n  protected _notifyingListeners: boolean;\n\n  /** Callback for client to receive scope changes. */\n  protected _scopeListeners: Array<(scope: Scope) => void>;\n\n  /** Callback list that will be called after {@link applyToEvent}. */\n  protected _eventProcessors: EventProcessor[];\n\n  /** Array of breadcrumbs. */\n  protected _breadcrumbs: Breadcrumb[];\n\n  /** User */\n  protected _user: User;\n\n  /** Tags */\n  protected _tags: { [key: string]: Primitive };\n\n  /** Extra */\n  protected _extra: Extras;\n\n  /** Contexts */\n  protected _contexts: Contexts;\n\n  /** Attachments */\n  protected _attachments: Attachment[];\n\n  /**\n   * A place to stash data which is needed at some point in the SDK's event processing pipeline but which shouldn't get\n   * sent to Sentry\n   */\n  protected _sdkProcessingMetadata: { [key: string]: unknown };\n\n  /** Fingerprint */\n  protected _fingerprint?: string[];\n\n  /** Severity */\n  // eslint-disable-next-line deprecation/deprecation\n  protected _level?: Severity | SeverityLevel;\n\n  /** Transaction Name */\n  protected _transactionName?: string;\n\n  /** Span */\n  protected _span?: Span;\n\n  /** Session */\n  protected _session?: Session;\n\n  /** Request Mode Session Status */\n  protected _requestSession?: RequestSession;\n\n  // NOTE: Any field which gets added here should get added not only to the constructor but also to the `clone` method.\n\n  public constructor() {\n    this._notifyingListeners = false;\n    this._scopeListeners = [];\n    this._eventProcessors = [];\n    this._breadcrumbs = [];\n    this._attachments = [];\n    this._user = {};\n    this._tags = {};\n    this._extra = {};\n    this._contexts = {};\n    this._sdkProcessingMetadata = {};\n  }\n\n  /**\n   * Inherit values from the parent scope.\n   * @param scope to clone.\n   */\n  public static clone(scope?: Scope): Scope {\n    const newScope = new Scope();\n    if (scope) {\n      newScope._breadcrumbs = [...scope._breadcrumbs];\n      newScope._tags = { ...scope._tags };\n      newScope._extra = { ...scope._extra };\n      newScope._contexts = { ...scope._contexts };\n      newScope._user = scope._user;\n      newScope._level = scope._level;\n      newScope._span = scope._span;\n      newScope._session = scope._session;\n      newScope._transactionName = scope._transactionName;\n      newScope._fingerprint = scope._fingerprint;\n      newScope._eventProcessors = [...scope._eventProcessors];\n      newScope._requestSession = scope._requestSession;\n      newScope._attachments = [...scope._attachments];\n      newScope._sdkProcessingMetadata = { ...scope._sdkProcessingMetadata };\n    }\n    return newScope;\n  }\n\n  /**\n   * Add internal on change listener. Used for sub SDKs that need to store the scope.\n   * @hidden\n   */\n  public addScopeListener(callback: (scope: Scope) => void): void {\n    this._scopeListeners.push(callback);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public addEventProcessor(callback: EventProcessor): this {\n    this._eventProcessors.push(callback);\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setUser(user: User | null): this {\n    this._user = user || {};\n    if (this._session) {\n      updateSession(this._session, { user });\n    }\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getUser(): User | undefined {\n    return this._user;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getRequestSession(): RequestSession | undefined {\n    return this._requestSession;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setRequestSession(requestSession?: RequestSession): this {\n    this._requestSession = requestSession;\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setTags(tags: { [key: string]: Primitive }): this {\n    this._tags = {\n      ...this._tags,\n      ...tags,\n    };\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setTag(key: string, value: Primitive): this {\n    this._tags = { ...this._tags, [key]: value };\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setExtras(extras: Extras): this {\n    this._extra = {\n      ...this._extra,\n      ...extras,\n    };\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setExtra(key: string, extra: Extra): this {\n    this._extra = { ...this._extra, [key]: extra };\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setFingerprint(fingerprint: string[]): this {\n    this._fingerprint = fingerprint;\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setLevel(\n    // eslint-disable-next-line deprecation/deprecation\n    level: Severity | SeverityLevel,\n  ): this {\n    this._level = level;\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setTransactionName(name?: string): this {\n    this._transactionName = name;\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setContext(key: string, context: Context | null): this {\n    if (context === null) {\n      // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n      delete this._contexts[key];\n    } else {\n      this._contexts[key] = context;\n    }\n\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setSpan(span?: Span): this {\n    this._span = span;\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getSpan(): Span | undefined {\n    return this._span;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getTransaction(): Transaction | undefined {\n    // Often, this span (if it exists at all) will be a transaction, but it's not guaranteed to be. Regardless, it will\n    // have a pointer to the currently-active transaction.\n    const span = this.getSpan();\n    return span && span.transaction;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setSession(session?: Session): this {\n    if (!session) {\n      delete this._session;\n    } else {\n      this._session = session;\n    }\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getSession(): Session | undefined {\n    return this._session;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public update(captureContext?: CaptureContext): this {\n    if (!captureContext) {\n      return this;\n    }\n\n    if (typeof captureContext === 'function') {\n      const updatedScope = (captureContext as <T>(scope: T) => T)(this);\n      return updatedScope instanceof Scope ? updatedScope : this;\n    }\n\n    if (captureContext instanceof Scope) {\n      this._tags = { ...this._tags, ...captureContext._tags };\n      this._extra = { ...this._extra, ...captureContext._extra };\n      this._contexts = { ...this._contexts, ...captureContext._contexts };\n      if (captureContext._user && Object.keys(captureContext._user).length) {\n        this._user = captureContext._user;\n      }\n      if (captureContext._level) {\n        this._level = captureContext._level;\n      }\n      if (captureContext._fingerprint) {\n        this._fingerprint = captureContext._fingerprint;\n      }\n      if (captureContext._requestSession) {\n        this._requestSession = captureContext._requestSession;\n      }\n    } else if (isPlainObject(captureContext)) {\n      // eslint-disable-next-line no-param-reassign\n      captureContext = captureContext as ScopeContext;\n      this._tags = { ...this._tags, ...captureContext.tags };\n      this._extra = { ...this._extra, ...captureContext.extra };\n      this._contexts = { ...this._contexts, ...captureContext.contexts };\n      if (captureContext.user) {\n        this._user = captureContext.user;\n      }\n      if (captureContext.level) {\n        this._level = captureContext.level;\n      }\n      if (captureContext.fingerprint) {\n        this._fingerprint = captureContext.fingerprint;\n      }\n      if (captureContext.requestSession) {\n        this._requestSession = captureContext.requestSession;\n      }\n    }\n\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public clear(): this {\n    this._breadcrumbs = [];\n    this._tags = {};\n    this._extra = {};\n    this._user = {};\n    this._contexts = {};\n    this._level = undefined;\n    this._transactionName = undefined;\n    this._fingerprint = undefined;\n    this._requestSession = undefined;\n    this._span = undefined;\n    this._session = undefined;\n    this._notifyScopeListeners();\n    this._attachments = [];\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public addBreadcrumb(breadcrumb: Breadcrumb, maxBreadcrumbs?: number): this {\n    const maxCrumbs = typeof maxBreadcrumbs === 'number' ? maxBreadcrumbs : DEFAULT_MAX_BREADCRUMBS;\n\n    // No data has been changed, so don't notify scope listeners\n    if (maxCrumbs <= 0) {\n      return this;\n    }\n\n    const mergedBreadcrumb = {\n      timestamp: dateTimestampInSeconds(),\n      ...breadcrumb,\n    };\n    this._breadcrumbs = [...this._breadcrumbs, mergedBreadcrumb].slice(-maxCrumbs);\n    this._notifyScopeListeners();\n\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getLastBreadcrumb(): Breadcrumb | undefined {\n    return this._breadcrumbs[this._breadcrumbs.length - 1];\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public clearBreadcrumbs(): this {\n    this._breadcrumbs = [];\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public addAttachment(attachment: Attachment): this {\n    this._attachments.push(attachment);\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getAttachments(): Attachment[] {\n    return this._attachments;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public clearAttachments(): this {\n    this._attachments = [];\n    return this;\n  }\n\n  /**\n   * Applies data from the scope to the event and runs all event processors on it.\n   *\n   * @param event Event\n   * @param hint Object containing additional information about the original exception, for use by the event processors.\n   * @hidden\n   */\n  public applyToEvent(event: Event, hint: EventHint = {}): PromiseLike<Event | null> {\n    if (this._extra && Object.keys(this._extra).length) {\n      event.extra = { ...this._extra, ...event.extra };\n    }\n    if (this._tags && Object.keys(this._tags).length) {\n      event.tags = { ...this._tags, ...event.tags };\n    }\n    if (this._user && Object.keys(this._user).length) {\n      event.user = { ...this._user, ...event.user };\n    }\n    if (this._contexts && Object.keys(this._contexts).length) {\n      event.contexts = { ...this._contexts, ...event.contexts };\n    }\n    if (this._level) {\n      event.level = this._level;\n    }\n    if (this._transactionName) {\n      event.transaction = this._transactionName;\n    }\n\n    // We want to set the trace context for normal events only if there isn't already\n    // a trace context on the event. There is a product feature in place where we link\n    // errors with transaction and it relies on that.\n    if (this._span) {\n      event.contexts = { trace: this._span.getTraceContext(), ...event.contexts };\n      const transaction = this._span.transaction;\n      if (transaction) {\n        event.sdkProcessingMetadata = {\n          dynamicSamplingContext: transaction.getDynamicSamplingContext(),\n          ...event.sdkProcessingMetadata,\n        };\n        const transactionName = transaction.name;\n        if (transactionName) {\n          event.tags = { transaction: transactionName, ...event.tags };\n        }\n      }\n    }\n\n    this._applyFingerprint(event);\n\n    event.breadcrumbs = [...(event.breadcrumbs || []), ...this._breadcrumbs];\n    event.breadcrumbs = event.breadcrumbs.length > 0 ? event.breadcrumbs : undefined;\n\n    event.sdkProcessingMetadata = { ...event.sdkProcessingMetadata, ...this._sdkProcessingMetadata };\n\n    return this._notifyEventProcessors([...getGlobalEventProcessors(), ...this._eventProcessors], event, hint);\n  }\n\n  /**\n   * Add data which will be accessible during event processing but won't get sent to Sentry\n   */\n  public setSDKProcessingMetadata(newData: { [key: string]: unknown }): this {\n    this._sdkProcessingMetadata = { ...this._sdkProcessingMetadata, ...newData };\n\n    return this;\n  }\n\n  /**\n   * This will be called after {@link applyToEvent} is finished.\n   */\n  protected _notifyEventProcessors(\n    processors: EventProcessor[],\n    event: Event | null,\n    hint: EventHint,\n    index: number = 0,\n  ): PromiseLike<Event | null> {\n    return new SyncPromise<Event | null>((resolve, reject) => {\n      const processor = processors[index];\n      if (event === null || typeof processor !== 'function') {\n        resolve(event);\n      } else {\n        const result = processor({ ...event }, hint) as Event | null;\n\n        __DEBUG_BUILD__ &&\n          processor.id &&\n          result === null &&\n          logger.log(`Event processor \"${processor.id}\" dropped event`);\n\n        if (isThenable(result)) {\n          void result\n            .then(final => this._notifyEventProcessors(processors, final, hint, index + 1).then(resolve))\n            .then(null, reject);\n        } else {\n          void this._notifyEventProcessors(processors, result, hint, index + 1)\n            .then(resolve)\n            .then(null, reject);\n        }\n      }\n    });\n  }\n\n  /**\n   * This will be called on every set call.\n   */\n  protected _notifyScopeListeners(): void {\n    // We need this check for this._notifyingListeners to be able to work on scope during updates\n    // If this check is not here we'll produce endless recursion when something is done with the scope\n    // during the callback.\n    if (!this._notifyingListeners) {\n      this._notifyingListeners = true;\n      this._scopeListeners.forEach(callback => {\n        callback(this);\n      });\n      this._notifyingListeners = false;\n    }\n  }\n\n  /**\n   * Applies fingerprint from the scope to the event if there's one,\n   * uses message if there's one instead or get rid of empty fingerprint\n   */\n  private _applyFingerprint(event: Event): void {\n    // Make sure it's an array first and we actually have something in place\n    event.fingerprint = event.fingerprint ? arrayify(event.fingerprint) : [];\n\n    // If we have something on the scope, then merge it with event\n    if (this._fingerprint) {\n      event.fingerprint = event.fingerprint.concat(this._fingerprint);\n    }\n\n    // If we have no data at all, remove empty array default\n    if (event.fingerprint && !event.fingerprint.length) {\n      delete event.fingerprint;\n    }\n  }\n}\n\n/**\n * Returns the global event processors.\n */\nfunction getGlobalEventProcessors(): EventProcessor[] {\n  return getGlobalSingleton<EventProcessor[]>('globalEventProcessors', () => []);\n}\n\n/**\n * Add a EventProcessor to be kept globally.\n * @param callback EventProcessor to add\n */\nexport function addGlobalEventProcessor(callback: EventProcessor): void {\n  getGlobalEventProcessors().push(callback);\n}\n","/* eslint-disable max-lines */\nimport type {\n  Breadcrumb,\n  BreadcrumbHint,\n  Client,\n  CustomSamplingContext,\n  Event,\n  EventHint,\n  Extra,\n  Extras,\n  Hub as HubInterface,\n  Integration,\n  IntegrationClass,\n  Primitive,\n  Session,\n  SessionContext,\n  Severity,\n  SeverityLevel,\n  Transaction,\n  TransactionContext,\n  User,\n} from '@sentry/types';\nimport { consoleSandbox, dateTimestampInSeconds, getGlobalSingleton, GLOBAL_OBJ, logger, uuid4 } from '@sentry/utils';\n\nimport { DEFAULT_ENVIRONMENT } from './constants';\nimport { Scope } from './scope';\nimport { closeSession, makeSession, updateSession } from './session';\n\n/**\n * API compatibility version of this hub.\n *\n * WARNING: This number should only be increased when the global interface\n * changes and new methods are introduced.\n *\n * @hidden\n */\nexport const API_VERSION = 4;\n\n/**\n * Default maximum number of breadcrumbs added to an event. Can be overwritten\n * with {@link Options.maxBreadcrumbs}.\n */\nconst DEFAULT_BREADCRUMBS = 100;\n\nexport interface RunWithAsyncContextOptions {\n  /** Whether to reuse an existing async context if one exists. Defaults to false. */\n  reuseExisting?: boolean;\n}\n\n/**\n * @private Private API with no semver guarantees!\n *\n * Strategy used to track async context.\n */\nexport interface AsyncContextStrategy {\n  /**\n   * Gets the current async context. Returns undefined if there is no current async context.\n   */\n  getCurrentHub: () => Hub | undefined;\n  /**\n   * Runs the supplied callback in its own async context.\n   */\n  runWithAsyncContext<T>(callback: () => T, options: RunWithAsyncContextOptions): T;\n}\n\n/**\n * A layer in the process stack.\n * @hidden\n */\nexport interface Layer {\n  client?: Client;\n  scope: Scope;\n}\n\n/**\n * An object that contains a hub and maintains a scope stack.\n * @hidden\n */\nexport interface Carrier {\n  __SENTRY__?: {\n    hub?: Hub;\n    acs?: AsyncContextStrategy;\n    /**\n     * Extra Hub properties injected by various SDKs\n     */\n    integrations?: Integration[];\n    extensions?: {\n      /** Extension methods for the hub, which are bound to the current Hub instance */\n      // eslint-disable-next-line @typescript-eslint/ban-types\n      [key: string]: Function;\n    };\n  };\n}\n\n/**\n * @inheritDoc\n */\nexport class Hub implements HubInterface {\n  /** Is a {@link Layer}[] containing the client and scope */\n  private readonly _stack: Layer[];\n\n  /** Contains the last event id of a captured event.  */\n  private _lastEventId?: string;\n\n  /**\n   * Creates a new instance of the hub, will push one {@link Layer} into the\n   * internal stack on creation.\n   *\n   * @param client bound to the hub.\n   * @param scope bound to the hub.\n   * @param version number, higher number means higher priority.\n   */\n  public constructor(client?: Client, scope: Scope = new Scope(), private readonly _version: number = API_VERSION) {\n    this._stack = [{ scope }];\n    if (client) {\n      this.bindClient(client);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public isOlderThan(version: number): boolean {\n    return this._version < version;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public bindClient(client?: Client): void {\n    const top = this.getStackTop();\n    top.client = client;\n    if (client && client.setupIntegrations) {\n      client.setupIntegrations();\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public pushScope(): Scope {\n    // We want to clone the content of prev scope\n    const scope = Scope.clone(this.getScope());\n    this.getStack().push({\n      client: this.getClient(),\n      scope,\n    });\n    return scope;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public popScope(): boolean {\n    if (this.getStack().length <= 1) return false;\n    return !!this.getStack().pop();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public withScope(callback: (scope: Scope) => void): void {\n    const scope = this.pushScope();\n    try {\n      callback(scope);\n    } finally {\n      this.popScope();\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getClient<C extends Client>(): C | undefined {\n    return this.getStackTop().client as C;\n  }\n\n  /** Returns the scope of the top stack. */\n  public getScope(): Scope {\n    return this.getStackTop().scope;\n  }\n\n  /** Returns the scope stack for domains or the process. */\n  public getStack(): Layer[] {\n    return this._stack;\n  }\n\n  /** Returns the topmost scope layer in the order domain > local > process. */\n  public getStackTop(): Layer {\n    return this._stack[this._stack.length - 1];\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public captureException(exception: unknown, hint?: EventHint): string {\n    const eventId = (this._lastEventId = hint && hint.event_id ? hint.event_id : uuid4());\n    const syntheticException = new Error('Sentry syntheticException');\n    this._withClient((client, scope) => {\n      client.captureException(\n        exception,\n        {\n          originalException: exception,\n          syntheticException,\n          ...hint,\n          event_id: eventId,\n        },\n        scope,\n      );\n    });\n    return eventId;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public captureMessage(\n    message: string,\n    // eslint-disable-next-line deprecation/deprecation\n    level?: Severity | SeverityLevel,\n    hint?: EventHint,\n  ): string {\n    const eventId = (this._lastEventId = hint && hint.event_id ? hint.event_id : uuid4());\n    const syntheticException = new Error(message);\n    this._withClient((client, scope) => {\n      client.captureMessage(\n        message,\n        level,\n        {\n          originalException: message,\n          syntheticException,\n          ...hint,\n          event_id: eventId,\n        },\n        scope,\n      );\n    });\n    return eventId;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public captureEvent(event: Event, hint?: EventHint): string {\n    const eventId = hint && hint.event_id ? hint.event_id : uuid4();\n    if (!event.type) {\n      this._lastEventId = eventId;\n    }\n\n    this._withClient((client, scope) => {\n      client.captureEvent(event, { ...hint, event_id: eventId }, scope);\n    });\n    return eventId;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public lastEventId(): string | undefined {\n    return this._lastEventId;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public addBreadcrumb(breadcrumb: Breadcrumb, hint?: BreadcrumbHint): void {\n    const { scope, client } = this.getStackTop();\n\n    if (!client) return;\n\n    const { beforeBreadcrumb = null, maxBreadcrumbs = DEFAULT_BREADCRUMBS } =\n      (client.getOptions && client.getOptions()) || {};\n\n    if (maxBreadcrumbs <= 0) return;\n\n    const timestamp = dateTimestampInSeconds();\n    const mergedBreadcrumb = { timestamp, ...breadcrumb };\n    const finalBreadcrumb = beforeBreadcrumb\n      ? (consoleSandbox(() => beforeBreadcrumb(mergedBreadcrumb, hint)) as Breadcrumb | null)\n      : mergedBreadcrumb;\n\n    if (finalBreadcrumb === null) return;\n\n    if (client.emit) {\n      client.emit('beforeAddBreadcrumb', finalBreadcrumb, hint);\n    }\n\n    scope.addBreadcrumb(finalBreadcrumb, maxBreadcrumbs);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setUser(user: User | null): void {\n    this.getScope().setUser(user);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setTags(tags: { [key: string]: Primitive }): void {\n    this.getScope().setTags(tags);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setExtras(extras: Extras): void {\n    this.getScope().setExtras(extras);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setTag(key: string, value: Primitive): void {\n    this.getScope().setTag(key, value);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setExtra(key: string, extra: Extra): void {\n    this.getScope().setExtra(key, extra);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  public setContext(name: string, context: { [key: string]: any } | null): void {\n    this.getScope().setContext(name, context);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public configureScope(callback: (scope: Scope) => void): void {\n    const { scope, client } = this.getStackTop();\n    if (client) {\n      callback(scope);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public run(callback: (hub: Hub) => void): void {\n    const oldHub = makeMain(this);\n    try {\n      callback(this);\n    } finally {\n      makeMain(oldHub);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getIntegration<T extends Integration>(integration: IntegrationClass<T>): T | null {\n    const client = this.getClient();\n    if (!client) return null;\n    try {\n      return client.getIntegration(integration);\n    } catch (_oO) {\n      __DEBUG_BUILD__ && logger.warn(`Cannot retrieve integration ${integration.id} from the current Hub`);\n      return null;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public startTransaction(context: TransactionContext, customSamplingContext?: CustomSamplingContext): Transaction {\n    const result = this._callExtensionMethod<Transaction>('startTransaction', context, customSamplingContext);\n\n    if (__DEBUG_BUILD__ && !result) {\n      // eslint-disable-next-line no-console\n      console.warn(`Tracing extension 'startTransaction' has not been added. Call 'addTracingExtensions' before calling 'init':\nSentry.addTracingExtensions();\nSentry.init({...});\n`);\n    }\n\n    return result;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public traceHeaders(): { [key: string]: string } {\n    return this._callExtensionMethod<{ [key: string]: string }>('traceHeaders');\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public captureSession(endSession: boolean = false): void {\n    // both send the update and pull the session from the scope\n    if (endSession) {\n      return this.endSession();\n    }\n\n    // only send the update\n    this._sendSessionUpdate();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public endSession(): void {\n    const layer = this.getStackTop();\n    const scope = layer.scope;\n    const session = scope.getSession();\n    if (session) {\n      closeSession(session);\n    }\n    this._sendSessionUpdate();\n\n    // the session is over; take it off of the scope\n    scope.setSession();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public startSession(context?: SessionContext): Session {\n    const { scope, client } = this.getStackTop();\n    const { release, environment = DEFAULT_ENVIRONMENT } = (client && client.getOptions()) || {};\n\n    // Will fetch userAgent if called from browser sdk\n    const { userAgent } = GLOBAL_OBJ.navigator || {};\n\n    const session = makeSession({\n      release,\n      environment,\n      user: scope.getUser(),\n      ...(userAgent && { userAgent }),\n      ...context,\n    });\n\n    // End existing session if there's one\n    const currentSession = scope.getSession && scope.getSession();\n    if (currentSession && currentSession.status === 'ok') {\n      updateSession(currentSession, { status: 'exited' });\n    }\n    this.endSession();\n\n    // Afterwards we set the new session on the scope\n    scope.setSession(session);\n\n    return session;\n  }\n\n  /**\n   * Returns if default PII should be sent to Sentry and propagated in ourgoing requests\n   * when Tracing is used.\n   */\n  public shouldSendDefaultPii(): boolean {\n    const client = this.getClient();\n    const options = client && client.getOptions();\n    return Boolean(options && options.sendDefaultPii);\n  }\n\n  /**\n   * Sends the current Session on the scope\n   */\n  private _sendSessionUpdate(): void {\n    const { scope, client } = this.getStackTop();\n\n    const session = scope.getSession();\n    if (session && client && client.captureSession) {\n      client.captureSession(session);\n    }\n  }\n\n  /**\n   * Internal helper function to call a method on the top client if it exists.\n   *\n   * @param method The method to call on the client.\n   * @param args Arguments to pass to the client function.\n   */\n  private _withClient(callback: (client: Client, scope: Scope) => void): void {\n    const { scope, client } = this.getStackTop();\n    if (client) {\n      callback(client, scope);\n    }\n  }\n\n  /**\n   * Calls global extension method and binding current instance to the function call\n   */\n  // @ts-ignore Function lacks ending return statement and return type does not include 'undefined'. ts(2366)\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private _callExtensionMethod<T>(method: string, ...args: any[]): T {\n    const carrier = getMainCarrier();\n    const sentry = carrier.__SENTRY__;\n    if (sentry && sentry.extensions && typeof sentry.extensions[method] === 'function') {\n      return sentry.extensions[method].apply(this, args);\n    }\n    __DEBUG_BUILD__ && logger.warn(`Extension method ${method} couldn't be found, doing nothing.`);\n  }\n}\n\n/**\n * Returns the global shim registry.\n *\n * FIXME: This function is problematic, because despite always returning a valid Carrier,\n * it has an optional `__SENTRY__` property, which then in turn requires us to always perform an unnecessary check\n * at the call-site. We always access the carrier through this function, so we can guarantee that `__SENTRY__` is there.\n **/\nexport function getMainCarrier(): Carrier {\n  GLOBAL_OBJ.__SENTRY__ = GLOBAL_OBJ.__SENTRY__ || {\n    extensions: {},\n    hub: undefined,\n  };\n  return GLOBAL_OBJ;\n}\n\n/**\n * Replaces the current main hub with the passed one on the global object\n *\n * @returns The old replaced hub\n */\nexport function makeMain(hub: Hub): Hub {\n  const registry = getMainCarrier();\n  const oldHub = getHubFromCarrier(registry);\n  setHubOnCarrier(registry, hub);\n  return oldHub;\n}\n\n/**\n * Returns the default hub instance.\n *\n * If a hub is already registered in the global carrier but this module\n * contains a more recent version, it replaces the registered version.\n * Otherwise, the currently registered hub will be returned.\n */\nexport function getCurrentHub(): Hub {\n  // Get main carrier (global for every environment)\n  const registry = getMainCarrier();\n\n  if (registry.__SENTRY__ && registry.__SENTRY__.acs) {\n    const hub = registry.__SENTRY__.acs.getCurrentHub();\n\n    if (hub) {\n      return hub;\n    }\n  }\n\n  // Return hub that lives on a global object\n  return getGlobalHub(registry);\n}\n\nfunction getGlobalHub(registry: Carrier = getMainCarrier()): Hub {\n  // If there's no hub, or its an old API, assign a new one\n  if (!hasHubOnCarrier(registry) || getHubFromCarrier(registry).isOlderThan(API_VERSION)) {\n    setHubOnCarrier(registry, new Hub());\n  }\n\n  // Return hub that lives on a global object\n  return getHubFromCarrier(registry);\n}\n\n/**\n * @private Private API with no semver guarantees!\n *\n * If the carrier does not contain a hub, a new hub is created with the global hub client and scope.\n */\nexport function ensureHubOnCarrier(carrier: Carrier, parent: Hub = getGlobalHub()): void {\n  // If there's no hub on current domain, or it's an old API, assign a new one\n  if (!hasHubOnCarrier(carrier) || getHubFromCarrier(carrier).isOlderThan(API_VERSION)) {\n    const globalHubTopStack = parent.getStackTop();\n    setHubOnCarrier(carrier, new Hub(globalHubTopStack.client, Scope.clone(globalHubTopStack.scope)));\n  }\n}\n\n/**\n * @private Private API with no semver guarantees!\n *\n * Sets the global async context strategy\n */\nexport function setAsyncContextStrategy(strategy: AsyncContextStrategy | undefined): void {\n  // Get main carrier (global for every environment)\n  const registry = getMainCarrier();\n  registry.__SENTRY__ = registry.__SENTRY__ || {};\n  registry.__SENTRY__.acs = strategy;\n}\n\n/**\n * Runs the supplied callback in its own async context. Async Context strategies are defined per SDK.\n *\n * @param callback The callback to run in its own async context\n * @param options Options to pass to the async context strategy\n * @returns The result of the callback\n */\nexport function runWithAsyncContext<T>(callback: () => T, options: RunWithAsyncContextOptions = {}): T {\n  const registry = getMainCarrier();\n\n  if (registry.__SENTRY__ && registry.__SENTRY__.acs) {\n    return registry.__SENTRY__.acs.runWithAsyncContext(callback, options);\n  }\n\n  // if there was no strategy, fallback to just calling the callback\n  return callback();\n}\n\n/**\n * This will tell whether a carrier has a hub on it or not\n * @param carrier object\n */\nfunction hasHubOnCarrier(carrier: Carrier): boolean {\n  return !!(carrier && carrier.__SENTRY__ && carrier.__SENTRY__.hub);\n}\n\n/**\n * This will create a new {@link Hub} and add to the passed object on\n * __SENTRY__.hub.\n * @param carrier object\n * @hidden\n */\nexport function getHubFromCarrier(carrier: Carrier): Hub {\n  return getGlobalSingleton<Hub>('hub', () => new Hub(), carrier);\n}\n\n/**\n * This will set passed {@link Hub} on the passed object's __SENTRY__.hub attribute\n * @param carrier object\n * @param hub Hub\n * @returns A boolean indicating success or failure\n */\nexport function setHubOnCarrier(carrier: Carrier, hub: Hub): boolean {\n  if (!carrier) return false;\n  const __SENTRY__ = (carrier.__SENTRY__ = carrier.__SENTRY__ || {});\n  __SENTRY__.hub = hub;\n  return true;\n}\n","import { captureException, withScope } from '@sentry/core';\nimport type { DsnLike, Event as SentryEvent, Mechanism, Scope, WrappedFunction } from '@sentry/types';\nimport {\n  addExceptionMechanism,\n  addExceptionTypeValue,\n  addNonEnumerableProperty,\n  getOriginalFunction,\n  GLOBAL_OBJ,\n  markFunctionWrapped,\n} from '@sentry/utils';\n\nexport const WINDOW = GLOBAL_OBJ as typeof GLOBAL_OBJ & Window;\n\nlet ignoreOnError: number = 0;\n\n/**\n * @hidden\n */\nexport function shouldIgnoreOnError(): boolean {\n  return ignoreOnError > 0;\n}\n\n/**\n * @hidden\n */\nexport function ignoreNextOnError(): void {\n  // onerror should trigger before setTimeout\n  ignoreOnError++;\n  setTimeout(() => {\n    ignoreOnError--;\n  });\n}\n\n/**\n * Instruments the given function and sends an event to Sentry every time the\n * function throws an exception.\n *\n * @param fn A function to wrap. It is generally safe to pass an unbound function, because the returned wrapper always\n * has a correct `this` context.\n * @returns The wrapped function.\n * @hidden\n */\nexport function wrap(\n  fn: WrappedFunction,\n  options: {\n    mechanism?: Mechanism;\n  } = {},\n  before?: WrappedFunction,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n): any {\n  // for future readers what this does is wrap a function and then create\n  // a bi-directional wrapping between them.\n  //\n  // example: wrapped = wrap(original);\n  //  original.__sentry_wrapped__ -> wrapped\n  //  wrapped.__sentry_original__ -> original\n\n  if (typeof fn !== 'function') {\n    return fn;\n  }\n\n  try {\n    // if we're dealing with a function that was previously wrapped, return\n    // the original wrapper.\n    const wrapper = fn.__sentry_wrapped__;\n    if (wrapper) {\n      return wrapper;\n    }\n\n    // We don't wanna wrap it twice\n    if (getOriginalFunction(fn)) {\n      return fn;\n    }\n  } catch (e) {\n    // Just accessing custom props in some Selenium environments\n    // can cause a \"Permission denied\" exception (see raven-js#495).\n    // Bail on wrapping and return the function as-is (defers to window.onerror).\n    return fn;\n  }\n\n  /* eslint-disable prefer-rest-params */\n  // It is important that `sentryWrapped` is not an arrow function to preserve the context of `this`\n  const sentryWrapped: WrappedFunction = function (this: unknown): void {\n    const args = Array.prototype.slice.call(arguments);\n\n    try {\n      if (before && typeof before === 'function') {\n        before.apply(this, arguments);\n      }\n\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-member-access\n      const wrappedArguments = args.map((arg: any) => wrap(arg, options));\n\n      // Attempt to invoke user-land function\n      // NOTE: If you are a Sentry user, and you are seeing this stack frame, it\n      //       means the sentry.javascript SDK caught an error invoking your application code. This\n      //       is expected behavior and NOT indicative of a bug with sentry.javascript.\n      return fn.apply(this, wrappedArguments);\n    } catch (ex) {\n      ignoreNextOnError();\n\n      withScope((scope: Scope) => {\n        scope.addEventProcessor((event: SentryEvent) => {\n          if (options.mechanism) {\n            addExceptionTypeValue(event, undefined, undefined);\n            addExceptionMechanism(event, options.mechanism);\n          }\n\n          event.extra = {\n            ...event.extra,\n            arguments: args,\n          };\n\n          return event;\n        });\n\n        captureException(ex);\n      });\n\n      throw ex;\n    }\n  };\n  /* eslint-enable prefer-rest-params */\n\n  // Accessing some objects may throw\n  // ref: https://github.com/getsentry/sentry-javascript/issues/1168\n  try {\n    for (const property in fn) {\n      if (Object.prototype.hasOwnProperty.call(fn, property)) {\n        sentryWrapped[property] = fn[property];\n      }\n    }\n  } catch (_oO) {} // eslint-disable-line no-empty\n\n  // Signal that this function has been wrapped/filled already\n  // for both debugging and to prevent it to being wrapped/filled twice\n  markFunctionWrapped(sentryWrapped, fn);\n\n  addNonEnumerableProperty(fn, '__sentry_wrapped__', sentryWrapped);\n\n  // Restore original function name (not all browsers allow that)\n  try {\n    const descriptor = Object.getOwnPropertyDescriptor(sentryWrapped, 'name') as PropertyDescriptor;\n    if (descriptor.configurable) {\n      Object.defineProperty(sentryWrapped, 'name', {\n        get(): string {\n          return fn.name;\n        },\n      });\n    }\n    // eslint-disable-next-line no-empty\n  } catch (_oO) {}\n\n  return sentryWrapped;\n}\n\n/**\n * All properties the report dialog supports\n */\nexport interface ReportDialogOptions {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  [key: string]: any;\n  eventId?: string;\n  dsn?: DsnLike;\n  user?: {\n    email?: string;\n    name?: string;\n  };\n  lang?: string;\n  title?: string;\n  subtitle?: string;\n  subtitle2?: string;\n  labelName?: string;\n  labelEmail?: string;\n  labelComments?: string;\n  labelClose?: string;\n  labelSubmit?: string;\n  errorGeneric?: string;\n  errorFormEntry?: string;\n  successMessage?: string;\n  /** Callback after reportDialog showed up */\n  onLoad?(this: void): void;\n}\n","import type {\n  Breadcrumb,\n  CaptureContext,\n  CheckIn,\n  CustomSamplingContext,\n  Event,\n  EventHint,\n  Extra,\n  Extras,\n  MonitorConfig,\n  Primitive,\n  Severity,\n  SeverityLevel,\n  TransactionContext,\n  User,\n} from '@sentry/types';\nimport { logger, uuid4 } from '@sentry/utils';\n\nimport type { Hub } from './hub';\nimport { getCurrentHub } from './hub';\nimport type { Scope } from './scope';\n\n// Note: All functions in this file are typed with a return value of `ReturnType<Hub[HUB_FUNCTION]>`,\n// where HUB_FUNCTION is some method on the Hub class.\n//\n// This is done to make sure the top level SDK methods stay in sync with the hub methods.\n// Although every method here has an explicit return type, some of them (that map to void returns) do not\n// contain `return` keywords. This is done to save on bundle size, as `return` is not minifiable.\n\n/**\n * Captures an exception event and sends it to Sentry.\n *\n * @param exception An exception-like object.\n * @param captureContext Additional scope data to apply to exception event.\n * @returns The generated eventId.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types\nexport function captureException(exception: any, captureContext?: CaptureContext): ReturnType<Hub['captureException']> {\n  return getCurrentHub().captureException(exception, { captureContext });\n}\n\n/**\n * Captures a message event and sends it to Sentry.\n *\n * @param message The message to send to Sentry.\n * @param Severity Define the level of the message.\n * @returns The generated eventId.\n */\nexport function captureMessage(\n  message: string,\n  // eslint-disable-next-line deprecation/deprecation\n  captureContext?: CaptureContext | Severity | SeverityLevel,\n): ReturnType<Hub['captureMessage']> {\n  // This is necessary to provide explicit scopes upgrade, without changing the original\n  // arity of the `captureMessage(message, level)` method.\n  const level = typeof captureContext === 'string' ? captureContext : undefined;\n  const context = typeof captureContext !== 'string' ? { captureContext } : undefined;\n  return getCurrentHub().captureMessage(message, level, context);\n}\n\n/**\n * Captures a manually created event and sends it to Sentry.\n *\n * @param event The event to send to Sentry.\n * @returns The generated eventId.\n */\nexport function captureEvent(event: Event, hint?: EventHint): ReturnType<Hub['captureEvent']> {\n  return getCurrentHub().captureEvent(event, hint);\n}\n\n/**\n * Callback to set context information onto the scope.\n * @param callback Callback function that receives Scope.\n */\nexport function configureScope(callback: (scope: Scope) => void): ReturnType<Hub['configureScope']> {\n  getCurrentHub().configureScope(callback);\n}\n\n/**\n * Records a new breadcrumb which will be attached to future events.\n *\n * Breadcrumbs will be added to subsequent events to provide more context on\n * user's actions prior to an error or crash.\n *\n * @param breadcrumb The breadcrumb to record.\n */\nexport function addBreadcrumb(breadcrumb: Breadcrumb): ReturnType<Hub['addBreadcrumb']> {\n  getCurrentHub().addBreadcrumb(breadcrumb);\n}\n\n/**\n * Sets context data with the given name.\n * @param name of the context\n * @param context Any kind of data. This data will be normalized.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function setContext(name: string, context: { [key: string]: any } | null): ReturnType<Hub['setContext']> {\n  getCurrentHub().setContext(name, context);\n}\n\n/**\n * Set an object that will be merged sent as extra data with the event.\n * @param extras Extras object to merge into current context.\n */\nexport function setExtras(extras: Extras): ReturnType<Hub['setExtras']> {\n  getCurrentHub().setExtras(extras);\n}\n\n/**\n * Set key:value that will be sent as extra data with the event.\n * @param key String of extra\n * @param extra Any kind of data. This data will be normalized.\n */\nexport function setExtra(key: string, extra: Extra): ReturnType<Hub['setExtra']> {\n  getCurrentHub().setExtra(key, extra);\n}\n\n/**\n * Set an object that will be merged sent as tags data with the event.\n * @param tags Tags context object to merge into current context.\n */\nexport function setTags(tags: { [key: string]: Primitive }): ReturnType<Hub['setTags']> {\n  getCurrentHub().setTags(tags);\n}\n\n/**\n * Set key:value that will be sent as tags data with the event.\n *\n * Can also be used to unset a tag, by passing `undefined`.\n *\n * @param key String key of tag\n * @param value Value of tag\n */\nexport function setTag(key: string, value: Primitive): ReturnType<Hub['setTag']> {\n  getCurrentHub().setTag(key, value);\n}\n\n/**\n * Updates user context information for future events.\n *\n * @param user User context object to be set in the current context. Pass `null` to unset the user.\n */\nexport function setUser(user: User | null): ReturnType<Hub['setUser']> {\n  getCurrentHub().setUser(user);\n}\n\n/**\n * Creates a new scope with and executes the given operation within.\n * The scope is automatically removed once the operation\n * finishes or throws.\n *\n * This is essentially a convenience function for:\n *\n *     pushScope();\n *     callback();\n *     popScope();\n *\n * @param callback that will be enclosed into push/popScope.\n */\nexport function withScope(callback: (scope: Scope) => void): ReturnType<Hub['withScope']> {\n  getCurrentHub().withScope(callback);\n}\n\n/**\n * Starts a new `Transaction` and returns it. This is the entry point to manual tracing instrumentation.\n *\n * A tree structure can be built by adding child spans to the transaction, and child spans to other spans. To start a\n * new child span within the transaction or any span, call the respective `.startChild()` method.\n *\n * Every child span must be finished before the transaction is finished, otherwise the unfinished spans are discarded.\n *\n * The transaction must be finished with a call to its `.finish()` method, at which point the transaction with all its\n * finished child spans will be sent to Sentry.\n *\n * NOTE: This function should only be used for *manual* instrumentation. Auto-instrumentation should call\n * `startTransaction` directly on the hub.\n *\n * @param context Properties of the new `Transaction`.\n * @param customSamplingContext Information given to the transaction sampling function (along with context-dependent\n * default values). See {@link Options.tracesSampler}.\n *\n * @returns The transaction which was just started\n */\nexport function startTransaction(\n  context: TransactionContext,\n  customSamplingContext?: CustomSamplingContext,\n): ReturnType<Hub['startTransaction']> {\n  return getCurrentHub().startTransaction({ ...context }, customSamplingContext);\n}\n\n/**\n * Create a cron monitor check in and send it to Sentry.\n *\n * @param checkIn An object that describes a check in.\n * @param upsertMonitorConfig An optional object that describes a monitor config. Use this if you want\n * to create a monitor automatically when sending a check in.\n */\nexport function captureCheckIn(checkIn: CheckIn, upsertMonitorConfig?: MonitorConfig): string {\n  const client = getCurrentHub().getClient();\n  if (!client) {\n    __DEBUG_BUILD__ && logger.warn('Cannot capture check-in. No client defined.');\n  } else if (!client.captureCheckIn) {\n    __DEBUG_BUILD__ && logger.warn('Cannot capture check-in. Client does not support sending check-ins.');\n  } else {\n    return client.captureCheckIn(checkIn, upsertMonitorConfig);\n  }\n\n  return uuid4();\n}\n","import type { Integration, WrappedFunction } from '@sentry/types';\nimport { fill, getFunctionName, getOriginalFunction } from '@sentry/utils';\n\nimport { WINDOW, wrap } from '../helpers';\n\nconst DEFAULT_EVENT_TARGET = [\n  'EventTarget',\n  'Window',\n  'Node',\n  'ApplicationCache',\n  'AudioTrackList',\n  'ChannelMergerNode',\n  'CryptoOperation',\n  'EventSource',\n  'FileReader',\n  'HTMLUnknownElement',\n  'IDBDatabase',\n  'IDBRequest',\n  'IDBTransaction',\n  'KeyOperation',\n  'MediaController',\n  'MessagePort',\n  'ModalWindow',\n  'Notification',\n  'SVGElementInstance',\n  'Screen',\n  'TextTrack',\n  'TextTrackCue',\n  'TextTrackList',\n  'WebSocket',\n  'WebSocketWorker',\n  'Worker',\n  'XMLHttpRequest',\n  'XMLHttpRequestEventTarget',\n  'XMLHttpRequestUpload',\n];\n\ntype XMLHttpRequestProp = 'onload' | 'onerror' | 'onprogress' | 'onreadystatechange';\n\n/** JSDoc */\ninterface TryCatchOptions {\n  setTimeout: boolean;\n  setInterval: boolean;\n  requestAnimationFrame: boolean;\n  XMLHttpRequest: boolean;\n  eventTarget: boolean | string[];\n}\n\n/** Wrap timer functions and event targets to catch errors and provide better meta data */\nexport class TryCatch implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'TryCatch';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = TryCatch.id;\n\n  /** JSDoc */\n  private readonly _options: TryCatchOptions;\n\n  /**\n   * @inheritDoc\n   */\n  public constructor(options?: Partial<TryCatchOptions>) {\n    this._options = {\n      XMLHttpRequest: true,\n      eventTarget: true,\n      requestAnimationFrame: true,\n      setInterval: true,\n      setTimeout: true,\n      ...options,\n    };\n  }\n\n  /**\n   * Wrap timer functions and event targets to catch errors\n   * and provide better metadata.\n   */\n  public setupOnce(): void {\n    if (this._options.setTimeout) {\n      fill(WINDOW, 'setTimeout', _wrapTimeFunction);\n    }\n\n    if (this._options.setInterval) {\n      fill(WINDOW, 'setInterval', _wrapTimeFunction);\n    }\n\n    if (this._options.requestAnimationFrame) {\n      fill(WINDOW, 'requestAnimationFrame', _wrapRAF);\n    }\n\n    if (this._options.XMLHttpRequest && 'XMLHttpRequest' in WINDOW) {\n      fill(XMLHttpRequest.prototype, 'send', _wrapXHR);\n    }\n\n    const eventTargetOption = this._options.eventTarget;\n    if (eventTargetOption) {\n      const eventTarget = Array.isArray(eventTargetOption) ? eventTargetOption : DEFAULT_EVENT_TARGET;\n      eventTarget.forEach(_wrapEventTarget);\n    }\n  }\n}\n\n/** JSDoc */\nfunction _wrapTimeFunction(original: () => void): () => number {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  return function (this: any, ...args: any[]): number {\n    const originalCallback = args[0];\n    args[0] = wrap(originalCallback, {\n      mechanism: {\n        data: { function: getFunctionName(original) },\n        handled: true,\n        type: 'instrument',\n      },\n    });\n    return original.apply(this, args);\n  };\n}\n\n/** JSDoc */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _wrapRAF(original: any): (callback: () => void) => any {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  return function (this: any, callback: () => void): () => void {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    return original.apply(this, [\n      wrap(callback, {\n        mechanism: {\n          data: {\n            function: 'requestAnimationFrame',\n            handler: getFunctionName(original),\n          },\n          handled: true,\n          type: 'instrument',\n        },\n      }),\n    ]);\n  };\n}\n\n/** JSDoc */\nfunction _wrapXHR(originalSend: () => void): () => void {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  return function (this: XMLHttpRequest, ...args: any[]): void {\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    const xhr = this;\n    const xmlHttpRequestProps: XMLHttpRequestProp[] = ['onload', 'onerror', 'onprogress', 'onreadystatechange'];\n\n    xmlHttpRequestProps.forEach(prop => {\n      if (prop in xhr && typeof xhr[prop] === 'function') {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        fill(xhr, prop, function (original: WrappedFunction): () => any {\n          const wrapOptions = {\n            mechanism: {\n              data: {\n                function: prop,\n                handler: getFunctionName(original),\n              },\n              handled: true,\n              type: 'instrument',\n            },\n          };\n\n          // If Instrument integration has been called before TryCatch, get the name of original function\n          const originalFunction = getOriginalFunction(original);\n          if (originalFunction) {\n            wrapOptions.mechanism.data.handler = getFunctionName(originalFunction);\n          }\n\n          // Otherwise wrap directly\n          return wrap(original, wrapOptions);\n        });\n      }\n    });\n\n    return originalSend.apply(this, args);\n  };\n}\n\n/** JSDoc */\nfunction _wrapEventTarget(target: string): void {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const globalObject = WINDOW as { [key: string]: any };\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n  const proto = globalObject[target] && globalObject[target].prototype;\n\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, no-prototype-builtins\n  if (!proto || !proto.hasOwnProperty || !proto.hasOwnProperty('addEventListener')) {\n    return;\n  }\n\n  fill(proto, 'addEventListener', function (original: () => void): (\n    eventName: string,\n    fn: EventListenerObject,\n    options?: boolean | AddEventListenerOptions,\n  ) => void {\n    return function (\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      this: any,\n      eventName: string,\n      fn: EventListenerObject,\n      options?: boolean | AddEventListenerOptions,\n    ): (eventName: string, fn: EventListenerObject, capture?: boolean, secure?: boolean) => void {\n      try {\n        if (typeof fn.handleEvent === 'function') {\n          // ESlint disable explanation:\n          //  First, it is generally safe to call `wrap` with an unbound function. Furthermore, using `.bind()` would\n          //  introduce a bug here, because bind returns a new function that doesn't have our\n          //  flags(like __sentry_original__) attached. `wrap` checks for those flags to avoid unnecessary wrapping.\n          //  Without those flags, every call to addEventListener wraps the function again, causing a memory leak.\n          // eslint-disable-next-line @typescript-eslint/unbound-method\n          fn.handleEvent = wrap(fn.handleEvent, {\n            mechanism: {\n              data: {\n                function: 'handleEvent',\n                handler: getFunctionName(fn),\n                target,\n              },\n              handled: true,\n              type: 'instrument',\n            },\n          });\n        }\n      } catch (err) {\n        // can sometimes get 'Permission denied to access property \"handle Event'\n      }\n\n      return original.apply(this, [\n        eventName,\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        wrap(fn as any as WrappedFunction, {\n          mechanism: {\n            data: {\n              function: 'addEventListener',\n              handler: getFunctionName(fn),\n              target,\n            },\n            handled: true,\n            type: 'instrument',\n          },\n        }),\n        options,\n      ]);\n    };\n  });\n\n  fill(\n    proto,\n    'removeEventListener',\n    function (\n      originalRemoveEventListener: () => void,\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    ): (this: any, eventName: string, fn: EventListenerObject, options?: boolean | EventListenerOptions) => () => void {\n      return function (\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        this: any,\n        eventName: string,\n        fn: EventListenerObject,\n        options?: boolean | EventListenerOptions,\n      ): () => void {\n        /**\n         * There are 2 possible scenarios here:\n         *\n         * 1. Someone passes a callback, which was attached prior to Sentry initialization, or by using unmodified\n         * method, eg. `document.addEventListener.call(el, name, handler). In this case, we treat this function\n         * as a pass-through, and call original `removeEventListener` with it.\n         *\n         * 2. Someone passes a callback, which was attached after Sentry was initialized, which means that it was using\n         * our wrapped version of `addEventListener`, which internally calls `wrap` helper.\n         * This helper \"wraps\" whole callback inside a try/catch statement, and attached appropriate metadata to it,\n         * in order for us to make a distinction between wrapped/non-wrapped functions possible.\n         * If a function was wrapped, it has additional property of `__sentry_wrapped__`, holding the handler.\n         *\n         * When someone adds a handler prior to initialization, and then do it again, but after,\n         * then we have to detach both of them. Otherwise, if we'd detach only wrapped one, it'd be impossible\n         * to get rid of the initial handler and it'd stick there forever.\n         */\n        const wrappedEventHandler = fn as unknown as WrappedFunction;\n        try {\n          const originalEventHandler = wrappedEventHandler && wrappedEventHandler.__sentry_wrapped__;\n          if (originalEventHandler) {\n            originalRemoveEventListener.call(this, eventName, originalEventHandler, options);\n          }\n        } catch (e) {\n          // ignore, accessing __sentry_wrapped__ will throw in some Selenium environments\n        }\n        return originalRemoveEventListener.call(this, eventName, wrappedEventHandler, options);\n      };\n    },\n  );\n}\n","import { logger } from './logger';\nimport { getGlobalObject } from './worldwide';\n\n// eslint-disable-next-line deprecation/deprecation\nconst WINDOW = getGlobalObject<Window>();\n\nexport { supportsHistory } from './vendor/supportsHistory';\n\n/**\n * Tells whether current environment supports ErrorEvent objects\n * {@link supportsErrorEvent}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsErrorEvent(): boolean {\n  try {\n    new ErrorEvent('');\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * Tells whether current environment supports DOMError objects\n * {@link supportsDOMError}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsDOMError(): boolean {\n  try {\n    // Chrome: VM89:1 Uncaught TypeError: Failed to construct 'DOMError':\n    // 1 argument required, but only 0 present.\n    // @ts-ignore It really needs 1 argument, not 0.\n    new DOMError('');\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * Tells whether current environment supports DOMException objects\n * {@link supportsDOMException}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsDOMException(): boolean {\n  try {\n    new DOMException('');\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * Tells whether current environment supports Fetch API\n * {@link supportsFetch}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsFetch(): boolean {\n  if (!('fetch' in WINDOW)) {\n    return false;\n  }\n\n  try {\n    new Headers();\n    new Request('http://www.example.com');\n    new Response();\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n/**\n * isNativeFetch checks if the given function is a native implementation of fetch()\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function isNativeFetch(func: Function): boolean {\n  return func && /^function fetch\\(\\)\\s+\\{\\s+\\[native code\\]\\s+\\}$/.test(func.toString());\n}\n\n/**\n * Tells whether current environment supports Fetch API natively\n * {@link supportsNativeFetch}.\n *\n * @returns true if `window.fetch` is natively implemented, false otherwise\n */\nexport function supportsNativeFetch(): boolean {\n  if (!supportsFetch()) {\n    return false;\n  }\n\n  // Fast path to avoid DOM I/O\n  // eslint-disable-next-line @typescript-eslint/unbound-method\n  if (isNativeFetch(WINDOW.fetch)) {\n    return true;\n  }\n\n  // window.fetch is implemented, but is polyfilled or already wrapped (e.g: by a chrome extension)\n  // so create a \"pure\" iframe to see if that has native fetch\n  let result = false;\n  const doc = WINDOW.document;\n  // eslint-disable-next-line deprecation/deprecation\n  if (doc && typeof (doc.createElement as unknown) === 'function') {\n    try {\n      const sandbox = doc.createElement('iframe');\n      sandbox.hidden = true;\n      doc.head.appendChild(sandbox);\n      if (sandbox.contentWindow && sandbox.contentWindow.fetch) {\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        result = isNativeFetch(sandbox.contentWindow.fetch);\n      }\n      doc.head.removeChild(sandbox);\n    } catch (err) {\n      __DEBUG_BUILD__ &&\n        logger.warn('Could not create sandbox iframe for pure fetch check, bailing to window.fetch: ', err);\n    }\n  }\n\n  return result;\n}\n\n/**\n * Tells whether current environment supports ReportingObserver API\n * {@link supportsReportingObserver}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsReportingObserver(): boolean {\n  return 'ReportingObserver' in WINDOW;\n}\n\n/**\n * Tells whether current environment supports Referrer Policy API\n * {@link supportsReferrerPolicy}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsReferrerPolicy(): boolean {\n  // Despite all stars in the sky saying that Edge supports old draft syntax, aka 'never', 'always', 'origin' and 'default'\n  // (see https://caniuse.com/#feat=referrer-policy),\n  // it doesn't. And it throws an exception instead of ignoring this parameter...\n  // REF: https://github.com/getsentry/raven-js/issues/1233\n\n  if (!supportsFetch()) {\n    return false;\n  }\n\n  try {\n    new Request('_', {\n      referrerPolicy: 'origin' as ReferrerPolicy,\n    });\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n","// Based on https://github.com/angular/angular.js/pull/13945/files\n// The MIT License\n\n// Copyright (c) 2010-2016 Google, Inc. http://angularjs.org\n\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport { getGlobalObject } from '../worldwide';\n\n// eslint-disable-next-line deprecation/deprecation\nconst WINDOW = getGlobalObject<Window>();\n\n/**\n * Tells whether current environment supports History API\n * {@link supportsHistory}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsHistory(): boolean {\n  // NOTE: in Chrome App environment, touching history.pushState, *even inside\n  //       a try/catch block*, will cause Chrome to output an error to console.error\n  // borrowed from: https://github.com/angular/angular.js/pull/13945/files\n  /* eslint-disable @typescript-eslint/no-unsafe-member-access */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const chrome = (WINDOW as any).chrome;\n  const isChromePackagedApp = chrome && chrome.app && chrome.app.runtime;\n  /* eslint-enable @typescript-eslint/no-unsafe-member-access */\n  const hasHistoryApi = 'history' in WINDOW && !!WINDOW.history.pushState && !!WINDOW.history.replaceState;\n\n  return !isChromePackagedApp && hasHistoryApi;\n}\n","/* eslint-disable max-lines */\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/ban-types */\nimport type {\n  HandlerDataFetch,\n  HandlerDataXhr,\n  SentryWrappedXMLHttpRequest,\n  SentryXhrData,\n  WrappedFunction,\n} from '@sentry/types';\n\nimport { isString } from './is';\nimport { CONSOLE_LEVELS, logger } from './logger';\nimport { fill } from './object';\nimport { getFunctionName } from './stacktrace';\nimport { supportsHistory, supportsNativeFetch } from './supports';\nimport { getGlobalObject } from './worldwide';\n\n// eslint-disable-next-line deprecation/deprecation\nconst WINDOW = getGlobalObject<Window>();\n\nexport const SENTRY_XHR_DATA_KEY = '__sentry_xhr_v2__';\n\nexport type InstrumentHandlerType =\n  | 'console'\n  | 'dom'\n  | 'fetch'\n  | 'history'\n  | 'sentry'\n  | 'xhr'\n  | 'error'\n  | 'unhandledrejection';\nexport type InstrumentHandlerCallback = (data: any) => void;\n\n/**\n * Instrument native APIs to call handlers that can be used to create breadcrumbs, APM spans etc.\n *  - Console API\n *  - Fetch API\n *  - XHR API\n *  - History API\n *  - DOM API (click/typing)\n *  - Error API\n *  - UnhandledRejection API\n */\n\nconst handlers: { [key in InstrumentHandlerType]?: InstrumentHandlerCallback[] } = {};\nconst instrumented: { [key in InstrumentHandlerType]?: boolean } = {};\n\n/** Instruments given API */\nfunction instrument(type: InstrumentHandlerType): void {\n  if (instrumented[type]) {\n    return;\n  }\n\n  instrumented[type] = true;\n\n  switch (type) {\n    case 'console':\n      instrumentConsole();\n      break;\n    case 'dom':\n      instrumentDOM();\n      break;\n    case 'xhr':\n      instrumentXHR();\n      break;\n    case 'fetch':\n      instrumentFetch();\n      break;\n    case 'history':\n      instrumentHistory();\n      break;\n    case 'error':\n      instrumentError();\n      break;\n    case 'unhandledrejection':\n      instrumentUnhandledRejection();\n      break;\n    default:\n      __DEBUG_BUILD__ && logger.warn('unknown instrumentation type:', type);\n      return;\n  }\n}\n\n/**\n * Add handler that will be called when given type of instrumentation triggers.\n * Use at your own risk, this might break without changelog notice, only used internally.\n * @hidden\n */\nexport function addInstrumentationHandler(type: InstrumentHandlerType, callback: InstrumentHandlerCallback): void {\n  handlers[type] = handlers[type] || [];\n  (handlers[type] as InstrumentHandlerCallback[]).push(callback);\n  instrument(type);\n}\n\n/** JSDoc */\nfunction triggerHandlers(type: InstrumentHandlerType, data: any): void {\n  if (!type || !handlers[type]) {\n    return;\n  }\n\n  for (const handler of handlers[type] || []) {\n    try {\n      handler(data);\n    } catch (e) {\n      __DEBUG_BUILD__ &&\n        logger.error(\n          `Error while triggering instrumentation handler.\\nType: ${type}\\nName: ${getFunctionName(handler)}\\nError:`,\n          e,\n        );\n    }\n  }\n}\n\n/** JSDoc */\nfunction instrumentConsole(): void {\n  if (!('console' in WINDOW)) {\n    return;\n  }\n\n  CONSOLE_LEVELS.forEach(function (level: string): void {\n    if (!(level in WINDOW.console)) {\n      return;\n    }\n\n    fill(WINDOW.console, level, function (originalConsoleMethod: () => any): Function {\n      return function (...args: any[]): void {\n        triggerHandlers('console', { args, level });\n\n        // this fails for some browsers. :(\n        if (originalConsoleMethod) {\n          originalConsoleMethod.apply(WINDOW.console, args);\n        }\n      };\n    });\n  });\n}\n\n/** JSDoc */\nfunction instrumentFetch(): void {\n  if (!supportsNativeFetch()) {\n    return;\n  }\n\n  fill(WINDOW, 'fetch', function (originalFetch: () => void): () => void {\n    return function (...args: any[]): void {\n      const { method, url } = parseFetchArgs(args);\n\n      const handlerData: HandlerDataFetch = {\n        args,\n        fetchData: {\n          method,\n          url,\n        },\n        startTimestamp: Date.now(),\n      };\n\n      triggerHandlers('fetch', {\n        ...handlerData,\n      });\n\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      return originalFetch.apply(WINDOW, args).then(\n        (response: Response) => {\n          triggerHandlers('fetch', {\n            ...handlerData,\n            endTimestamp: Date.now(),\n            response,\n          });\n          return response;\n        },\n        (error: Error) => {\n          triggerHandlers('fetch', {\n            ...handlerData,\n            endTimestamp: Date.now(),\n            error,\n          });\n          // NOTE: If you are a Sentry user, and you are seeing this stack frame,\n          //       it means the sentry.javascript SDK caught an error invoking your application code.\n          //       This is expected behavior and NOT indicative of a bug with sentry.javascript.\n          throw error;\n        },\n      );\n    };\n  });\n}\n\nfunction hasProp<T extends string>(obj: unknown, prop: T): obj is Record<string, string> {\n  return !!obj && typeof obj === 'object' && !!(obj as Record<string, string>)[prop];\n}\n\ntype FetchResource = string | { toString(): string } | { url: string };\n\nfunction getUrlFromResource(resource: FetchResource): string {\n  if (typeof resource === 'string') {\n    return resource;\n  }\n\n  if (!resource) {\n    return '';\n  }\n\n  if (hasProp(resource, 'url')) {\n    return resource.url;\n  }\n\n  if (resource.toString) {\n    return resource.toString();\n  }\n\n  return '';\n}\n\n/**\n * Parses the fetch arguments to find the used Http method and the url of the request\n */\nexport function parseFetchArgs(fetchArgs: unknown[]): { method: string; url: string } {\n  if (fetchArgs.length === 0) {\n    return { method: 'GET', url: '' };\n  }\n\n  if (fetchArgs.length === 2) {\n    const [url, options] = fetchArgs as [FetchResource, object];\n\n    return {\n      url: getUrlFromResource(url),\n      method: hasProp(options, 'method') ? String(options.method).toUpperCase() : 'GET',\n    };\n  }\n\n  const arg = fetchArgs[0];\n  return {\n    url: getUrlFromResource(arg as FetchResource),\n    method: hasProp(arg, 'method') ? String(arg.method).toUpperCase() : 'GET',\n  };\n}\n\n/** JSDoc */\nfunction instrumentXHR(): void {\n  if (!('XMLHttpRequest' in WINDOW)) {\n    return;\n  }\n\n  const xhrproto = XMLHttpRequest.prototype;\n\n  fill(xhrproto, 'open', function (originalOpen: () => void): () => void {\n    return function (this: XMLHttpRequest & SentryWrappedXMLHttpRequest, ...args: any[]): void {\n      const url = args[1];\n      const xhrInfo: SentryXhrData = (this[SENTRY_XHR_DATA_KEY] = {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        method: isString(args[0]) ? args[0].toUpperCase() : args[0],\n        url: args[1],\n        request_headers: {},\n      });\n\n      // if Sentry key appears in URL, don't capture it as a request\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      if (isString(url) && xhrInfo.method === 'POST' && url.match(/sentry_key/)) {\n        this.__sentry_own_request__ = true;\n      }\n\n      const onreadystatechangeHandler: () => void = () => {\n        // For whatever reason, this is not the same instance here as from the outer method\n        const xhrInfo = this[SENTRY_XHR_DATA_KEY];\n\n        if (!xhrInfo) {\n          return;\n        }\n\n        if (this.readyState === 4) {\n          try {\n            // touching statusCode in some platforms throws\n            // an exception\n            xhrInfo.status_code = this.status;\n          } catch (e) {\n            /* do nothing */\n          }\n\n          triggerHandlers('xhr', {\n            args: args as [string, string],\n            endTimestamp: Date.now(),\n            startTimestamp: Date.now(),\n            xhr: this,\n          } as HandlerDataXhr);\n        }\n      };\n\n      if ('onreadystatechange' in this && typeof this.onreadystatechange === 'function') {\n        fill(this, 'onreadystatechange', function (original: WrappedFunction): Function {\n          return function (this: SentryWrappedXMLHttpRequest, ...readyStateArgs: any[]): void {\n            onreadystatechangeHandler();\n            return original.apply(this, readyStateArgs);\n          };\n        });\n      } else {\n        this.addEventListener('readystatechange', onreadystatechangeHandler);\n      }\n\n      // Intercepting `setRequestHeader` to access the request headers of XHR instance.\n      // This will only work for user/library defined headers, not for the default/browser-assigned headers.\n      // Request cookies are also unavailable for XHR, as `Cookie` header can't be defined by `setRequestHeader`.\n      fill(this, 'setRequestHeader', function (original: WrappedFunction): Function {\n        return function (this: SentryWrappedXMLHttpRequest, ...setRequestHeaderArgs: unknown[]): void {\n          const [header, value] = setRequestHeaderArgs as [string, string];\n\n          const xhrInfo = this[SENTRY_XHR_DATA_KEY];\n\n          if (xhrInfo) {\n            xhrInfo.request_headers[header.toLowerCase()] = value;\n          }\n\n          return original.apply(this, setRequestHeaderArgs);\n        };\n      });\n\n      return originalOpen.apply(this, args);\n    };\n  });\n\n  fill(xhrproto, 'send', function (originalSend: () => void): () => void {\n    return function (this: XMLHttpRequest & SentryWrappedXMLHttpRequest, ...args: any[]): void {\n      const sentryXhrData = this[SENTRY_XHR_DATA_KEY];\n      if (sentryXhrData && args[0] !== undefined) {\n        sentryXhrData.body = args[0];\n      }\n\n      triggerHandlers('xhr', {\n        args,\n        startTimestamp: Date.now(),\n        xhr: this,\n      });\n\n      return originalSend.apply(this, args);\n    };\n  });\n}\n\nlet lastHref: string;\n\n/** JSDoc */\nfunction instrumentHistory(): void {\n  if (!supportsHistory()) {\n    return;\n  }\n\n  const oldOnPopState = WINDOW.onpopstate;\n  WINDOW.onpopstate = function (this: WindowEventHandlers, ...args: any[]): any {\n    const to = WINDOW.location.href;\n    // keep track of the current URL state, as we always receive only the updated state\n    const from = lastHref;\n    lastHref = to;\n    triggerHandlers('history', {\n      from,\n      to,\n    });\n    if (oldOnPopState) {\n      // Apparently this can throw in Firefox when incorrectly implemented plugin is installed.\n      // https://github.com/getsentry/sentry-javascript/issues/3344\n      // https://github.com/bugsnag/bugsnag-js/issues/469\n      try {\n        return oldOnPopState.apply(this, args);\n      } catch (_oO) {\n        // no-empty\n      }\n    }\n  };\n\n  /** @hidden */\n  function historyReplacementFunction(originalHistoryFunction: () => void): () => void {\n    return function (this: History, ...args: any[]): void {\n      const url = args.length > 2 ? args[2] : undefined;\n      if (url) {\n        // coerce to string (this is what pushState does)\n        const from = lastHref;\n        const to = String(url);\n        // keep track of the current URL state, as we always receive only the updated state\n        lastHref = to;\n        triggerHandlers('history', {\n          from,\n          to,\n        });\n      }\n      return originalHistoryFunction.apply(this, args);\n    };\n  }\n\n  fill(WINDOW.history, 'pushState', historyReplacementFunction);\n  fill(WINDOW.history, 'replaceState', historyReplacementFunction);\n}\n\nconst debounceDuration = 1000;\nlet debounceTimerID: number | undefined;\nlet lastCapturedEvent: Event | undefined;\n\n/**\n * Decide whether the current event should finish the debounce of previously captured one.\n * @param previous previously captured event\n * @param current event to be captured\n */\nfunction shouldShortcircuitPreviousDebounce(previous: Event | undefined, current: Event): boolean {\n  // If there was no previous event, it should always be swapped for the new one.\n  if (!previous) {\n    return true;\n  }\n\n  // If both events have different type, then user definitely performed two separate actions. e.g. click + keypress.\n  if (previous.type !== current.type) {\n    return true;\n  }\n\n  try {\n    // If both events have the same type, it's still possible that actions were performed on different targets.\n    // e.g. 2 clicks on different buttons.\n    if (previous.target !== current.target) {\n      return true;\n    }\n  } catch (e) {\n    // just accessing `target` property can throw an exception in some rare circumstances\n    // see: https://github.com/getsentry/sentry-javascript/issues/838\n  }\n\n  // If both events have the same type _and_ same `target` (an element which triggered an event, _not necessarily_\n  // to which an event listener was attached), we treat them as the same action, as we want to capture\n  // only one breadcrumb. e.g. multiple clicks on the same button, or typing inside a user input box.\n  return false;\n}\n\n/**\n * Decide whether an event should be captured.\n * @param event event to be captured\n */\nfunction shouldSkipDOMEvent(event: Event): boolean {\n  // We are only interested in filtering `keypress` events for now.\n  if (event.type !== 'keypress') {\n    return false;\n  }\n\n  try {\n    const target = event.target as HTMLElement;\n\n    if (!target || !target.tagName) {\n      return true;\n    }\n\n    // Only consider keypress events on actual input elements. This will disregard keypresses targeting body\n    // e.g.tabbing through elements, hotkeys, etc.\n    if (target.tagName === 'INPUT' || target.tagName === 'TEXTAREA' || target.isContentEditable) {\n      return false;\n    }\n  } catch (e) {\n    // just accessing `target` property can throw an exception in some rare circumstances\n    // see: https://github.com/getsentry/sentry-javascript/issues/838\n  }\n\n  return true;\n}\n\n/**\n * Wraps addEventListener to capture UI breadcrumbs\n * @param handler function that will be triggered\n * @param globalListener indicates whether event was captured by the global event listener\n * @returns wrapped breadcrumb events handler\n * @hidden\n */\nfunction makeDOMEventHandler(handler: Function, globalListener: boolean = false): (event: Event) => void {\n  return (event: Event): void => {\n    // It's possible this handler might trigger multiple times for the same\n    // event (e.g. event propagation through node ancestors).\n    // Ignore if we've already captured that event.\n    if (!event || lastCapturedEvent === event) {\n      return;\n    }\n\n    // We always want to skip _some_ events.\n    if (shouldSkipDOMEvent(event)) {\n      return;\n    }\n\n    const name = event.type === 'keypress' ? 'input' : event.type;\n\n    // If there is no debounce timer, it means that we can safely capture the new event and store it for future comparisons.\n    if (debounceTimerID === undefined) {\n      handler({\n        event: event,\n        name,\n        global: globalListener,\n      });\n      lastCapturedEvent = event;\n    }\n    // If there is a debounce awaiting, see if the new event is different enough to treat it as a unique one.\n    // If that's the case, emit the previous event and store locally the newly-captured DOM event.\n    else if (shouldShortcircuitPreviousDebounce(lastCapturedEvent, event)) {\n      handler({\n        event: event,\n        name,\n        global: globalListener,\n      });\n      lastCapturedEvent = event;\n    }\n\n    // Start a new debounce timer that will prevent us from capturing multiple events that should be grouped together.\n    clearTimeout(debounceTimerID);\n    debounceTimerID = WINDOW.setTimeout(() => {\n      debounceTimerID = undefined;\n    }, debounceDuration);\n  };\n}\n\ntype AddEventListener = (\n  type: string,\n  listener: EventListenerOrEventListenerObject,\n  options?: boolean | AddEventListenerOptions,\n) => void;\ntype RemoveEventListener = (\n  type: string,\n  listener: EventListenerOrEventListenerObject,\n  options?: boolean | EventListenerOptions,\n) => void;\n\ntype InstrumentedElement = Element & {\n  __sentry_instrumentation_handlers__?: {\n    [key in 'click' | 'keypress']?: {\n      handler?: Function;\n      /** The number of custom listeners attached to this element */\n      refCount: number;\n    };\n  };\n};\n\n/** JSDoc */\nfunction instrumentDOM(): void {\n  if (!('document' in WINDOW)) {\n    return;\n  }\n\n  // Make it so that any click or keypress that is unhandled / bubbled up all the way to the document triggers our dom\n  // handlers. (Normally we have only one, which captures a breadcrumb for each click or keypress.) Do this before\n  // we instrument `addEventListener` so that we don't end up attaching this handler twice.\n  const triggerDOMHandler = triggerHandlers.bind(null, 'dom');\n  const globalDOMEventHandler = makeDOMEventHandler(triggerDOMHandler, true);\n  WINDOW.document.addEventListener('click', globalDOMEventHandler, false);\n  WINDOW.document.addEventListener('keypress', globalDOMEventHandler, false);\n\n  // After hooking into click and keypress events bubbled up to `document`, we also hook into user-handled\n  // clicks & keypresses, by adding an event listener of our own to any element to which they add a listener. That\n  // way, whenever one of their handlers is triggered, ours will be, too. (This is needed because their handler\n  // could potentially prevent the event from bubbling up to our global listeners. This way, our handler are still\n  // guaranteed to fire at least once.)\n  ['EventTarget', 'Node'].forEach((target: string) => {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    const proto = (WINDOW as any)[target] && (WINDOW as any)[target].prototype;\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, no-prototype-builtins\n    if (!proto || !proto.hasOwnProperty || !proto.hasOwnProperty('addEventListener')) {\n      return;\n    }\n\n    fill(proto, 'addEventListener', function (originalAddEventListener: AddEventListener): AddEventListener {\n      return function (\n        this: Element,\n        type: string,\n        listener: EventListenerOrEventListenerObject,\n        options?: boolean | AddEventListenerOptions,\n      ): AddEventListener {\n        if (type === 'click' || type == 'keypress') {\n          try {\n            const el = this as InstrumentedElement;\n            const handlers = (el.__sentry_instrumentation_handlers__ = el.__sentry_instrumentation_handlers__ || {});\n            const handlerForType = (handlers[type] = handlers[type] || { refCount: 0 });\n\n            if (!handlerForType.handler) {\n              const handler = makeDOMEventHandler(triggerDOMHandler);\n              handlerForType.handler = handler;\n              originalAddEventListener.call(this, type, handler, options);\n            }\n\n            handlerForType.refCount++;\n          } catch (e) {\n            // Accessing dom properties is always fragile.\n            // Also allows us to skip `addEventListenrs` calls with no proper `this` context.\n          }\n        }\n\n        return originalAddEventListener.call(this, type, listener, options);\n      };\n    });\n\n    fill(\n      proto,\n      'removeEventListener',\n      function (originalRemoveEventListener: RemoveEventListener): RemoveEventListener {\n        return function (\n          this: Element,\n          type: string,\n          listener: EventListenerOrEventListenerObject,\n          options?: boolean | EventListenerOptions,\n        ): () => void {\n          if (type === 'click' || type == 'keypress') {\n            try {\n              const el = this as InstrumentedElement;\n              const handlers = el.__sentry_instrumentation_handlers__ || {};\n              const handlerForType = handlers[type];\n\n              if (handlerForType) {\n                handlerForType.refCount--;\n                // If there are no longer any custom handlers of the current type on this element, we can remove ours, too.\n                if (handlerForType.refCount <= 0) {\n                  originalRemoveEventListener.call(this, type, handlerForType.handler, options);\n                  handlerForType.handler = undefined;\n                  delete handlers[type]; // eslint-disable-line @typescript-eslint/no-dynamic-delete\n                }\n\n                // If there are no longer any custom handlers of any type on this element, cleanup everything.\n                if (Object.keys(handlers).length === 0) {\n                  delete el.__sentry_instrumentation_handlers__;\n                }\n              }\n            } catch (e) {\n              // Accessing dom properties is always fragile.\n              // Also allows us to skip `addEventListenrs` calls with no proper `this` context.\n            }\n          }\n\n          return originalRemoveEventListener.call(this, type, listener, options);\n        };\n      },\n    );\n  });\n}\n\nlet _oldOnErrorHandler: (typeof WINDOW)['onerror'] | null = null;\n/** JSDoc */\nfunction instrumentError(): void {\n  _oldOnErrorHandler = WINDOW.onerror;\n\n  WINDOW.onerror = function (msg: unknown, url: unknown, line: unknown, column: unknown, error: unknown): boolean {\n    triggerHandlers('error', {\n      column,\n      error,\n      line,\n      msg,\n      url,\n    });\n\n    if (_oldOnErrorHandler && !_oldOnErrorHandler.__SENTRY_LOADER__) {\n      // eslint-disable-next-line prefer-rest-params\n      return _oldOnErrorHandler.apply(this, arguments);\n    }\n\n    return false;\n  };\n\n  WINDOW.onerror.__SENTRY_INSTRUMENTED__ = true;\n}\n\nlet _oldOnUnhandledRejectionHandler: (typeof WINDOW)['onunhandledrejection'] | null = null;\n/** JSDoc */\nfunction instrumentUnhandledRejection(): void {\n  _oldOnUnhandledRejectionHandler = WINDOW.onunhandledrejection;\n\n  WINDOW.onunhandledrejection = function (e: any): boolean {\n    triggerHandlers('unhandledrejection', e);\n\n    if (_oldOnUnhandledRejectionHandler && !_oldOnUnhandledRejectionHandler.__SENTRY_LOADER__) {\n      // eslint-disable-next-line prefer-rest-params\n      return _oldOnUnhandledRejectionHandler.apply(this, arguments);\n    }\n\n    return true;\n  };\n\n  WINDOW.onunhandledrejection.__SENTRY_INSTRUMENTED__ = true;\n}\n","import type { Primitive } from '@sentry/types';\n\nimport { isNaN, isSyntheticEvent } from './is';\nimport type { MemoFunc } from './memo';\nimport { memoBuilder } from './memo';\nimport { convertToPlainObject } from './object';\nimport { getFunctionName } from './stacktrace';\n\ntype Prototype = { constructor: (...args: unknown[]) => unknown };\n// This is a hack to placate TS, relying on the fact that technically, arrays are objects with integer keys. Normally we\n// think of those keys as actual numbers, but `arr['0']` turns out to work just as well as `arr[0]`, and doing it this\n// way lets us use a single type in the places where behave as if we are only dealing with objects, even if some of them\n// might be arrays.\ntype ObjOrArray<T> = { [key: string]: T };\n\n/**\n * Recursively normalizes the given object.\n *\n * - Creates a copy to prevent original input mutation\n * - Skips non-enumerable properties\n * - When stringifying, calls `toJSON` if implemented\n * - Removes circular references\n * - Translates non-serializable values (`undefined`/`NaN`/functions) to serializable format\n * - Translates known global objects/classes to a string representations\n * - Takes care of `Error` object serialization\n * - Optionally limits depth of final output\n * - Optionally limits number of properties/elements included in any single object/array\n *\n * @param input The object to be normalized.\n * @param depth The max depth to which to normalize the object. (Anything deeper stringified whole.)\n * @param maxProperties The max number of elements or properties to be included in any single array or\n * object in the normallized output.\n * @returns A normalized version of the object, or `\"**non-serializable**\"` if any errors are thrown during normalization.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function normalize(input: unknown, depth: number = 100, maxProperties: number = +Infinity): any {\n  try {\n    // since we're at the outermost level, we don't provide a key\n    return visit('', input, depth, maxProperties);\n  } catch (err) {\n    return { ERROR: `**non-serializable** (${err})` };\n  }\n}\n\n/** JSDoc */\nexport function normalizeToSize<T>(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  object: { [key: string]: any },\n  // Default Node.js REPL depth\n  depth: number = 3,\n  // 100kB, as 200kB is max payload size, so half sounds reasonable\n  maxSize: number = 100 * 1024,\n): T {\n  const normalized = normalize(object, depth);\n\n  if (jsonSize(normalized) > maxSize) {\n    return normalizeToSize(object, depth - 1, maxSize);\n  }\n\n  return normalized as T;\n}\n\n/**\n * Visits a node to perform normalization on it\n *\n * @param key The key corresponding to the given node\n * @param value The node to be visited\n * @param depth Optional number indicating the maximum recursion depth\n * @param maxProperties Optional maximum number of properties/elements included in any single object/array\n * @param memo Optional Memo class handling decycling\n */\nfunction visit(\n  key: string,\n  value: unknown,\n  depth: number = +Infinity,\n  maxProperties: number = +Infinity,\n  memo: MemoFunc = memoBuilder(),\n): Primitive | ObjOrArray<unknown> {\n  const [memoize, unmemoize] = memo;\n\n  // Get the simple cases out of the way first\n  if (\n    value == null || // this matches null and undefined -> eqeq not eqeqeq\n    (['number', 'boolean', 'string'].includes(typeof value) && !isNaN(value))\n  ) {\n    return value as Primitive;\n  }\n\n  const stringified = stringifyValue(key, value);\n\n  // Anything we could potentially dig into more (objects or arrays) will have come back as `\"[object XXXX]\"`.\n  // Everything else will have already been serialized, so if we don't see that pattern, we're done.\n  if (!stringified.startsWith('[object ')) {\n    return stringified;\n  }\n\n  // From here on, we can assert that `value` is either an object or an array.\n\n  // Do not normalize objects that we know have already been normalized. As a general rule, the\n  // \"__sentry_skip_normalization__\" property should only be used sparingly and only should only be set on objects that\n  // have already been normalized.\n  if ((value as ObjOrArray<unknown>)['__sentry_skip_normalization__']) {\n    return value as ObjOrArray<unknown>;\n  }\n\n  // We can set `__sentry_override_normalization_depth__` on an object to ensure that from there\n  // We keep a certain amount of depth.\n  // This should be used sparingly, e.g. we use it for the redux integration to ensure we get a certain amount of state.\n  const remainingDepth =\n    typeof (value as ObjOrArray<unknown>)['__sentry_override_normalization_depth__'] === 'number'\n      ? ((value as ObjOrArray<unknown>)['__sentry_override_normalization_depth__'] as number)\n      : depth;\n\n  // We're also done if we've reached the max depth\n  if (remainingDepth === 0) {\n    // At this point we know `serialized` is a string of the form `\"[object XXXX]\"`. Clean it up so it's just `\"[XXXX]\"`.\n    return stringified.replace('object ', '');\n  }\n\n  // If we've already visited this branch, bail out, as it's circular reference. If not, note that we're seeing it now.\n  if (memoize(value)) {\n    return '[Circular ~]';\n  }\n\n  // If the value has a `toJSON` method, we call it to extract more information\n  const valueWithToJSON = value as unknown & { toJSON?: () => unknown };\n  if (valueWithToJSON && typeof valueWithToJSON.toJSON === 'function') {\n    try {\n      const jsonValue = valueWithToJSON.toJSON();\n      // We need to normalize the return value of `.toJSON()` in case it has circular references\n      return visit('', jsonValue, remainingDepth - 1, maxProperties, memo);\n    } catch (err) {\n      // pass (The built-in `toJSON` failed, but we can still try to do it ourselves)\n    }\n  }\n\n  // At this point we know we either have an object or an array, we haven't seen it before, and we're going to recurse\n  // because we haven't yet reached the max depth. Create an accumulator to hold the results of visiting each\n  // property/entry, and keep track of the number of items we add to it.\n  const normalized = (Array.isArray(value) ? [] : {}) as ObjOrArray<unknown>;\n  let numAdded = 0;\n\n  // Before we begin, convert`Error` and`Event` instances into plain objects, since some of each of their relevant\n  // properties are non-enumerable and otherwise would get missed.\n  const visitable = convertToPlainObject(value as ObjOrArray<unknown>);\n\n  for (const visitKey in visitable) {\n    // Avoid iterating over fields in the prototype if they've somehow been exposed to enumeration.\n    if (!Object.prototype.hasOwnProperty.call(visitable, visitKey)) {\n      continue;\n    }\n\n    if (numAdded >= maxProperties) {\n      normalized[visitKey] = '[MaxProperties ~]';\n      break;\n    }\n\n    // Recursively visit all the child nodes\n    const visitValue = visitable[visitKey];\n    normalized[visitKey] = visit(visitKey, visitValue, remainingDepth - 1, maxProperties, memo);\n\n    numAdded++;\n  }\n\n  // Once we've visited all the branches, remove the parent from memo storage\n  unmemoize(value);\n\n  // Return accumulated values\n  return normalized;\n}\n\n// TODO remove this in v7 (this means the method will no longer be exported, under any name)\nexport { visit as walk };\n\n/* eslint-disable complexity */\n/**\n * Stringify the given value. Handles various known special values and types.\n *\n * Not meant to be used on simple primitives which already have a string representation, as it will, for example, turn\n * the number 1231 into \"[Object Number]\", nor on `null`, as it will throw.\n *\n * @param value The value to stringify\n * @returns A stringified representation of the given value\n */\nfunction stringifyValue(\n  key: unknown,\n  // this type is a tiny bit of a cheat, since this function does handle NaN (which is technically a number), but for\n  // our internal use, it'll do\n  value: Exclude<unknown, string | number | boolean | null>,\n): string {\n  try {\n    if (key === 'domain' && value && typeof value === 'object' && (value as { _events: unknown })._events) {\n      return '[Domain]';\n    }\n\n    if (key === 'domainEmitter') {\n      return '[DomainEmitter]';\n    }\n\n    // It's safe to use `global`, `window`, and `document` here in this manner, as we are asserting using `typeof` first\n    // which won't throw if they are not present.\n\n    if (typeof global !== 'undefined' && value === global) {\n      return '[Global]';\n    }\n\n    // eslint-disable-next-line no-restricted-globals\n    if (typeof window !== 'undefined' && value === window) {\n      return '[Window]';\n    }\n\n    // eslint-disable-next-line no-restricted-globals\n    if (typeof document !== 'undefined' && value === document) {\n      return '[Document]';\n    }\n\n    // React's SyntheticEvent thingy\n    if (isSyntheticEvent(value)) {\n      return '[SyntheticEvent]';\n    }\n\n    if (typeof value === 'number' && value !== value) {\n      return '[NaN]';\n    }\n\n    if (typeof value === 'function') {\n      return `[Function: ${getFunctionName(value)}]`;\n    }\n\n    if (typeof value === 'symbol') {\n      return `[${String(value)}]`;\n    }\n\n    // stringified BigInts are indistinguishable from regular numbers, so we need to label them to avoid confusion\n    if (typeof value === 'bigint') {\n      return `[BigInt: ${String(value)}]`;\n    }\n\n    // Now that we've knocked out all the special cases and the primitives, all we have left are objects. Simply casting\n    // them to strings means that instances of classes which haven't defined their `toStringTag` will just come out as\n    // `\"[object Object]\"`. If we instead look at the constructor's name (which is the same as the name of the class),\n    // we can make sure that only plain objects come out that way.\n    const objName = getConstructorName(value);\n\n    // Handle HTML Elements\n    if (/^HTML(\\w*)Element$/.test(objName)) {\n      return `[HTMLElement: ${objName}]`;\n    }\n\n    return `[object ${objName}]`;\n  } catch (err) {\n    return `**non-serializable** (${err})`;\n  }\n}\n/* eslint-enable complexity */\n\nfunction getConstructorName(value: unknown): string {\n  const prototype: Prototype | null = Object.getPrototypeOf(value);\n\n  return prototype ? prototype.constructor.name : 'null prototype';\n}\n\n/** Calculates bytes size of input string */\nfunction utf8Length(value: string): number {\n  // eslint-disable-next-line no-bitwise\n  return ~-encodeURI(value).split(/%..|./).length;\n}\n\n/** Calculates bytes size of input object */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction jsonSize(value: any): number {\n  return utf8Length(JSON.stringify(value));\n}\n","/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\nexport type MemoFunc = [\n  // memoize\n  (obj: any) => boolean,\n  // unmemoize\n  (obj: any) => void,\n];\n\n/**\n * Helper to decycle json objects\n */\nexport function memoBuilder(): MemoFunc {\n  const hasWeakSet = typeof WeakSet === 'function';\n  const inner: any = hasWeakSet ? new WeakSet() : [];\n  function memoize(obj: any): boolean {\n    if (hasWeakSet) {\n      if (inner.has(obj)) {\n        return true;\n      }\n      inner.add(obj);\n      return false;\n    }\n    // eslint-disable-next-line @typescript-eslint/prefer-for-of\n    for (let i = 0; i < inner.length; i++) {\n      const value = inner[i];\n      if (value === obj) {\n        return true;\n      }\n    }\n    inner.push(obj);\n    return false;\n  }\n\n  function unmemoize(obj: any): void {\n    if (hasWeakSet) {\n      inner.delete(obj);\n    } else {\n      for (let i = 0; i < inner.length; i++) {\n        if (inner[i] === obj) {\n          inner.splice(i, 1);\n          break;\n        }\n      }\n    }\n  }\n  return [memoize, unmemoize];\n}\n","import { getCurrentHub } from '@sentry/core';\nimport type { Event, EventHint, Exception, Severity, SeverityLevel, StackFrame, StackParser } from '@sentry/types';\nimport {\n  addExceptionMechanism,\n  addExceptionTypeValue,\n  extractExceptionKeysForMessage,\n  isDOMError,\n  isDOMException,\n  isError,\n  isErrorEvent,\n  isEvent,\n  isPlainObject,\n  normalizeToSize,\n  resolvedSyncPromise,\n} from '@sentry/utils';\n\n/**\n * This function creates an exception from a JavaScript Error\n */\nexport function exceptionFromError(stackParser: StackParser, ex: Error): Exception {\n  // Get the frames first since Opera can lose the stack if we touch anything else first\n  const frames = parseStackFrames(stackParser, ex);\n\n  const exception: Exception = {\n    type: ex && ex.name,\n    value: extractMessage(ex),\n  };\n\n  if (frames.length) {\n    exception.stacktrace = { frames };\n  }\n\n  if (exception.type === undefined && exception.value === '') {\n    exception.value = 'Unrecoverable error caught';\n  }\n\n  return exception;\n}\n\n/**\n * @hidden\n */\nexport function eventFromPlainObject(\n  stackParser: StackParser,\n  exception: Record<string, unknown>,\n  syntheticException?: Error,\n  isUnhandledRejection?: boolean,\n): Event {\n  const hub = getCurrentHub();\n  const client = hub.getClient();\n  const normalizeDepth = client && client.getOptions().normalizeDepth;\n\n  const event: Event = {\n    exception: {\n      values: [\n        {\n          type: isEvent(exception) ? exception.constructor.name : isUnhandledRejection ? 'UnhandledRejection' : 'Error',\n          value: `Non-Error ${\n            isUnhandledRejection ? 'promise rejection' : 'exception'\n          } captured with keys: ${extractExceptionKeysForMessage(exception)}`,\n        },\n      ],\n    },\n    extra: {\n      __serialized__: normalizeToSize(exception, normalizeDepth),\n    },\n  };\n\n  if (syntheticException) {\n    const frames = parseStackFrames(stackParser, syntheticException);\n    if (frames.length) {\n      // event.exception.values[0] has been set above\n      (event.exception as { values: Exception[] }).values[0].stacktrace = { frames };\n    }\n  }\n\n  return event;\n}\n\n/**\n * @hidden\n */\nexport function eventFromError(stackParser: StackParser, ex: Error): Event {\n  return {\n    exception: {\n      values: [exceptionFromError(stackParser, ex)],\n    },\n  };\n}\n\n/** Parses stack frames from an error */\nexport function parseStackFrames(\n  stackParser: StackParser,\n  ex: Error & { framesToPop?: number; stacktrace?: string },\n): StackFrame[] {\n  // Access and store the stacktrace property before doing ANYTHING\n  // else to it because Opera is not very good at providing it\n  // reliably in other circumstances.\n  const stacktrace = ex.stacktrace || ex.stack || '';\n\n  const popSize = getPopSize(ex);\n\n  try {\n    return stackParser(stacktrace, popSize);\n  } catch (e) {\n    // no-empty\n  }\n\n  return [];\n}\n\n// Based on our own mapping pattern - https://github.com/getsentry/sentry/blob/9f08305e09866c8bd6d0c24f5b0aabdd7dd6c59c/src/sentry/lang/javascript/errormapping.py#L83-L108\nconst reactMinifiedRegexp = /Minified React error #\\d+;/i;\n\nfunction getPopSize(ex: Error & { framesToPop?: number }): number {\n  if (ex) {\n    if (typeof ex.framesToPop === 'number') {\n      return ex.framesToPop;\n    }\n\n    if (reactMinifiedRegexp.test(ex.message)) {\n      return 1;\n    }\n  }\n\n  return 0;\n}\n\n/**\n * There are cases where stacktrace.message is an Event object\n * https://github.com/getsentry/sentry-javascript/issues/1949\n * In this specific case we try to extract stacktrace.message.error.message\n */\nfunction extractMessage(ex: Error & { message: { error?: Error } }): string {\n  const message = ex && ex.message;\n  if (!message) {\n    return 'No error message';\n  }\n  if (message.error && typeof message.error.message === 'string') {\n    return message.error.message;\n  }\n  return message;\n}\n\n/**\n * Creates an {@link Event} from all inputs to `captureException` and non-primitive inputs to `captureMessage`.\n * @hidden\n */\nexport function eventFromException(\n  stackParser: StackParser,\n  exception: unknown,\n  hint?: EventHint,\n  attachStacktrace?: boolean,\n): PromiseLike<Event> {\n  const syntheticException = (hint && hint.syntheticException) || undefined;\n  const event = eventFromUnknownInput(stackParser, exception, syntheticException, attachStacktrace);\n  addExceptionMechanism(event); // defaults to { type: 'generic', handled: true }\n  event.level = 'error';\n  if (hint && hint.event_id) {\n    event.event_id = hint.event_id;\n  }\n  return resolvedSyncPromise(event);\n}\n\n/**\n * Builds and Event from a Message\n * @hidden\n */\nexport function eventFromMessage(\n  stackParser: StackParser,\n  message: string,\n  // eslint-disable-next-line deprecation/deprecation\n  level: Severity | SeverityLevel = 'info',\n  hint?: EventHint,\n  attachStacktrace?: boolean,\n): PromiseLike<Event> {\n  const syntheticException = (hint && hint.syntheticException) || undefined;\n  const event = eventFromString(stackParser, message, syntheticException, attachStacktrace);\n  event.level = level;\n  if (hint && hint.event_id) {\n    event.event_id = hint.event_id;\n  }\n  return resolvedSyncPromise(event);\n}\n\n/**\n * @hidden\n */\nexport function eventFromUnknownInput(\n  stackParser: StackParser,\n  exception: unknown,\n  syntheticException?: Error,\n  attachStacktrace?: boolean,\n  isUnhandledRejection?: boolean,\n): Event {\n  let event: Event;\n\n  if (isErrorEvent(exception as ErrorEvent) && (exception as ErrorEvent).error) {\n    // If it is an ErrorEvent with `error` property, extract it to get actual Error\n    const errorEvent = exception as ErrorEvent;\n    return eventFromError(stackParser, errorEvent.error as Error);\n  }\n\n  // If it is a `DOMError` (which is a legacy API, but still supported in some browsers) then we just extract the name\n  // and message, as it doesn't provide anything else. According to the spec, all `DOMExceptions` should also be\n  // `Error`s, but that's not the case in IE11, so in that case we treat it the same as we do a `DOMError`.\n  //\n  // https://developer.mozilla.org/en-US/docs/Web/API/DOMError\n  // https://developer.mozilla.org/en-US/docs/Web/API/DOMException\n  // https://webidl.spec.whatwg.org/#es-DOMException-specialness\n  if (isDOMError(exception as DOMError) || isDOMException(exception as DOMException)) {\n    const domException = exception as DOMException;\n\n    if ('stack' in (exception as Error)) {\n      event = eventFromError(stackParser, exception as Error);\n    } else {\n      const name = domException.name || (isDOMError(domException) ? 'DOMError' : 'DOMException');\n      const message = domException.message ? `${name}: ${domException.message}` : name;\n      event = eventFromString(stackParser, message, syntheticException, attachStacktrace);\n      addExceptionTypeValue(event, message);\n    }\n    if ('code' in domException) {\n      event.tags = { ...event.tags, 'DOMException.code': `${domException.code}` };\n    }\n\n    return event;\n  }\n  if (isError(exception)) {\n    // we have a real Error object, do nothing\n    return eventFromError(stackParser, exception);\n  }\n  if (isPlainObject(exception) || isEvent(exception)) {\n    // If it's a plain object or an instance of `Event` (the built-in JS kind, not this SDK's `Event` type), serialize\n    // it manually. This will allow us to group events based on top-level keys which is much better than creating a new\n    // group on any key/value change.\n    const objectException = exception as Record<string, unknown>;\n    event = eventFromPlainObject(stackParser, objectException, syntheticException, isUnhandledRejection);\n    addExceptionMechanism(event, {\n      synthetic: true,\n    });\n    return event;\n  }\n\n  // If none of previous checks were valid, then it means that it's not:\n  // - an instance of DOMError\n  // - an instance of DOMException\n  // - an instance of Event\n  // - an instance of Error\n  // - a valid ErrorEvent (one with an error property)\n  // - a plain Object\n  //\n  // So bail out and capture it as a simple message:\n  event = eventFromString(stackParser, exception as string, syntheticException, attachStacktrace);\n  addExceptionTypeValue(event, `${exception}`, undefined);\n  addExceptionMechanism(event, {\n    synthetic: true,\n  });\n\n  return event;\n}\n\n/**\n * @hidden\n */\nexport function eventFromString(\n  stackParser: StackParser,\n  input: string,\n  syntheticException?: Error,\n  attachStacktrace?: boolean,\n): Event {\n  const event: Event = {\n    message: input,\n  };\n\n  if (attachStacktrace && syntheticException) {\n    const frames = parseStackFrames(stackParser, syntheticException);\n    if (frames.length) {\n      event.exception = {\n        values: [{ value: input, stacktrace: { frames } }],\n      };\n    }\n  }\n\n  return event;\n}\n","/* eslint-disable @typescript-eslint/no-unsafe-member-access */\nimport { getCurrentHub } from '@sentry/core';\nimport type { Event, EventHint, Hub, Integration, Primitive, StackParser } from '@sentry/types';\nimport {\n  addExceptionMechanism,\n  addInstrumentationHandler,\n  getLocationHref,\n  isErrorEvent,\n  isPrimitive,\n  isString,\n  logger,\n} from '@sentry/utils';\n\nimport type { BrowserClient } from '../client';\nimport { eventFromUnknownInput } from '../eventbuilder';\nimport { shouldIgnoreOnError } from '../helpers';\n\ntype GlobalHandlersIntegrationsOptionKeys = 'onerror' | 'onunhandledrejection';\n\n/** JSDoc */\ntype GlobalHandlersIntegrations = Record<GlobalHandlersIntegrationsOptionKeys, boolean>;\n\n/** Global handlers */\nexport class GlobalHandlers implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'GlobalHandlers';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = GlobalHandlers.id;\n\n  /** JSDoc */\n  private readonly _options: GlobalHandlersIntegrations;\n\n  /**\n   * Stores references functions to installing handlers. Will set to undefined\n   * after they have been run so that they are not used twice.\n   */\n  private _installFunc: Record<GlobalHandlersIntegrationsOptionKeys, (() => void) | undefined> = {\n    onerror: _installGlobalOnErrorHandler,\n    onunhandledrejection: _installGlobalOnUnhandledRejectionHandler,\n  };\n\n  /** JSDoc */\n  public constructor(options?: GlobalHandlersIntegrations) {\n    this._options = {\n      onerror: true,\n      onunhandledrejection: true,\n      ...options,\n    };\n  }\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(): void {\n    Error.stackTraceLimit = 50;\n    const options = this._options;\n\n    // We can disable guard-for-in as we construct the options object above + do checks against\n    // `this._installFunc` for the property.\n    // eslint-disable-next-line guard-for-in\n    for (const key in options) {\n      const installFunc = this._installFunc[key as GlobalHandlersIntegrationsOptionKeys];\n      if (installFunc && options[key as GlobalHandlersIntegrationsOptionKeys]) {\n        globalHandlerLog(key);\n        installFunc();\n        this._installFunc[key as GlobalHandlersIntegrationsOptionKeys] = undefined;\n      }\n    }\n  }\n}\n\n/** JSDoc */\nfunction _installGlobalOnErrorHandler(): void {\n  addInstrumentationHandler(\n    'error',\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (data: { msg: any; url: any; line: any; column: any; error: any }) => {\n      const [hub, stackParser, attachStacktrace] = getHubAndOptions();\n      if (!hub.getIntegration(GlobalHandlers)) {\n        return;\n      }\n      const { msg, url, line, column, error } = data;\n      if (shouldIgnoreOnError() || (error && error.__sentry_own_request__)) {\n        return;\n      }\n\n      const event =\n        error === undefined && isString(msg)\n          ? _eventFromIncompleteOnError(msg, url, line, column)\n          : _enhanceEventWithInitialFrame(\n              eventFromUnknownInput(stackParser, error || msg, undefined, attachStacktrace, false),\n              url,\n              line,\n              column,\n            );\n\n      event.level = 'error';\n\n      addMechanismAndCapture(hub, error, event, 'onerror');\n    },\n  );\n}\n\n/** JSDoc */\nfunction _installGlobalOnUnhandledRejectionHandler(): void {\n  addInstrumentationHandler(\n    'unhandledrejection',\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (e: any) => {\n      const [hub, stackParser, attachStacktrace] = getHubAndOptions();\n      if (!hub.getIntegration(GlobalHandlers)) {\n        return;\n      }\n      let error = e;\n\n      // dig the object of the rejection out of known event types\n      try {\n        // PromiseRejectionEvents store the object of the rejection under 'reason'\n        // see https://developer.mozilla.org/en-US/docs/Web/API/PromiseRejectionEvent\n        if ('reason' in e) {\n          error = e.reason;\n        }\n        // something, somewhere, (likely a browser extension) effectively casts PromiseRejectionEvents\n        // to CustomEvents, moving the `promise` and `reason` attributes of the PRE into\n        // the CustomEvent's `detail` attribute, since they're not part of CustomEvent's spec\n        // see https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent and\n        // https://github.com/getsentry/sentry-javascript/issues/2380\n        else if ('detail' in e && 'reason' in e.detail) {\n          error = e.detail.reason;\n        }\n      } catch (_oO) {\n        // no-empty\n      }\n\n      if (shouldIgnoreOnError() || (error && error.__sentry_own_request__)) {\n        return true;\n      }\n\n      const event = isPrimitive(error)\n        ? _eventFromRejectionWithPrimitive(error)\n        : eventFromUnknownInput(stackParser, error, undefined, attachStacktrace, true);\n\n      event.level = 'error';\n\n      addMechanismAndCapture(hub, error, event, 'onunhandledrejection');\n      return;\n    },\n  );\n}\n\n/**\n * Create an event from a promise rejection where the `reason` is a primitive.\n *\n * @param reason: The `reason` property of the promise rejection\n * @returns An Event object with an appropriate `exception` value\n */\nfunction _eventFromRejectionWithPrimitive(reason: Primitive): Event {\n  return {\n    exception: {\n      values: [\n        {\n          type: 'UnhandledRejection',\n          // String() is needed because the Primitive type includes symbols (which can't be automatically stringified)\n          value: `Non-Error promise rejection captured with value: ${String(reason)}`,\n        },\n      ],\n    },\n  };\n}\n\n/**\n * This function creates a stack from an old, error-less onerror handler.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _eventFromIncompleteOnError(msg: any, url: any, line: any, column: any): Event {\n  const ERROR_TYPES_RE =\n    /^(?:[Uu]ncaught (?:exception: )?)?(?:((?:Eval|Internal|Range|Reference|Syntax|Type|URI|)Error): )?(.*)$/i;\n\n  // If 'message' is ErrorEvent, get real message from inside\n  let message = isErrorEvent(msg) ? msg.message : msg;\n  let name = 'Error';\n\n  const groups = message.match(ERROR_TYPES_RE);\n  if (groups) {\n    name = groups[1];\n    message = groups[2];\n  }\n\n  const event = {\n    exception: {\n      values: [\n        {\n          type: name,\n          value: message,\n        },\n      ],\n    },\n  };\n\n  return _enhanceEventWithInitialFrame(event, url, line, column);\n}\n\n/** JSDoc */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _enhanceEventWithInitialFrame(event: Event, url: any, line: any, column: any): Event {\n  // event.exception\n  const e = (event.exception = event.exception || {});\n  // event.exception.values\n  const ev = (e.values = e.values || []);\n  // event.exception.values[0]\n  const ev0 = (ev[0] = ev[0] || {});\n  // event.exception.values[0].stacktrace\n  const ev0s = (ev0.stacktrace = ev0.stacktrace || {});\n  // event.exception.values[0].stacktrace.frames\n  const ev0sf = (ev0s.frames = ev0s.frames || []);\n\n  const colno = isNaN(parseInt(column, 10)) ? undefined : column;\n  const lineno = isNaN(parseInt(line, 10)) ? undefined : line;\n  const filename = isString(url) && url.length > 0 ? url : getLocationHref();\n\n  // event.exception.values[0].stacktrace.frames\n  if (ev0sf.length === 0) {\n    ev0sf.push({\n      colno,\n      filename,\n      function: '?',\n      in_app: true,\n      lineno,\n    });\n  }\n\n  return event;\n}\n\nfunction globalHandlerLog(type: string): void {\n  __DEBUG_BUILD__ && logger.log(`Global Handler attached: ${type}`);\n}\n\nfunction addMechanismAndCapture(hub: Hub, error: EventHint['originalException'], event: Event, type: string): void {\n  addExceptionMechanism(event, {\n    handled: false,\n    type,\n  });\n  hub.captureEvent(event, {\n    originalException: error,\n  });\n}\n\nfunction getHubAndOptions(): [Hub, StackParser, boolean | undefined] {\n  const hub = getCurrentHub();\n  const client = hub.getClient<BrowserClient>();\n  const options = (client && client.getOptions()) || {\n    stackParser: () => [],\n    attachStacktrace: false,\n  };\n  return [hub, options.stackParser, options.attachStacktrace];\n}\n","/* eslint-disable deprecation/deprecation */\nimport type { Severity, SeverityLevel } from '@sentry/types';\n\n// Note: Ideally the `SeverityLevel` type would be derived from `validSeverityLevels`, but that would mean either\n//\n// a) moving `validSeverityLevels` to `@sentry/types`,\n// b) moving the`SeverityLevel` type here, or\n// c) importing `validSeverityLevels` from here into `@sentry/types`.\n//\n// Option A would make `@sentry/types` a runtime dependency of `@sentry/utils` (not good), and options B and C would\n// create a circular dependency between `@sentry/types` and `@sentry/utils` (also not good). So a TODO accompanying the\n// type, reminding anyone who changes it to change this list also, will have to do.\n\nexport const validSeverityLevels = ['fatal', 'error', 'warning', 'log', 'info', 'debug'];\n\n/**\n * Converts a string-based level into a member of the deprecated {@link Severity} enum.\n *\n * @deprecated `severityFromString` is deprecated. Please use `severityLevelFromString` instead.\n *\n * @param level String representation of Severity\n * @returns Severity\n */\nexport function severityFromString(level: Severity | SeverityLevel | string): Severity {\n  return severityLevelFromString(level) as Severity;\n}\n\n/**\n * Converts a string-based level into a `SeverityLevel`, normalizing it along the way.\n *\n * @param level String representation of desired `SeverityLevel`.\n * @returns The `SeverityLevel` corresponding to the given string, or 'log' if the string isn't a valid level.\n */\nexport function severityLevelFromString(level: SeverityLevel | string): SeverityLevel {\n  return (level === 'warn' ? 'warning' : validSeverityLevels.includes(level) ? level : 'log') as SeverityLevel;\n}\n","type PartialURL = {\n  host?: string;\n  path?: string;\n  protocol?: string;\n  relative?: string;\n  search?: string;\n  hash?: string;\n};\n\n/**\n * Parses string form of URL into an object\n * // borrowed from https://tools.ietf.org/html/rfc3986#appendix-B\n * // intentionally using regex and not <a/> href parsing trick because React Native and other\n * // environments where DOM might not be available\n * @returns parsed URL object\n */\nexport function parseUrl(url: string): PartialURL {\n  if (!url) {\n    return {};\n  }\n\n  const match = url.match(/^(([^:/?#]+):)?(\\/\\/([^/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?$/);\n\n  if (!match) {\n    return {};\n  }\n\n  // coerce to undefined values to empty string so we don't get 'undefined'\n  const query = match[6] || '';\n  const fragment = match[8] || '';\n  return {\n    host: match[4],\n    path: match[5],\n    protocol: match[2],\n    search: query,\n    hash: fragment,\n    relative: match[5] + query + fragment, // everything minus origin\n  };\n}\n\n/**\n * Strip the query string and fragment off of a given URL or path (if present)\n *\n * @param urlPath Full URL or path, including possible query string and/or fragment\n * @returns URL or path without query string or fragment\n */\nexport function stripUrlQueryAndFragment(urlPath: string): string {\n  // eslint-disable-next-line no-useless-escape\n  return urlPath.split(/[\\?#]/, 1)[0];\n}\n\n/**\n * Returns number of URL segments of a passed string URL.\n */\nexport function getNumberOfUrlSegments(url: string): number {\n  // split at '/' or at '\\/' to split regex urls correctly\n  return url.split(/\\\\?\\//).filter(s => s.length > 0 && s !== ',').length;\n}\n\n/**\n * Takes a URL object and returns a sanitized string which is safe to use as span description\n * see: https://develop.sentry.dev/sdk/data-handling/#structuring-data\n */\nexport function getSanitizedUrlString(url: PartialURL): string {\n  const { protocol, host, path } = url;\n\n  const filteredHost =\n    (host &&\n      host\n        // Always filter out authority\n        .replace(/^.*@/, '[filtered]:[filtered]@')\n        // Don't show standard :80 (http) and :443 (https) ports to reduce the noise\n        .replace(':80', '')\n        .replace(':443', '')) ||\n    '';\n\n  return `${protocol ? `${protocol}://` : ''}${filteredHost}${path}`;\n}\n","/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n/* eslint-disable max-lines */\nimport { getCurrentHub } from '@sentry/core';\nimport type { Event as SentryEvent, HandlerDataFetch, HandlerDataXhr, Integration } from '@sentry/types';\nimport type {\n  FetchBreadcrumbData,\n  FetchBreadcrumbHint,\n  XhrBreadcrumbData,\n  XhrBreadcrumbHint,\n} from '@sentry/types/build/types/breadcrumb';\nimport {\n  addInstrumentationHandler,\n  getEventDescription,\n  htmlTreeAsString,\n  logger,\n  parseUrl,\n  safeJoin,\n  SENTRY_XHR_DATA_KEY,\n  severityLevelFromString,\n} from '@sentry/utils';\n\nimport { WINDOW } from '../helpers';\n\ntype HandlerData = Record<string, unknown>;\n\n/** JSDoc */\ninterface BreadcrumbsOptions {\n  console: boolean;\n  dom:\n    | boolean\n    | {\n        serializeAttribute?: string | string[];\n        maxStringLength?: number;\n      };\n  fetch: boolean;\n  history: boolean;\n  sentry: boolean;\n  xhr: boolean;\n}\n\n/** maxStringLength gets capped to prevent 100 breadcrumbs exceeding 1MB event payload size */\nconst MAX_ALLOWED_STRING_LENGTH = 1024;\n\nexport const BREADCRUMB_INTEGRATION_ID = 'Breadcrumbs';\n\n/**\n * Default Breadcrumbs instrumentations\n * TODO: Deprecated - with v6, this will be renamed to `Instrument`\n */\nexport class Breadcrumbs implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = BREADCRUMB_INTEGRATION_ID;\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = Breadcrumbs.id;\n\n  /**\n   * Options of the breadcrumbs integration.\n   */\n  // This field is public, because we use it in the browser client to check if the `sentry` option is enabled.\n  public readonly options: Readonly<BreadcrumbsOptions>;\n\n  /**\n   * @inheritDoc\n   */\n  public constructor(options?: Partial<BreadcrumbsOptions>) {\n    this.options = {\n      console: true,\n      dom: true,\n      fetch: true,\n      history: true,\n      sentry: true,\n      xhr: true,\n      ...options,\n    };\n  }\n\n  /**\n   * Instrument browser built-ins w/ breadcrumb capturing\n   *  - Console API\n   *  - DOM API (click/typing)\n   *  - XMLHttpRequest API\n   *  - Fetch API\n   *  - History API\n   */\n  public setupOnce(): void {\n    if (this.options.console) {\n      addInstrumentationHandler('console', _consoleBreadcrumb);\n    }\n    if (this.options.dom) {\n      addInstrumentationHandler('dom', _domBreadcrumb(this.options.dom));\n    }\n    if (this.options.xhr) {\n      addInstrumentationHandler('xhr', _xhrBreadcrumb);\n    }\n    if (this.options.fetch) {\n      addInstrumentationHandler('fetch', _fetchBreadcrumb);\n    }\n    if (this.options.history) {\n      addInstrumentationHandler('history', _historyBreadcrumb);\n    }\n  }\n\n  /**\n   * Adds a breadcrumb for Sentry events or transactions if this option is enabled.\n   */\n  public addSentryBreadcrumb(event: SentryEvent): void {\n    if (this.options.sentry) {\n      getCurrentHub().addBreadcrumb(\n        {\n          category: `sentry.${event.type === 'transaction' ? 'transaction' : 'event'}`,\n          event_id: event.event_id,\n          level: event.level,\n          message: getEventDescription(event),\n        },\n        {\n          event,\n        },\n      );\n    }\n  }\n}\n\n/**\n * A HOC that creaes a function that creates breadcrumbs from DOM API calls.\n * This is a HOC so that we get access to dom options in the closure.\n */\nfunction _domBreadcrumb(dom: BreadcrumbsOptions['dom']): (handlerData: HandlerData) => void {\n  function _innerDomBreadcrumb(handlerData: HandlerData): void {\n    let target;\n    let keyAttrs = typeof dom === 'object' ? dom.serializeAttribute : undefined;\n\n    let maxStringLength =\n      typeof dom === 'object' && typeof dom.maxStringLength === 'number' ? dom.maxStringLength : undefined;\n    if (maxStringLength && maxStringLength > MAX_ALLOWED_STRING_LENGTH) {\n      __DEBUG_BUILD__ &&\n        logger.warn(\n          `\\`dom.maxStringLength\\` cannot exceed ${MAX_ALLOWED_STRING_LENGTH}, but a value of ${maxStringLength} was configured. Sentry will use ${MAX_ALLOWED_STRING_LENGTH} instead.`,\n        );\n      maxStringLength = MAX_ALLOWED_STRING_LENGTH;\n    }\n\n    if (typeof keyAttrs === 'string') {\n      keyAttrs = [keyAttrs];\n    }\n\n    // Accessing event.target can throw (see getsentry/raven-js#838, #768)\n    try {\n      const event = handlerData.event as Event | Node;\n      target = _isEvent(event)\n        ? htmlTreeAsString(event.target, { keyAttrs, maxStringLength })\n        : htmlTreeAsString(event, { keyAttrs, maxStringLength });\n    } catch (e) {\n      target = '<unknown>';\n    }\n\n    if (target.length === 0) {\n      return;\n    }\n\n    getCurrentHub().addBreadcrumb(\n      {\n        category: `ui.${handlerData.name}`,\n        message: target,\n      },\n      {\n        event: handlerData.event,\n        name: handlerData.name,\n        global: handlerData.global,\n      },\n    );\n  }\n\n  return _innerDomBreadcrumb;\n}\n\n/**\n * Creates breadcrumbs from console API calls\n */\nfunction _consoleBreadcrumb(handlerData: HandlerData & { args: unknown[]; level: string }): void {\n  // This is a hack to fix a Vue3-specific bug that causes an infinite loop of\n  // console warnings. This happens when a Vue template is rendered with\n  // an undeclared variable, which we try to stringify, ultimately causing\n  // Vue to issue another warning which repeats indefinitely.\n  // see: https://github.com/getsentry/sentry-javascript/pull/6010\n  // see: https://github.com/getsentry/sentry-javascript/issues/5916\n  for (let i = 0; i < handlerData.args.length; i++) {\n    if (handlerData.args[i] === 'ref=Ref<') {\n      handlerData.args[i + 1] = 'viewRef';\n      break;\n    }\n  }\n  const breadcrumb = {\n    category: 'console',\n    data: {\n      arguments: handlerData.args,\n      logger: 'console',\n    },\n    level: severityLevelFromString(handlerData.level),\n    message: safeJoin(handlerData.args, ' '),\n  };\n\n  if (handlerData.level === 'assert') {\n    if (handlerData.args[0] === false) {\n      breadcrumb.message = `Assertion failed: ${safeJoin(handlerData.args.slice(1), ' ') || 'console.assert'}`;\n      breadcrumb.data.arguments = handlerData.args.slice(1);\n    } else {\n      // Don't capture a breadcrumb for passed assertions\n      return;\n    }\n  }\n\n  getCurrentHub().addBreadcrumb(breadcrumb, {\n    input: handlerData.args,\n    level: handlerData.level,\n  });\n}\n\n/**\n * Creates breadcrumbs from XHR API calls\n */\nfunction _xhrBreadcrumb(handlerData: HandlerData & HandlerDataXhr): void {\n  const { startTimestamp, endTimestamp } = handlerData;\n\n  const sentryXhrData = handlerData.xhr[SENTRY_XHR_DATA_KEY];\n\n  // We only capture complete, non-sentry requests\n  if (!startTimestamp || !endTimestamp || !sentryXhrData) {\n    return;\n  }\n\n  const { method, url, status_code, body } = sentryXhrData;\n\n  const data: XhrBreadcrumbData = {\n    method,\n    url,\n    status_code,\n  };\n\n  const hint: XhrBreadcrumbHint = {\n    xhr: handlerData.xhr,\n    input: body,\n    startTimestamp,\n    endTimestamp,\n  };\n\n  getCurrentHub().addBreadcrumb(\n    {\n      category: 'xhr',\n      data,\n      type: 'http',\n    },\n    hint,\n  );\n}\n\n/**\n * Creates breadcrumbs from fetch API calls\n */\nfunction _fetchBreadcrumb(handlerData: HandlerData & HandlerDataFetch & { response?: Response }): void {\n  const { startTimestamp, endTimestamp } = handlerData;\n\n  // We only capture complete fetch requests\n  if (!endTimestamp) {\n    return;\n  }\n\n  if (handlerData.fetchData.url.match(/sentry_key/) && handlerData.fetchData.method === 'POST') {\n    // We will not create breadcrumbs for fetch requests that contain `sentry_key` (internal sentry requests)\n    return;\n  }\n\n  if (handlerData.error) {\n    const data: FetchBreadcrumbData = handlerData.fetchData;\n    const hint: FetchBreadcrumbHint = {\n      data: handlerData.error,\n      input: handlerData.args,\n      startTimestamp,\n      endTimestamp,\n    };\n\n    getCurrentHub().addBreadcrumb(\n      {\n        category: 'fetch',\n        data,\n        level: 'error',\n        type: 'http',\n      },\n      hint,\n    );\n  } else {\n    const data: FetchBreadcrumbData = {\n      ...handlerData.fetchData,\n      status_code: handlerData.response && handlerData.response.status,\n    };\n    const hint: FetchBreadcrumbHint = {\n      input: handlerData.args,\n      response: handlerData.response,\n      startTimestamp,\n      endTimestamp,\n    };\n    getCurrentHub().addBreadcrumb(\n      {\n        category: 'fetch',\n        data,\n        type: 'http',\n      },\n      hint,\n    );\n  }\n}\n\n/**\n * Creates breadcrumbs from history API calls\n */\nfunction _historyBreadcrumb(handlerData: HandlerData & { from: string; to: string }): void {\n  let from: string | undefined = handlerData.from;\n  let to: string | undefined = handlerData.to;\n  const parsedLoc = parseUrl(WINDOW.location.href);\n  let parsedFrom = parseUrl(from);\n  const parsedTo = parseUrl(to);\n\n  // Initial pushState doesn't provide `from` information\n  if (!parsedFrom.path) {\n    parsedFrom = parsedLoc;\n  }\n\n  // Use only the path component of the URL if the URL matches the current\n  // document (almost all the time when using pushState)\n  if (parsedLoc.protocol === parsedTo.protocol && parsedLoc.host === parsedTo.host) {\n    to = parsedTo.relative;\n  }\n  if (parsedLoc.protocol === parsedFrom.protocol && parsedLoc.host === parsedFrom.host) {\n    from = parsedFrom.relative;\n  }\n\n  getCurrentHub().addBreadcrumb({\n    category: 'navigation',\n    data: {\n      from,\n      to,\n    },\n  });\n}\n\nfunction _isEvent(event: unknown): event is Event {\n  return event && !!(event as Record<string, unknown>).target;\n}\n","import { addGlobalEventProcessor, getCurrentHub } from '@sentry/core';\nimport type { Event, EventHint, Exception, ExtendedError, Integration, StackParser } from '@sentry/types';\nimport { isInstanceOf } from '@sentry/utils';\n\nimport type { BrowserClient } from '../client';\nimport { exceptionFromError } from '../eventbuilder';\n\nconst DEFAULT_KEY = 'cause';\nconst DEFAULT_LIMIT = 5;\n\ninterface LinkedErrorsOptions {\n  key: string;\n  limit: number;\n}\n\n/** Adds SDK info to an event. */\nexport class LinkedErrors implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'LinkedErrors';\n\n  /**\n   * @inheritDoc\n   */\n  public readonly name: string = LinkedErrors.id;\n\n  /**\n   * @inheritDoc\n   */\n  private readonly _key: LinkedErrorsOptions['key'];\n\n  /**\n   * @inheritDoc\n   */\n  private readonly _limit: LinkedErrorsOptions['limit'];\n\n  /**\n   * @inheritDoc\n   */\n  public constructor(options: Partial<LinkedErrorsOptions> = {}) {\n    this._key = options.key || DEFAULT_KEY;\n    this._limit = options.limit || DEFAULT_LIMIT;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(): void {\n    const client = getCurrentHub().getClient<BrowserClient>();\n    if (!client) {\n      return;\n    }\n    addGlobalEventProcessor((event: Event, hint?: EventHint) => {\n      const self = getCurrentHub().getIntegration(LinkedErrors);\n      return self ? _handler(client.getOptions().stackParser, self._key, self._limit, event, hint) : event;\n    });\n  }\n}\n\n/**\n * @inheritDoc\n */\nexport function _handler(\n  parser: StackParser,\n  key: string,\n  limit: number,\n  event: Event,\n  hint?: EventHint,\n): Event | null {\n  if (!event.exception || !event.exception.values || !hint || !isInstanceOf(hint.originalException, Error)) {\n    return event;\n  }\n  const linkedErrors = _walkErrorTree(parser, limit, hint.originalException as ExtendedError, key);\n  event.exception.values = [...linkedErrors, ...event.exception.values];\n  return event;\n}\n\n/**\n * JSDOC\n */\nexport function _walkErrorTree(\n  parser: StackParser,\n  limit: number,\n  error: ExtendedError,\n  key: string,\n  stack: Exception[] = [],\n): Exception[] {\n  if (!isInstanceOf(error[key], Error) || stack.length + 1 >= limit) {\n    return stack;\n  }\n  const exception = exceptionFromError(parser, error[key]);\n  return _walkErrorTree(parser, limit, error[key], key, [exception, ...stack]);\n}\n","import { addGlobalEventProcessor, getCurrentHub } from '@sentry/core';\nimport type { Event, Integration } from '@sentry/types';\n\nimport { WINDOW } from '../helpers';\n\n/** HttpContext integration collects information about HTTP request headers */\nexport class HttpContext implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'HttpContext';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = HttpContext.id;\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(): void {\n    addGlobalEventProcessor((event: Event) => {\n      if (getCurrentHub().getIntegration(HttpContext)) {\n        // if none of the information we want exists, don't bother\n        if (!WINDOW.navigator && !WINDOW.location && !WINDOW.document) {\n          return event;\n        }\n\n        // grab as much info as exists and add it to the event\n        const url = (event.request && event.request.url) || (WINDOW.location && WINDOW.location.href);\n        const { referrer } = WINDOW.document || {};\n        const { userAgent } = WINDOW.navigator || {};\n\n        const headers = {\n          ...(event.request && event.request.headers),\n          ...(referrer && { Referer: referrer }),\n          ...(userAgent && { 'User-Agent': userAgent }),\n        };\n        const request = { ...event.request, ...(url && { url }), headers };\n\n        return { ...event, request };\n      }\n      return event;\n    });\n  }\n}\n","export default function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return self;\n}","export default function _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}","import setPrototypeOf from \"./setPrototypeOf.js\";\nexport default function _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  setPrototypeOf(subClass, superClass);\n}","/* eslint-disable max-lines */\nimport type {\n  Instrumenter,\n  Primitive,\n  Span as SpanInterface,\n  SpanContext,\n  TraceContext,\n  Transaction,\n} from '@sentry/types';\nimport { dropUndefinedKeys, logger, timestampInSeconds, uuid4 } from '@sentry/utils';\n\n/**\n * Keeps track of finished spans for a given transaction\n * @internal\n * @hideconstructor\n * @hidden\n */\nexport class SpanRecorder {\n  public spans: Span[] = [];\n\n  private readonly _maxlen: number;\n\n  public constructor(maxlen: number = 1000) {\n    this._maxlen = maxlen;\n  }\n\n  /**\n   * This is just so that we don't run out of memory while recording a lot\n   * of spans. At some point we just stop and flush out the start of the\n   * trace tree (i.e.the first n spans with the smallest\n   * start_timestamp).\n   */\n  public add(span: Span): void {\n    if (this.spans.length > this._maxlen) {\n      span.spanRecorder = undefined;\n    } else {\n      this.spans.push(span);\n    }\n  }\n}\n\n/**\n * Span contains all data about a span\n */\nexport class Span implements SpanInterface {\n  /**\n   * @inheritDoc\n   */\n  public traceId: string = uuid4();\n\n  /**\n   * @inheritDoc\n   */\n  public spanId: string = uuid4().substring(16);\n\n  /**\n   * @inheritDoc\n   */\n  public parentSpanId?: string;\n\n  /**\n   * Internal keeper of the status\n   */\n  public status?: SpanStatusType | string;\n\n  /**\n   * @inheritDoc\n   */\n  public sampled?: boolean;\n\n  /**\n   * Timestamp in seconds when the span was created.\n   */\n  public startTimestamp: number = timestampInSeconds();\n\n  /**\n   * Timestamp in seconds when the span ended.\n   */\n  public endTimestamp?: number;\n\n  /**\n   * @inheritDoc\n   */\n  public op?: string;\n\n  /**\n   * @inheritDoc\n   */\n  public description?: string;\n\n  /**\n   * @inheritDoc\n   */\n  public tags: { [key: string]: Primitive } = {};\n\n  /**\n   * @inheritDoc\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  public data: { [key: string]: any } = {};\n\n  /**\n   * List of spans that were finalized\n   */\n  public spanRecorder?: SpanRecorder;\n\n  /**\n   * @inheritDoc\n   */\n  public transaction?: Transaction;\n\n  /**\n   * The instrumenter that created this span.\n   */\n  public instrumenter: Instrumenter = 'sentry';\n\n  /**\n   * You should never call the constructor manually, always use `Sentry.startTransaction()`\n   * or call `startChild()` on an existing span.\n   * @internal\n   * @hideconstructor\n   * @hidden\n   */\n  public constructor(spanContext?: SpanContext) {\n    if (!spanContext) {\n      return this;\n    }\n    if (spanContext.traceId) {\n      this.traceId = spanContext.traceId;\n    }\n    if (spanContext.spanId) {\n      this.spanId = spanContext.spanId;\n    }\n    if (spanContext.parentSpanId) {\n      this.parentSpanId = spanContext.parentSpanId;\n    }\n    // We want to include booleans as well here\n    if ('sampled' in spanContext) {\n      this.sampled = spanContext.sampled;\n    }\n    if (spanContext.op) {\n      this.op = spanContext.op;\n    }\n    if (spanContext.description) {\n      this.description = spanContext.description;\n    }\n    if (spanContext.data) {\n      this.data = spanContext.data;\n    }\n    if (spanContext.tags) {\n      this.tags = spanContext.tags;\n    }\n    if (spanContext.status) {\n      this.status = spanContext.status;\n    }\n    if (spanContext.startTimestamp) {\n      this.startTimestamp = spanContext.startTimestamp;\n    }\n    if (spanContext.endTimestamp) {\n      this.endTimestamp = spanContext.endTimestamp;\n    }\n    if (spanContext.instrumenter) {\n      this.instrumenter = spanContext.instrumenter;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public startChild(\n    spanContext?: Pick<SpanContext, Exclude<keyof SpanContext, 'sampled' | 'traceId' | 'parentSpanId'>>,\n  ): Span {\n    const childSpan = new Span({\n      ...spanContext,\n      parentSpanId: this.spanId,\n      sampled: this.sampled,\n      traceId: this.traceId,\n    });\n\n    childSpan.spanRecorder = this.spanRecorder;\n    if (childSpan.spanRecorder) {\n      childSpan.spanRecorder.add(childSpan);\n    }\n\n    childSpan.transaction = this.transaction;\n\n    if (__DEBUG_BUILD__ && childSpan.transaction) {\n      const opStr = (spanContext && spanContext.op) || '< unknown op >';\n      const nameStr = childSpan.transaction.name || '< unknown name >';\n      const idStr = childSpan.transaction.spanId;\n\n      const logMessage = `[Tracing] Starting '${opStr}' span on transaction '${nameStr}' (${idStr}).`;\n      childSpan.transaction.metadata.spanMetadata[childSpan.spanId] = { logMessage };\n      logger.log(logMessage);\n    }\n\n    return childSpan;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setTag(key: string, value: Primitive): this {\n    this.tags = { ...this.tags, [key]: value };\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types\n  public setData(key: string, value: any): this {\n    this.data = { ...this.data, [key]: value };\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setStatus(value: SpanStatusType): this {\n    this.status = value;\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setHttpStatus(httpStatus: number): this {\n    this.setTag('http.status_code', String(httpStatus));\n    const spanStatus = spanStatusfromHttpCode(httpStatus);\n    if (spanStatus !== 'unknown_error') {\n      this.setStatus(spanStatus);\n    }\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public isSuccess(): boolean {\n    return this.status === 'ok';\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public finish(endTimestamp?: number): void {\n    if (\n      __DEBUG_BUILD__ &&\n      // Don't call this for transactions\n      this.transaction &&\n      this.transaction.spanId !== this.spanId\n    ) {\n      const { logMessage } = this.transaction.metadata.spanMetadata[this.spanId];\n      if (logMessage) {\n        logger.log((logMessage as string).replace('Starting', 'Finishing'));\n      }\n    }\n\n    this.endTimestamp = typeof endTimestamp === 'number' ? endTimestamp : timestampInSeconds();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public toTraceparent(): string {\n    let sampledString = '';\n    if (this.sampled !== undefined) {\n      sampledString = this.sampled ? '-1' : '-0';\n    }\n    return `${this.traceId}-${this.spanId}${sampledString}`;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public toContext(): SpanContext {\n    return dropUndefinedKeys({\n      data: this.data,\n      description: this.description,\n      endTimestamp: this.endTimestamp,\n      op: this.op,\n      parentSpanId: this.parentSpanId,\n      sampled: this.sampled,\n      spanId: this.spanId,\n      startTimestamp: this.startTimestamp,\n      status: this.status,\n      tags: this.tags,\n      traceId: this.traceId,\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public updateWithContext(spanContext: SpanContext): this {\n    this.data = spanContext.data || {};\n    this.description = spanContext.description;\n    this.endTimestamp = spanContext.endTimestamp;\n    this.op = spanContext.op;\n    this.parentSpanId = spanContext.parentSpanId;\n    this.sampled = spanContext.sampled;\n    this.spanId = spanContext.spanId || this.spanId;\n    this.startTimestamp = spanContext.startTimestamp || this.startTimestamp;\n    this.status = spanContext.status;\n    this.tags = spanContext.tags || {};\n    this.traceId = spanContext.traceId || this.traceId;\n\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getTraceContext(): TraceContext {\n    return dropUndefinedKeys({\n      data: Object.keys(this.data).length > 0 ? this.data : undefined,\n      description: this.description,\n      op: this.op,\n      parent_span_id: this.parentSpanId,\n      span_id: this.spanId,\n      status: this.status,\n      tags: Object.keys(this.tags).length > 0 ? this.tags : undefined,\n      trace_id: this.traceId,\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public toJSON(): {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    data?: { [key: string]: any };\n    description?: string;\n    op?: string;\n    parent_span_id?: string;\n    span_id: string;\n    start_timestamp: number;\n    status?: string;\n    tags?: { [key: string]: Primitive };\n    timestamp?: number;\n    trace_id: string;\n  } {\n    return dropUndefinedKeys({\n      data: Object.keys(this.data).length > 0 ? this.data : undefined,\n      description: this.description,\n      op: this.op,\n      parent_span_id: this.parentSpanId,\n      span_id: this.spanId,\n      start_timestamp: this.startTimestamp,\n      status: this.status,\n      tags: Object.keys(this.tags).length > 0 ? this.tags : undefined,\n      timestamp: this.endTimestamp,\n      trace_id: this.traceId,\n    });\n  }\n}\n\nexport type SpanStatusType =\n  /** The operation completed successfully. */\n  | 'ok'\n  /** Deadline expired before operation could complete. */\n  | 'deadline_exceeded'\n  /** 401 Unauthorized (actually does mean unauthenticated according to RFC 7235) */\n  | 'unauthenticated'\n  /** 403 Forbidden */\n  | 'permission_denied'\n  /** 404 Not Found. Some requested entity (file or directory) was not found. */\n  | 'not_found'\n  /** 429 Too Many Requests */\n  | 'resource_exhausted'\n  /** Client specified an invalid argument. 4xx. */\n  | 'invalid_argument'\n  /** 501 Not Implemented */\n  | 'unimplemented'\n  /** 503 Service Unavailable */\n  | 'unavailable'\n  /** Other/generic 5xx. */\n  | 'internal_error'\n  /** Unknown. Any non-standard HTTP status code. */\n  | 'unknown_error'\n  /** The operation was cancelled (typically by the user). */\n  | 'cancelled'\n  /** Already exists (409) */\n  | 'already_exists'\n  /** Operation was rejected because the system is not in a state required for the operation's */\n  | 'failed_precondition'\n  /** The operation was aborted, typically due to a concurrency issue. */\n  | 'aborted'\n  /** Operation was attempted past the valid range. */\n  | 'out_of_range'\n  /** Unrecoverable data loss or corruption */\n  | 'data_loss';\n\n/**\n * Converts a HTTP status code into a {@link SpanStatusType}.\n *\n * @param httpStatus The HTTP response status code.\n * @returns The span status or unknown_error.\n */\nexport function spanStatusfromHttpCode(httpStatus: number): SpanStatusType {\n  if (httpStatus < 400 && httpStatus >= 100) {\n    return 'ok';\n  }\n\n  if (httpStatus >= 400 && httpStatus < 500) {\n    switch (httpStatus) {\n      case 401:\n        return 'unauthenticated';\n      case 403:\n        return 'permission_denied';\n      case 404:\n        return 'not_found';\n      case 409:\n        return 'already_exists';\n      case 413:\n        return 'failed_precondition';\n      case 429:\n        return 'resource_exhausted';\n      default:\n        return 'invalid_argument';\n    }\n  }\n\n  if (httpStatus >= 500 && httpStatus < 600) {\n    switch (httpStatus) {\n      case 501:\n        return 'unimplemented';\n      case 503:\n        return 'unavailable';\n      case 504:\n        return 'deadline_exceeded';\n      default:\n        return 'internal_error';\n    }\n  }\n\n  return 'unknown_error';\n}\n","export default function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, _typeof(obj);\n}","import toPropertyKey from \"./toPropertyKey.js\";\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, toPropertyKey(descriptor.key), descriptor);\n  }\n}\nexport default function _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}","import _typeof from \"./typeof.js\";\nimport toPrimitive from \"./toPrimitive.js\";\nexport default function _toPropertyKey(arg) {\n  var key = toPrimitive(arg, \"string\");\n  return _typeof(key) === \"symbol\" ? key : String(key);\n}","import _typeof from \"./typeof.js\";\nexport default function _toPrimitive(input, hint) {\n  if (_typeof(input) !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (_typeof(res) !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (hint === \"string\" ? String : Number)(input);\n}","import type {\n  Context,\n  Contexts,\n  DynamicSamplingContext,\n  Event,\n  Measurements,\n  MeasurementUnit,\n  Transaction as TransactionInterface,\n  TransactionContext,\n  TransactionMetadata,\n} from '@sentry/types';\nimport { dropUndefinedKeys, logger } from '@sentry/utils';\n\nimport { DEFAULT_ENVIRONMENT } from '../constants';\nimport type { Hub } from '../hub';\nimport { getCurrentHub } from '../hub';\nimport { Span as SpanClass, SpanRecorder } from './span';\n\n/** JSDoc */\nexport class Transaction extends SpanClass implements TransactionInterface {\n  public metadata: TransactionMetadata;\n\n  /**\n   * The reference to the current hub.\n   */\n  public _hub: Hub;\n\n  private _name: string;\n\n  private _measurements: Measurements = {};\n\n  private _contexts: Contexts = {};\n\n  private _trimEnd?: boolean;\n\n  private _frozenDynamicSamplingContext: Readonly<Partial<DynamicSamplingContext>> | undefined = undefined;\n\n  /**\n   * This constructor should never be called manually. Those instrumenting tracing should use\n   * `Sentry.startTransaction()`, and internal methods should use `hub.startTransaction()`.\n   * @internal\n   * @hideconstructor\n   * @hidden\n   */\n  public constructor(transactionContext: TransactionContext, hub?: Hub) {\n    super(transactionContext);\n\n    this._hub = hub || getCurrentHub();\n\n    this._name = transactionContext.name || '';\n\n    this.metadata = {\n      source: 'custom',\n      ...transactionContext.metadata,\n      spanMetadata: {},\n    };\n\n    this._trimEnd = transactionContext.trimEnd;\n\n    // this is because transactions are also spans, and spans have a transaction pointer\n    this.transaction = this;\n\n    // If Dynamic Sampling Context is provided during the creation of the transaction, we freeze it as it usually means\n    // there is incoming Dynamic Sampling Context. (Either through an incoming request, a baggage meta-tag, or other means)\n    const incomingDynamicSamplingContext = this.metadata.dynamicSamplingContext;\n    if (incomingDynamicSamplingContext) {\n      // We shallow copy this in case anything writes to the original reference of the passed in `dynamicSamplingContext`\n      this._frozenDynamicSamplingContext = { ...incomingDynamicSamplingContext };\n    }\n  }\n\n  /** Getter for `name` property */\n  public get name(): string {\n    return this._name;\n  }\n\n  /** Setter for `name` property, which also sets `source` as custom */\n  public set name(newName: string) {\n    this.setName(newName);\n  }\n\n  /**\n   * JSDoc\n   */\n  public setName(name: string, source: TransactionMetadata['source'] = 'custom'): void {\n    this._name = name;\n    this.metadata.source = source;\n  }\n\n  /**\n   * Attaches SpanRecorder to the span itself\n   * @param maxlen maximum number of spans that can be recorded\n   */\n  public initSpanRecorder(maxlen: number = 1000): void {\n    if (!this.spanRecorder) {\n      this.spanRecorder = new SpanRecorder(maxlen);\n    }\n    this.spanRecorder.add(this);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setContext(key: string, context: Context | null): void {\n    if (context === null) {\n      // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n      delete this._contexts[key];\n    } else {\n      this._contexts[key] = context;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setMeasurement(name: string, value: number, unit: MeasurementUnit = ''): void {\n    this._measurements[name] = { value, unit };\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setMetadata(newMetadata: Partial<TransactionMetadata>): void {\n    this.metadata = { ...this.metadata, ...newMetadata };\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public finish(endTimestamp?: number): string | undefined {\n    // This transaction is already finished, so we should not flush it again.\n    if (this.endTimestamp !== undefined) {\n      return undefined;\n    }\n\n    if (!this.name) {\n      __DEBUG_BUILD__ && logger.warn('Transaction has no name, falling back to `<unlabeled transaction>`.');\n      this.name = '<unlabeled transaction>';\n    }\n\n    // just sets the end timestamp\n    super.finish(endTimestamp);\n\n    const client = this._hub.getClient();\n    if (client && client.emit) {\n      client.emit('finishTransaction', this);\n    }\n\n    if (this.sampled !== true) {\n      // At this point if `sampled !== true` we want to discard the transaction.\n      __DEBUG_BUILD__ && logger.log('[Tracing] Discarding transaction because its trace was not chosen to be sampled.');\n\n      if (client) {\n        client.recordDroppedEvent('sample_rate', 'transaction');\n      }\n\n      return undefined;\n    }\n\n    const finishedSpans = this.spanRecorder ? this.spanRecorder.spans.filter(s => s !== this && s.endTimestamp) : [];\n\n    if (this._trimEnd && finishedSpans.length > 0) {\n      this.endTimestamp = finishedSpans.reduce((prev: SpanClass, current: SpanClass) => {\n        if (prev.endTimestamp && current.endTimestamp) {\n          return prev.endTimestamp > current.endTimestamp ? prev : current;\n        }\n        return prev;\n      }).endTimestamp;\n    }\n\n    const metadata = this.metadata;\n\n    const transaction: Event = {\n      contexts: {\n        ...this._contexts,\n        // We don't want to override trace context\n        trace: this.getTraceContext(),\n      },\n      spans: finishedSpans,\n      start_timestamp: this.startTimestamp,\n      tags: this.tags,\n      timestamp: this.endTimestamp,\n      transaction: this.name,\n      type: 'transaction',\n      sdkProcessingMetadata: {\n        ...metadata,\n        dynamicSamplingContext: this.getDynamicSamplingContext(),\n      },\n      ...(metadata.source && {\n        transaction_info: {\n          source: metadata.source,\n        },\n      }),\n    };\n\n    const hasMeasurements = Object.keys(this._measurements).length > 0;\n\n    if (hasMeasurements) {\n      __DEBUG_BUILD__ &&\n        logger.log(\n          '[Measurements] Adding measurements to transaction',\n          JSON.stringify(this._measurements, undefined, 2),\n        );\n      transaction.measurements = this._measurements;\n    }\n\n    __DEBUG_BUILD__ && logger.log(`[Tracing] Finishing ${this.op} transaction: ${this.name}.`);\n\n    return this._hub.captureEvent(transaction);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public toContext(): TransactionContext {\n    const spanContext = super.toContext();\n\n    return dropUndefinedKeys({\n      ...spanContext,\n      name: this.name,\n      trimEnd: this._trimEnd,\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public updateWithContext(transactionContext: TransactionContext): this {\n    super.updateWithContext(transactionContext);\n\n    this.name = transactionContext.name || '';\n\n    this._trimEnd = transactionContext.trimEnd;\n\n    return this;\n  }\n\n  /**\n   * @inheritdoc\n   *\n   * @experimental\n   */\n  public getDynamicSamplingContext(): Readonly<Partial<DynamicSamplingContext>> {\n    if (this._frozenDynamicSamplingContext) {\n      return this._frozenDynamicSamplingContext;\n    }\n\n    const hub: Hub = this._hub || getCurrentHub();\n    const client = hub && hub.getClient();\n\n    if (!client) return {};\n\n    const { environment, release } = client.getOptions() || {};\n    const { publicKey: public_key } = client.getDsn() || {};\n\n    const maybeSampleRate = this.metadata.sampleRate;\n    const sample_rate = maybeSampleRate !== undefined ? maybeSampleRate.toString() : undefined;\n\n    const { segment: user_segment } = hub.getScope().getUser() || {};\n\n    const source = this.metadata.source;\n\n    // We don't want to have a transaction name in the DSC if the source is \"url\" because URLs might contain PII\n    const transaction = source && source !== 'url' ? this.name : undefined;\n\n    const dsc = dropUndefinedKeys({\n      environment: environment || DEFAULT_ENVIRONMENT,\n      release,\n      transaction,\n      user_segment,\n      public_key,\n      trace_id: this.traceId,\n      sample_rate,\n    });\n\n    // Uncomment if we want to make DSC immutable\n    // this._frozenDynamicSamplingContext = dsc;\n\n    client.emit && client.emit('createDsc', dsc);\n\n    return dsc;\n  }\n\n  /**\n   * Override the current hub with a new one.\n   * Used if you want another hub to finish the transaction.\n   *\n   * @internal\n   */\n  public setHub(hub: Hub): void {\n    this._hub = hub;\n  }\n}\n","/* eslint-disable max-lines */\nimport type { TransactionContext } from '@sentry/types';\nimport { logger, timestampInSeconds } from '@sentry/utils';\n\nimport type { Hub } from '../hub';\nimport type { Span } from './span';\nimport { SpanRecorder } from './span';\nimport { Transaction } from './transaction';\n\nexport const TRACING_DEFAULTS = {\n  idleTimeout: 1000,\n  finalTimeout: 30000,\n  heartbeatInterval: 5000,\n};\n\nconst FINISH_REASON_TAG = 'finishReason';\n\nconst IDLE_TRANSACTION_FINISH_REASONS = [\n  'heartbeatFailed',\n  'idleTimeout',\n  'documentHidden',\n  'finalTimeout',\n  'externalFinish',\n  'cancelled',\n];\n\n/**\n * @inheritDoc\n */\nexport class IdleTransactionSpanRecorder extends SpanRecorder {\n  public constructor(\n    private readonly _pushActivity: (id: string) => void,\n    private readonly _popActivity: (id: string) => void,\n    public transactionSpanId: string,\n    maxlen?: number,\n  ) {\n    super(maxlen);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public add(span: Span): void {\n    // We should make sure we do not push and pop activities for\n    // the transaction that this span recorder belongs to.\n    if (span.spanId !== this.transactionSpanId) {\n      // We patch span.finish() to pop an activity after setting an endTimestamp.\n      span.finish = (endTimestamp?: number) => {\n        span.endTimestamp = typeof endTimestamp === 'number' ? endTimestamp : timestampInSeconds();\n        this._popActivity(span.spanId);\n      };\n\n      // We should only push new activities if the span does not have an end timestamp.\n      if (span.endTimestamp === undefined) {\n        this._pushActivity(span.spanId);\n      }\n    }\n\n    super.add(span);\n  }\n}\n\nexport type BeforeFinishCallback = (transactionSpan: IdleTransaction, endTimestamp: number) => void;\n\n/**\n * An IdleTransaction is a transaction that automatically finishes. It does this by tracking child spans as activities.\n * You can have multiple IdleTransactions active, but if the `onScope` option is specified, the idle transaction will\n * put itself on the scope on creation.\n */\nexport class IdleTransaction extends Transaction {\n  // Activities store a list of active spans\n  public activities: Record<string, boolean> = {};\n\n  // Track state of activities in previous heartbeat\n  private _prevHeartbeatString: string | undefined;\n\n  // Amount of times heartbeat has counted. Will cause transaction to finish after 3 beats.\n  private _heartbeatCounter: number = 0;\n\n  // We should not use heartbeat if we finished a transaction\n  private _finished: boolean = false;\n\n  // Idle timeout was canceled and we should finish the transaction with the last span end.\n  private _idleTimeoutCanceledPermanently: boolean = false;\n\n  private readonly _beforeFinishCallbacks: BeforeFinishCallback[] = [];\n\n  /**\n   * Timer that tracks Transaction idleTimeout\n   */\n  private _idleTimeoutID: ReturnType<typeof setTimeout> | undefined;\n\n  private _finishReason: (typeof IDLE_TRANSACTION_FINISH_REASONS)[number] = IDLE_TRANSACTION_FINISH_REASONS[4];\n\n  public constructor(\n    transactionContext: TransactionContext,\n    private readonly _idleHub: Hub,\n    /**\n     * The time to wait in ms until the idle transaction will be finished. This timer is started each time\n     * there are no active spans on this transaction.\n     */\n    private readonly _idleTimeout: number = TRACING_DEFAULTS.idleTimeout,\n    /**\n     * The final value in ms that a transaction cannot exceed\n     */\n    private readonly _finalTimeout: number = TRACING_DEFAULTS.finalTimeout,\n    private readonly _heartbeatInterval: number = TRACING_DEFAULTS.heartbeatInterval,\n    // Whether or not the transaction should put itself on the scope when it starts and pop itself off when it ends\n    private readonly _onScope: boolean = false,\n  ) {\n    super(transactionContext, _idleHub);\n\n    if (_onScope) {\n      // We set the transaction here on the scope so error events pick up the trace\n      // context and attach it to the error.\n      __DEBUG_BUILD__ && logger.log(`Setting idle transaction on scope. Span ID: ${this.spanId}`);\n      _idleHub.configureScope(scope => scope.setSpan(this));\n    }\n\n    this._restartIdleTimeout();\n    setTimeout(() => {\n      if (!this._finished) {\n        this.setStatus('deadline_exceeded');\n        this._finishReason = IDLE_TRANSACTION_FINISH_REASONS[3];\n        this.finish();\n      }\n    }, this._finalTimeout);\n  }\n\n  /** {@inheritDoc} */\n  public finish(endTimestamp: number = timestampInSeconds()): string | undefined {\n    this._finished = true;\n    this.activities = {};\n\n    if (this.op === 'ui.action.click') {\n      this.setTag(FINISH_REASON_TAG, this._finishReason);\n    }\n\n    if (this.spanRecorder) {\n      __DEBUG_BUILD__ &&\n        logger.log('[Tracing] finishing IdleTransaction', new Date(endTimestamp * 1000).toISOString(), this.op);\n\n      for (const callback of this._beforeFinishCallbacks) {\n        callback(this, endTimestamp);\n      }\n\n      this.spanRecorder.spans = this.spanRecorder.spans.filter((span: Span) => {\n        // If we are dealing with the transaction itself, we just return it\n        if (span.spanId === this.spanId) {\n          return true;\n        }\n\n        // We cancel all pending spans with status \"cancelled\" to indicate the idle transaction was finished early\n        if (!span.endTimestamp) {\n          span.endTimestamp = endTimestamp;\n          span.setStatus('cancelled');\n          __DEBUG_BUILD__ &&\n            logger.log('[Tracing] cancelling span since transaction ended early', JSON.stringify(span, undefined, 2));\n        }\n\n        const keepSpan = span.startTimestamp < endTimestamp;\n        if (!keepSpan) {\n          __DEBUG_BUILD__ &&\n            logger.log(\n              '[Tracing] discarding Span since it happened after Transaction was finished',\n              JSON.stringify(span, undefined, 2),\n            );\n        }\n        return keepSpan;\n      });\n\n      __DEBUG_BUILD__ && logger.log('[Tracing] flushing IdleTransaction');\n    } else {\n      __DEBUG_BUILD__ && logger.log('[Tracing] No active IdleTransaction');\n    }\n\n    // if `this._onScope` is `true`, the transaction put itself on the scope when it started\n    if (this._onScope) {\n      const scope = this._idleHub.getScope();\n      if (scope.getTransaction() === this) {\n        scope.setSpan(undefined);\n      }\n    }\n\n    return super.finish(endTimestamp);\n  }\n\n  /**\n   * Register a callback function that gets excecuted before the transaction finishes.\n   * Useful for cleanup or if you want to add any additional spans based on current context.\n   *\n   * This is exposed because users have no other way of running something before an idle transaction\n   * finishes.\n   */\n  public registerBeforeFinishCallback(callback: BeforeFinishCallback): void {\n    this._beforeFinishCallbacks.push(callback);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public initSpanRecorder(maxlen?: number): void {\n    if (!this.spanRecorder) {\n      const pushActivity = (id: string): void => {\n        if (this._finished) {\n          return;\n        }\n        this._pushActivity(id);\n      };\n      const popActivity = (id: string): void => {\n        if (this._finished) {\n          return;\n        }\n        this._popActivity(id);\n      };\n\n      this.spanRecorder = new IdleTransactionSpanRecorder(pushActivity, popActivity, this.spanId, maxlen);\n\n      // Start heartbeat so that transactions do not run forever.\n      __DEBUG_BUILD__ && logger.log('Starting heartbeat');\n      this._pingHeartbeat();\n    }\n    this.spanRecorder.add(this);\n  }\n\n  /**\n   * Cancels the existing idle timeout, if there is one.\n   * @param restartOnChildSpanChange Default is `true`.\n   *                                 If set to false the transaction will end\n   *                                 with the last child span.\n   */\n  public cancelIdleTimeout(\n    endTimestamp?: Parameters<IdleTransaction['finish']>[0],\n    {\n      restartOnChildSpanChange,\n    }: {\n      restartOnChildSpanChange?: boolean;\n    } = {\n      restartOnChildSpanChange: true,\n    },\n  ): void {\n    this._idleTimeoutCanceledPermanently = restartOnChildSpanChange === false;\n    if (this._idleTimeoutID) {\n      clearTimeout(this._idleTimeoutID);\n      this._idleTimeoutID = undefined;\n\n      if (Object.keys(this.activities).length === 0 && this._idleTimeoutCanceledPermanently) {\n        this._finishReason = IDLE_TRANSACTION_FINISH_REASONS[5];\n        this.finish(endTimestamp);\n      }\n    }\n  }\n\n  /**\n   * Temporary method used to externally set the transaction's `finishReason`\n   *\n   * ** WARNING**\n   * This is for the purpose of experimentation only and will be removed in the near future, do not use!\n   *\n   * @internal\n   *\n   */\n  public setFinishReason(reason: string): void {\n    this._finishReason = reason;\n  }\n\n  /**\n   * Restarts idle timeout, if there is no running idle timeout it will start one.\n   */\n  private _restartIdleTimeout(endTimestamp?: Parameters<IdleTransaction['finish']>[0]): void {\n    this.cancelIdleTimeout();\n    this._idleTimeoutID = setTimeout(() => {\n      if (!this._finished && Object.keys(this.activities).length === 0) {\n        this._finishReason = IDLE_TRANSACTION_FINISH_REASONS[1];\n        this.finish(endTimestamp);\n      }\n    }, this._idleTimeout);\n  }\n\n  /**\n   * Start tracking a specific activity.\n   * @param spanId The span id that represents the activity\n   */\n  private _pushActivity(spanId: string): void {\n    this.cancelIdleTimeout(undefined, { restartOnChildSpanChange: !this._idleTimeoutCanceledPermanently });\n    __DEBUG_BUILD__ && logger.log(`[Tracing] pushActivity: ${spanId}`);\n    this.activities[spanId] = true;\n    __DEBUG_BUILD__ && logger.log('[Tracing] new activities count', Object.keys(this.activities).length);\n  }\n\n  /**\n   * Remove an activity from usage\n   * @param spanId The span id that represents the activity\n   */\n  private _popActivity(spanId: string): void {\n    if (this.activities[spanId]) {\n      __DEBUG_BUILD__ && logger.log(`[Tracing] popActivity ${spanId}`);\n      // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n      delete this.activities[spanId];\n      __DEBUG_BUILD__ && logger.log('[Tracing] new activities count', Object.keys(this.activities).length);\n    }\n\n    if (Object.keys(this.activities).length === 0) {\n      const endTimestamp = timestampInSeconds();\n      if (this._idleTimeoutCanceledPermanently) {\n        this._finishReason = IDLE_TRANSACTION_FINISH_REASONS[5];\n        this.finish(endTimestamp);\n      } else {\n        // We need to add the timeout here to have the real endtimestamp of the transaction\n        // Remember timestampInSeconds is in seconds, timeout is in ms\n        this._restartIdleTimeout(endTimestamp + this._idleTimeout / 1000);\n      }\n    }\n  }\n\n  /**\n   * Checks when entries of this.activities are not changing for 3 beats.\n   * If this occurs we finish the transaction.\n   */\n  private _beat(): void {\n    // We should not be running heartbeat if the idle transaction is finished.\n    if (this._finished) {\n      return;\n    }\n\n    const heartbeatString = Object.keys(this.activities).join('');\n\n    if (heartbeatString === this._prevHeartbeatString) {\n      this._heartbeatCounter++;\n    } else {\n      this._heartbeatCounter = 1;\n    }\n\n    this._prevHeartbeatString = heartbeatString;\n\n    if (this._heartbeatCounter >= 3) {\n      __DEBUG_BUILD__ && logger.log('[Tracing] Transaction finished because of no change for 3 heart beats');\n      this.setStatus('deadline_exceeded');\n      this._finishReason = IDLE_TRANSACTION_FINISH_REASONS[0];\n      this.finish();\n    } else {\n      this._pingHeartbeat();\n    }\n  }\n\n  /**\n   * Pings the heartbeat\n   */\n  private _pingHeartbeat(): void {\n    __DEBUG_BUILD__ && logger.log(`pinging Heartbeat -> current counter: ${this._heartbeatCounter}`);\n    setTimeout(() => {\n      this._beat();\n    }, this._heartbeatInterval);\n  }\n}\n","import type { Options } from '@sentry/types';\n\nimport { getCurrentHub } from '../hub';\n\n// Treeshakable guard to remove all code related to tracing\ndeclare const __SENTRY_TRACING__: boolean | undefined;\n\n/**\n * Determines if tracing is currently enabled.\n *\n * Tracing is enabled when at least one of `tracesSampleRate` and `tracesSampler` is defined in the SDK config.\n */\nexport function hasTracingEnabled(\n  maybeOptions?: Pick<Options, 'tracesSampleRate' | 'tracesSampler' | 'enableTracing'> | undefined,\n): boolean {\n  if (typeof __SENTRY_TRACING__ === 'boolean' && !__SENTRY_TRACING__) {\n    return false;\n  }\n\n  const client = getCurrentHub().getClient();\n  const options = maybeOptions || (client && client.getOptions());\n  return !!options && (options.enableTracing || 'tracesSampleRate' in options || 'tracesSampler' in options);\n}\n","import type { Transaction } from '@sentry/types';\n\nimport type { Hub } from '../hub';\nimport { getCurrentHub } from '../hub';\n\n/**\n * The `extractTraceparentData` function and `TRACEPARENT_REGEXP` constant used\n * to be declared in this file. It was later moved into `@sentry/utils` as part of a\n * move to remove `@sentry/tracing` dependencies from `@sentry/node` (`extractTraceparentData`\n * is the only tracing function used by `@sentry/node`).\n *\n * These exports are kept here for backwards compatability's sake.\n *\n * TODO(v7): Reorganize these exports\n *\n * See https://github.com/getsentry/sentry-javascript/issues/4642 for more details.\n */\nexport { TRACEPARENT_REGEXP, extractTraceparentData } from '@sentry/utils';\n\n/** Grabs active transaction off scope, if any */\nexport function getActiveTransaction<T extends Transaction>(maybeHub?: Hub): T | undefined {\n  const hub = maybeHub || getCurrentHub();\n  const scope = hub.getScope();\n  return scope.getTransaction() as T | undefined;\n}\n\n// so it can be used in manual instrumentation without necessitating a hard dependency on @sentry/utils\nexport { stripUrlQueryAndFragment } from '@sentry/utils';\n","import { addInstrumentationHandler, logger } from '@sentry/utils';\n\nimport type { SpanStatusType } from './span';\nimport { getActiveTransaction } from './utils';\n\nlet errorsInstrumented = false;\n\n/**\n * Configures global error listeners\n */\nexport function registerErrorInstrumentation(): void {\n  if (errorsInstrumented) {\n    return;\n  }\n\n  errorsInstrumented = true;\n  addInstrumentationHandler('error', errorCallback);\n  addInstrumentationHandler('unhandledrejection', errorCallback);\n}\n\n/**\n * If an error or unhandled promise occurs, we mark the active transaction as failed\n */\nfunction errorCallback(): void {\n  const activeTransaction = getActiveTransaction();\n  if (activeTransaction) {\n    const status: SpanStatusType = 'internal_error';\n    __DEBUG_BUILD__ && logger.log(`[Tracing] Transaction: ${status} -> Global error occured`);\n    activeTransaction.setStatus(status);\n  }\n}\n\n// The function name will be lost when bundling but we need to be able to identify this listener later to maintain the\n// node.js default exit behaviour\nerrorCallback.tag = 'sentry_tracingErrorCallback';\n","import type { ClientOptions, CustomSamplingContext, Options, SamplingContext, TransactionContext } from '@sentry/types';\nimport { isNaN, logger } from '@sentry/utils';\n\nimport type { Hub } from '../hub';\nimport { getMainCarrier } from '../hub';\nimport { hasTracingEnabled } from '../utils/hasTracingEnabled';\nimport { registerErrorInstrumentation } from './errors';\nimport { IdleTransaction } from './idletransaction';\nimport { Transaction } from './transaction';\n\n/** Returns all trace headers that are currently on the top scope. */\nfunction traceHeaders(this: Hub): { [key: string]: string } {\n  const scope = this.getScope();\n  const span = scope.getSpan();\n\n  return span\n    ? {\n        'sentry-trace': span.toTraceparent(),\n      }\n    : {};\n}\n\n/**\n * Makes a sampling decision for the given transaction and stores it on the transaction.\n *\n * Called every time a transaction is created. Only transactions which emerge with a `sampled` value of `true` will be\n * sent to Sentry.\n *\n * @param transaction: The transaction needing a sampling decision\n * @param options: The current client's options, so we can access `tracesSampleRate` and/or `tracesSampler`\n * @param samplingContext: Default and user-provided data which may be used to help make the decision\n *\n * @returns The given transaction with its `sampled` value set\n */\nfunction sample<T extends Transaction>(\n  transaction: T,\n  options: Pick<Options, 'tracesSampleRate' | 'tracesSampler' | 'enableTracing'>,\n  samplingContext: SamplingContext,\n): T {\n  // nothing to do if tracing is not enabled\n  if (!hasTracingEnabled(options)) {\n    transaction.sampled = false;\n    return transaction;\n  }\n\n  // if the user has forced a sampling decision by passing a `sampled` value in their transaction context, go with that\n  if (transaction.sampled !== undefined) {\n    transaction.setMetadata({\n      sampleRate: Number(transaction.sampled),\n    });\n    return transaction;\n  }\n\n  // we would have bailed already if neither `tracesSampler` nor `tracesSampleRate` nor `enableTracing` were defined, so one of these should\n  // work; prefer the hook if so\n  let sampleRate;\n  if (typeof options.tracesSampler === 'function') {\n    sampleRate = options.tracesSampler(samplingContext);\n    transaction.setMetadata({\n      sampleRate: Number(sampleRate),\n    });\n  } else if (samplingContext.parentSampled !== undefined) {\n    sampleRate = samplingContext.parentSampled;\n  } else if (typeof options.tracesSampleRate !== 'undefined') {\n    sampleRate = options.tracesSampleRate;\n    transaction.setMetadata({\n      sampleRate: Number(sampleRate),\n    });\n  } else {\n    // When `enableTracing === true`, we use a sample rate of 100%\n    sampleRate = 1;\n    transaction.setMetadata({\n      sampleRate,\n    });\n  }\n\n  // Since this is coming from the user (or from a function provided by the user), who knows what we might get. (The\n  // only valid values are booleans or numbers between 0 and 1.)\n  if (!isValidSampleRate(sampleRate)) {\n    __DEBUG_BUILD__ && logger.warn('[Tracing] Discarding transaction because of invalid sample rate.');\n    transaction.sampled = false;\n    return transaction;\n  }\n\n  // if the function returned 0 (or false), or if `tracesSampleRate` is 0, it's a sign the transaction should be dropped\n  if (!sampleRate) {\n    __DEBUG_BUILD__ &&\n      logger.log(\n        `[Tracing] Discarding transaction because ${\n          typeof options.tracesSampler === 'function'\n            ? 'tracesSampler returned 0 or false'\n            : 'a negative sampling decision was inherited or tracesSampleRate is set to 0'\n        }`,\n      );\n    transaction.sampled = false;\n    return transaction;\n  }\n\n  // Now we roll the dice. Math.random is inclusive of 0, but not of 1, so strict < is safe here. In case sampleRate is\n  // a boolean, the < comparison will cause it to be automatically cast to 1 if it's true and 0 if it's false.\n  transaction.sampled = Math.random() < (sampleRate as number | boolean);\n\n  // if we're not going to keep it, we're done\n  if (!transaction.sampled) {\n    __DEBUG_BUILD__ &&\n      logger.log(\n        `[Tracing] Discarding transaction because it's not included in the random sample (sampling rate = ${Number(\n          sampleRate,\n        )})`,\n      );\n    return transaction;\n  }\n\n  __DEBUG_BUILD__ && logger.log(`[Tracing] starting ${transaction.op} transaction - ${transaction.name}`);\n  return transaction;\n}\n\n/**\n * Checks the given sample rate to make sure it is valid type and value (a boolean, or a number between 0 and 1).\n */\nfunction isValidSampleRate(rate: unknown): boolean {\n  // we need to check NaN explicitly because it's of type 'number' and therefore wouldn't get caught by this typecheck\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  if (isNaN(rate) || !(typeof rate === 'number' || typeof rate === 'boolean')) {\n    __DEBUG_BUILD__ &&\n      logger.warn(\n        `[Tracing] Given sample rate is invalid. Sample rate must be a boolean or a number between 0 and 1. Got ${JSON.stringify(\n          rate,\n        )} of type ${JSON.stringify(typeof rate)}.`,\n      );\n    return false;\n  }\n\n  // in case sampleRate is a boolean, it will get automatically cast to 1 if it's true and 0 if it's false\n  if (rate < 0 || rate > 1) {\n    __DEBUG_BUILD__ &&\n      logger.warn(`[Tracing] Given sample rate is invalid. Sample rate must be between 0 and 1. Got ${rate}.`);\n    return false;\n  }\n  return true;\n}\n\n/**\n * Creates a new transaction and adds a sampling decision if it doesn't yet have one.\n *\n * The Hub.startTransaction method delegates to this method to do its work, passing the Hub instance in as `this`, as if\n * it had been called on the hub directly. Exists as a separate function so that it can be injected into the class as an\n * \"extension method.\"\n *\n * @param this: The Hub starting the transaction\n * @param transactionContext: Data used to configure the transaction\n * @param CustomSamplingContext: Optional data to be provided to the `tracesSampler` function (if any)\n *\n * @returns The new transaction\n *\n * @see {@link Hub.startTransaction}\n */\nfunction _startTransaction(\n  this: Hub,\n  transactionContext: TransactionContext,\n  customSamplingContext?: CustomSamplingContext,\n): Transaction {\n  const client = this.getClient();\n  const options: Partial<ClientOptions> = (client && client.getOptions()) || {};\n\n  const configInstrumenter = options.instrumenter || 'sentry';\n  const transactionInstrumenter = transactionContext.instrumenter || 'sentry';\n\n  if (configInstrumenter !== transactionInstrumenter) {\n    __DEBUG_BUILD__ &&\n      logger.error(\n        `A transaction was started with instrumenter=\\`${transactionInstrumenter}\\`, but the SDK is configured with the \\`${configInstrumenter}\\` instrumenter.\nThe transaction will not be sampled. Please use the ${configInstrumenter} instrumentation to start transactions.`,\n      );\n\n    transactionContext.sampled = false;\n  }\n\n  let transaction = new Transaction(transactionContext, this);\n  transaction = sample(transaction, options, {\n    parentSampled: transactionContext.parentSampled,\n    transactionContext,\n    ...customSamplingContext,\n  });\n  if (transaction.sampled) {\n    transaction.initSpanRecorder(options._experiments && (options._experiments.maxSpans as number));\n  }\n  if (client && client.emit) {\n    client.emit('startTransaction', transaction);\n  }\n  return transaction;\n}\n\n/**\n * Create new idle transaction.\n */\nexport function startIdleTransaction(\n  hub: Hub,\n  transactionContext: TransactionContext,\n  idleTimeout: number,\n  finalTimeout: number,\n  onScope?: boolean,\n  customSamplingContext?: CustomSamplingContext,\n  heartbeatInterval?: number,\n): IdleTransaction {\n  const client = hub.getClient();\n  const options: Partial<ClientOptions> = (client && client.getOptions()) || {};\n\n  let transaction = new IdleTransaction(transactionContext, hub, idleTimeout, finalTimeout, heartbeatInterval, onScope);\n  transaction = sample(transaction, options, {\n    parentSampled: transactionContext.parentSampled,\n    transactionContext,\n    ...customSamplingContext,\n  });\n  if (transaction.sampled) {\n    transaction.initSpanRecorder(options._experiments && (options._experiments.maxSpans as number));\n  }\n  if (client && client.emit) {\n    client.emit('startTransaction', transaction);\n  }\n  return transaction;\n}\n\n/**\n * Adds tracing extensions to the global hub.\n */\nexport function addTracingExtensions(): void {\n  const carrier = getMainCarrier();\n  if (!carrier.__SENTRY__) {\n    return;\n  }\n  carrier.__SENTRY__.extensions = carrier.__SENTRY__.extensions || {};\n  if (!carrier.__SENTRY__.extensions.startTransaction) {\n    carrier.__SENTRY__.extensions.startTransaction = _startTransaction;\n  }\n  if (!carrier.__SENTRY__.extensions.traceHeaders) {\n    carrier.__SENTRY__.extensions.traceHeaders = traceHeaders;\n  }\n\n  registerErrorInstrumentation();\n}\n","import type { TraceparentData } from '@sentry/types';\n\nexport const TRACEPARENT_REGEXP = new RegExp(\n  '^[ \\\\t]*' + // whitespace\n    '([0-9a-f]{32})?' + // trace_id\n    '-?([0-9a-f]{16})?' + // span_id\n    '-?([01])?' + // sampled\n    '[ \\\\t]*$', // whitespace\n);\n\n/**\n * Extract transaction context data from a `sentry-trace` header.\n *\n * @param traceparent Traceparent string\n *\n * @returns Object containing data from the header, or undefined if traceparent string is malformed\n */\nexport function extractTraceparentData(traceparent: string): TraceparentData | undefined {\n  const matches = traceparent.match(TRACEPARENT_REGEXP);\n\n  if (!traceparent || !matches) {\n    // empty string or no matches is invalid traceparent data\n    return undefined;\n  }\n\n  let parentSampled: boolean | undefined;\n  if (matches[3] === '1') {\n    parentSampled = true;\n  } else if (matches[3] === '0') {\n    parentSampled = false;\n  }\n\n  return {\n    traceId: matches[1],\n    parentSampled,\n    parentSpanId: matches[2],\n  };\n}\n","import type { DynamicSamplingContext } from '@sentry/types';\n\nimport { isString } from './is';\nimport { logger } from './logger';\n\nexport const BAGGAGE_HEADER_NAME = 'baggage';\n\nexport const SENTRY_BAGGAGE_KEY_PREFIX = 'sentry-';\n\nexport const SENTRY_BAGGAGE_KEY_PREFIX_REGEX = /^sentry-/;\n\n/**\n * Max length of a serialized baggage string\n *\n * https://www.w3.org/TR/baggage/#limits\n */\nexport const MAX_BAGGAGE_STRING_LENGTH = 8192;\n\n/**\n * Takes a baggage header and turns it into Dynamic Sampling Context, by extracting all the \"sentry-\" prefixed values\n * from it.\n *\n * @param baggageHeader A very bread definition of a baggage header as it might appear in various frameworks.\n * @returns The Dynamic Sampling Context that was found on `baggageHeader`, if there was any, `undefined` otherwise.\n */\nexport function baggageHeaderToDynamicSamplingContext(\n  // Very liberal definition of what any incoming header might look like\n  baggageHeader: string | string[] | number | null | undefined | boolean,\n): Partial<DynamicSamplingContext> | undefined {\n  if (!isString(baggageHeader) && !Array.isArray(baggageHeader)) {\n    return undefined;\n  }\n\n  // Intermediary object to store baggage key value pairs of incoming baggage headers on.\n  // It is later used to read Sentry-DSC-values from.\n  let baggageObject: Readonly<Record<string, string>> = {};\n\n  if (Array.isArray(baggageHeader)) {\n    // Combine all baggage headers into one object containing the baggage values so we can later read the Sentry-DSC-values from it\n    baggageObject = baggageHeader.reduce<Record<string, string>>((acc, curr) => {\n      const currBaggageObject = baggageHeaderToObject(curr);\n      return {\n        ...acc,\n        ...currBaggageObject,\n      };\n    }, {});\n  } else {\n    // Return undefined if baggage header is an empty string (technically an empty baggage header is not spec conform but\n    // this is how we choose to handle it)\n    if (!baggageHeader) {\n      return undefined;\n    }\n\n    baggageObject = baggageHeaderToObject(baggageHeader);\n  }\n\n  // Read all \"sentry-\" prefixed values out of the baggage object and put it onto a dynamic sampling context object.\n  const dynamicSamplingContext = Object.entries(baggageObject).reduce<Record<string, string>>((acc, [key, value]) => {\n    if (key.match(SENTRY_BAGGAGE_KEY_PREFIX_REGEX)) {\n      const nonPrefixedKey = key.slice(SENTRY_BAGGAGE_KEY_PREFIX.length);\n      acc[nonPrefixedKey] = value;\n    }\n    return acc;\n  }, {});\n\n  // Only return a dynamic sampling context object if there are keys in it.\n  // A keyless object means there were no sentry values on the header, which means that there is no DSC.\n  if (Object.keys(dynamicSamplingContext).length > 0) {\n    return dynamicSamplingContext as Partial<DynamicSamplingContext>;\n  } else {\n    return undefined;\n  }\n}\n\n/**\n * Turns a Dynamic Sampling Object into a baggage header by prefixing all the keys on the object with \"sentry-\".\n *\n * @param dynamicSamplingContext The Dynamic Sampling Context to turn into a header. For convenience and compatibility\n * with the `getDynamicSamplingContext` method on the Transaction class ,this argument can also be `undefined`. If it is\n * `undefined` the function will return `undefined`.\n * @returns a baggage header, created from `dynamicSamplingContext`, or `undefined` either if `dynamicSamplingContext`\n * was `undefined`, or if `dynamicSamplingContext` didn't contain any values.\n */\nexport function dynamicSamplingContextToSentryBaggageHeader(\n  // this also takes undefined for convenience and bundle size in other places\n  dynamicSamplingContext: Partial<DynamicSamplingContext>,\n): string | undefined {\n  // Prefix all DSC keys with \"sentry-\" and put them into a new object\n  const sentryPrefixedDSC = Object.entries(dynamicSamplingContext).reduce<Record<string, string>>(\n    (acc, [dscKey, dscValue]) => {\n      if (dscValue) {\n        acc[`${SENTRY_BAGGAGE_KEY_PREFIX}${dscKey}`] = dscValue;\n      }\n      return acc;\n    },\n    {},\n  );\n\n  return objectToBaggageHeader(sentryPrefixedDSC);\n}\n\n/**\n * Will parse a baggage header, which is a simple key-value map, into a flat object.\n *\n * @param baggageHeader The baggage header to parse.\n * @returns a flat object containing all the key-value pairs from `baggageHeader`.\n */\nfunction baggageHeaderToObject(baggageHeader: string): Record<string, string> {\n  return baggageHeader\n    .split(',')\n    .map(baggageEntry => baggageEntry.split('=').map(keyOrValue => decodeURIComponent(keyOrValue.trim())))\n    .reduce<Record<string, string>>((acc, [key, value]) => {\n      acc[key] = value;\n      return acc;\n    }, {});\n}\n\n/**\n * Turns a flat object (key-value pairs) into a baggage header, which is also just key-value pairs.\n *\n * @param object The object to turn into a baggage header.\n * @returns a baggage header string, or `undefined` if the object didn't have any values, since an empty baggage header\n * is not spec compliant.\n */\nfunction objectToBaggageHeader(object: Record<string, string>): string | undefined {\n  if (Object.keys(object).length === 0) {\n    // An empty baggage header is not spec compliant: We return undefined.\n    return undefined;\n  }\n\n  return Object.entries(object).reduce((baggageHeader, [objectKey, objectValue], currentIndex) => {\n    const baggageEntry = `${encodeURIComponent(objectKey)}=${encodeURIComponent(objectValue)}`;\n    const newBaggageHeader = currentIndex === 0 ? baggageEntry : `${baggageHeader},${baggageEntry}`;\n    if (newBaggageHeader.length > MAX_BAGGAGE_STRING_LENGTH) {\n      __DEBUG_BUILD__ &&\n        logger.warn(\n          `Not adding key: ${objectKey} with val: ${objectValue} to baggage header due to exceeding baggage size limits.`,\n        );\n      return baggageHeader;\n    } else {\n      return newBaggageHeader;\n    }\n  }, '');\n}\n","import { GLOBAL_OBJ } from '@sentry/utils';\n\nexport const WINDOW = GLOBAL_OBJ as typeof GLOBAL_OBJ & Window;\n","/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { Metric, ReportCallback } from '../types';\n\nexport const bindReporter = (\n  callback: ReportCallback,\n  metric: Metric,\n  reportAllChanges?: boolean,\n): ((forceReport?: boolean) => void) => {\n  let prevValue: number;\n  let delta: number;\n  return (forceReport?: boolean) => {\n    if (metric.value >= 0) {\n      if (forceReport || reportAllChanges) {\n        delta = metric.value - (prevValue || 0);\n\n        // Report the metric if there's a non-zero delta or if no previous\n        // value exists (which can happen in the case of the document becoming\n        // hidden when the metric value is 0).\n        // See: https://github.com/GoogleChrome/web-vitals/issues/14\n        if (delta || prevValue === undefined) {\n          prevValue = metric.value;\n          metric.delta = delta;\n          callback(metric);\n        }\n      }\n    }\n  };\n};\n","/*\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { WINDOW } from '../../types';\nimport type { NavigationTimingPolyfillEntry } from '../types';\n\nconst getNavigationEntryFromPerformanceTiming = (): NavigationTimingPolyfillEntry => {\n  // eslint-disable-next-line deprecation/deprecation\n  const timing = WINDOW.performance.timing;\n  // eslint-disable-next-line deprecation/deprecation\n  const type = WINDOW.performance.navigation.type;\n\n  const navigationEntry: { [key: string]: number | string } = {\n    entryType: 'navigation',\n    startTime: 0,\n    type: type == 2 ? 'back_forward' : type === 1 ? 'reload' : 'navigate',\n  };\n\n  for (const key in timing) {\n    if (key !== 'navigationStart' && key !== 'toJSON') {\n      navigationEntry[key] = Math.max((timing[key as keyof PerformanceTiming] as number) - timing.navigationStart, 0);\n    }\n  }\n  return navigationEntry as unknown as NavigationTimingPolyfillEntry;\n};\n\nexport const getNavigationEntry = (): PerformanceNavigationTiming | NavigationTimingPolyfillEntry | undefined => {\n  if (WINDOW.__WEB_VITALS_POLYFILL__) {\n    return (\n      WINDOW.performance &&\n      ((performance.getEntriesByType && performance.getEntriesByType('navigation')[0]) ||\n        getNavigationEntryFromPerformanceTiming())\n    );\n  } else {\n    return WINDOW.performance && performance.getEntriesByType && performance.getEntriesByType('navigation')[0];\n  }\n};\n","/*\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getNavigationEntry } from './getNavigationEntry';\n\nexport const getActivationStart = (): number => {\n  const navEntry = getNavigationEntry();\n  return (navEntry && navEntry.activationStart) || 0;\n};\n","/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { WINDOW } from '../../types';\nimport type { Metric } from '../types';\nimport { generateUniqueID } from './generateUniqueID';\nimport { getActivationStart } from './getActivationStart';\nimport { getNavigationEntry } from './getNavigationEntry';\n\nexport const initMetric = (name: Metric['name'], value?: number): Metric => {\n  const navEntry = getNavigationEntry();\n  let navigationType: Metric['navigationType'] = 'navigate';\n\n  if (navEntry) {\n    if (WINDOW.document.prerendering || getActivationStart() > 0) {\n      navigationType = 'prerender';\n    } else {\n      navigationType = navEntry.type.replace(/_/g, '-') as Metric['navigationType'];\n    }\n  }\n\n  return {\n    name,\n    value: typeof value === 'undefined' ? -1 : value,\n    rating: 'good', // Will be updated if the value changes.\n    delta: 0,\n    entries: [],\n    id: generateUniqueID(),\n    navigationType,\n  };\n};\n","/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Performantly generate a unique, 30-char string by combining a version\n * number, the current timestamp with a 13-digit number integer.\n * @return {string}\n */\nexport const generateUniqueID = (): string => {\n  return `v3-${Date.now()}-${Math.floor(Math.random() * (9e12 - 1)) + 1e12}`;\n};\n","/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { FirstInputPolyfillEntry, NavigationTimingPolyfillEntry, PerformancePaintTiming } from '../types';\n\nexport interface PerformanceEntryHandler {\n  (entry: PerformanceEntry): void;\n}\n\ninterface PerformanceEntryMap {\n  event: PerformanceEventTiming[];\n  paint: PerformancePaintTiming[];\n  'layout-shift': LayoutShift[];\n  'largest-contentful-paint': LargestContentfulPaint[];\n  'first-input': PerformanceEventTiming[] | FirstInputPolyfillEntry[];\n  navigation: PerformanceNavigationTiming[] | NavigationTimingPolyfillEntry[];\n  resource: PerformanceResourceTiming[];\n  longtask: PerformanceEntry[];\n}\n\n/**\n * Takes a performance entry type and a callback function, and creates a\n * `PerformanceObserver` instance that will observe the specified entry type\n * with buffering enabled and call the callback _for each entry_.\n *\n * This function also feature-detects entry support and wraps the logic in a\n * try/catch to avoid errors in unsupporting browsers.\n */\nexport const observe = <K extends keyof PerformanceEntryMap>(\n  type: K,\n  callback: (entries: PerformanceEntryMap[K]) => void,\n  opts?: PerformanceObserverInit,\n): PerformanceObserver | undefined => {\n  try {\n    if (PerformanceObserver.supportedEntryTypes.includes(type)) {\n      const po = new PerformanceObserver(list => {\n        callback(list.getEntries() as PerformanceEntryMap[K]);\n      });\n      po.observe(\n        Object.assign(\n          {\n            type,\n            buffered: true,\n          },\n          opts || {},\n        ) as PerformanceObserverInit,\n      );\n      return po;\n    }\n  } catch (e) {\n    // Do nothing.\n  }\n  return;\n};\n","/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { WINDOW } from '../../types';\n\nexport interface OnHiddenCallback {\n  (event: Event): void;\n}\n\nexport const onHidden = (cb: OnHiddenCallback, once?: boolean): void => {\n  const onHiddenOrPageHide = (event: Event): void => {\n    if (event.type === 'pagehide' || WINDOW.document.visibilityState === 'hidden') {\n      cb(event);\n      if (once) {\n        removeEventListener('visibilitychange', onHiddenOrPageHide, true);\n        removeEventListener('pagehide', onHiddenOrPageHide, true);\n      }\n    }\n  };\n  addEventListener('visibilitychange', onHiddenOrPageHide, true);\n  // Some browsers have buggy implementations of visibilitychange,\n  // so we use pagehide in addition, just to be safe.\n  addEventListener('pagehide', onHiddenOrPageHide, true);\n};\n","/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { WINDOW } from '../../types';\nimport { onHidden } from './onHidden';\n\nlet firstHiddenTime = -1;\n\nconst initHiddenTime = (): number => {\n  // If the document is hidden and not prerendering, assume it was always\n  // hidden and the page was loaded in the background.\n  return WINDOW.document.visibilityState === 'hidden' && !WINDOW.document.prerendering ? 0 : Infinity;\n};\n\nconst trackChanges = (): void => {\n  // Update the time if/when the document becomes hidden.\n  onHidden(({ timeStamp }) => {\n    firstHiddenTime = timeStamp;\n  }, true);\n};\n\nexport const getVisibilityWatcher = (): {\n  readonly firstHiddenTime: number;\n} => {\n  if (firstHiddenTime < 0) {\n    // If the document is hidden when this code runs, assume it was hidden\n    // since navigation start. This isn't a perfect heuristic, but it's the\n    // best we can do until an API is available to support querying past\n    // visibilityState.\n    firstHiddenTime = initHiddenTime();\n    trackChanges();\n  }\n  return {\n    get firstHiddenTime() {\n      return firstHiddenTime;\n    },\n  };\n};\n","/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { bindReporter } from './lib/bindReporter';\nimport { getActivationStart } from './lib/getActivationStart';\nimport { getVisibilityWatcher } from './lib/getVisibilityWatcher';\nimport { initMetric } from './lib/initMetric';\nimport { observe } from './lib/observe';\nimport { onHidden } from './lib/onHidden';\nimport type { LCPMetric, ReportCallback, StopListening } from './types';\n\nconst reportedMetricIDs: Record<string, boolean> = {};\n\n/**\n * Calculates the [LCP](https://web.dev/lcp/) value for the current page and\n * calls the `callback` function once the value is ready (along with the\n * relevant `largest-contentful-paint` performance entry used to determine the\n * value). The reported value is a `DOMHighResTimeStamp`.\n */\nexport const onLCP = (onReport: ReportCallback): StopListening | undefined => {\n  const visibilityWatcher = getVisibilityWatcher();\n  const metric = initMetric('LCP');\n  let report: ReturnType<typeof bindReporter>;\n\n  const handleEntries = (entries: LCPMetric['entries']): void => {\n    const lastEntry = entries[entries.length - 1] as LargestContentfulPaint;\n    if (lastEntry) {\n      // The startTime attribute returns the value of the renderTime if it is\n      // not 0, and the value of the loadTime otherwise. The activationStart\n      // reference is used because LCP should be relative to page activation\n      // rather than navigation start if the page was prerendered.\n      const value = Math.max(lastEntry.startTime - getActivationStart(), 0);\n\n      // Only report if the page wasn't hidden prior to LCP.\n      if (value < visibilityWatcher.firstHiddenTime) {\n        metric.value = value;\n        metric.entries = [lastEntry];\n        report();\n      }\n    }\n  };\n\n  const po = observe('largest-contentful-paint', handleEntries);\n\n  if (po) {\n    report = bindReporter(onReport, metric);\n\n    const stopListening = (): void => {\n      if (!reportedMetricIDs[metric.id]) {\n        handleEntries(po.takeRecords() as LCPMetric['entries']);\n        po.disconnect();\n        reportedMetricIDs[metric.id] = true;\n        report(true);\n      }\n    };\n\n    // Stop listening after input. Note: while scrolling is an input that\n    // stop LCP observation, it's unreliable since it can be programmatically\n    // generated. See: https://github.com/GoogleChrome/web-vitals/issues/75\n    ['keydown', 'click'].forEach(type => {\n      addEventListener(type, stopListening, { once: true, capture: true });\n    });\n\n    onHidden(stopListening, true);\n\n    return stopListening;\n  }\n\n  return;\n};\n","import type { Transaction } from '@sentry/core';\nimport type { Span, SpanContext } from '@sentry/types';\n\n/**\n * Checks if a given value is a valid measurement value.\n */\nexport function isMeasurementValue(value: unknown): value is number {\n  return typeof value === 'number' && isFinite(value);\n}\n\n/**\n * Helper function to start child on transactions. This function will make sure that the transaction will\n * use the start timestamp of the created child span if it is earlier than the transactions actual\n * start timestamp.\n */\nexport function _startChild(transaction: Transaction, { startTimestamp, ...ctx }: SpanContext): Span {\n  if (startTimestamp && transaction.startTimestamp > startTimestamp) {\n    transaction.startTimestamp = startTimestamp;\n  }\n\n  return transaction.startChild({\n    startTimestamp,\n    ...ctx,\n  });\n}\n","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}","/* eslint-disable max-lines */\nimport type { IdleTransaction, Transaction } from '@sentry/core';\nimport { getActiveTransaction } from '@sentry/core';\nimport type { Measurements } from '@sentry/types';\nimport { browserPerformanceTimeOrigin, htmlTreeAsString, logger } from '@sentry/utils';\n\nimport { WINDOW } from '../types';\nimport { onCLS } from '../web-vitals/getCLS';\nimport { onFID } from '../web-vitals/getFID';\nimport { onLCP } from '../web-vitals/getLCP';\nimport { getVisibilityWatcher } from '../web-vitals/lib/getVisibilityWatcher';\nimport { observe } from '../web-vitals/lib/observe';\nimport type { NavigatorDeviceMemory, NavigatorNetworkInformation } from '../web-vitals/types';\nimport { _startChild, isMeasurementValue } from './utils';\n\n/**\n * Converts from milliseconds to seconds\n * @param time time in ms\n */\nfunction msToSec(time: number): number {\n  return time / 1000;\n}\n\nfunction getBrowserPerformanceAPI(): Performance | undefined {\n  return WINDOW && WINDOW.addEventListener && WINDOW.performance;\n}\n\nlet _performanceCursor: number = 0;\n\nlet _measurements: Measurements = {};\nlet _lcpEntry: LargestContentfulPaint | undefined;\nlet _clsEntry: LayoutShift | undefined;\n\n/**\n * Start tracking web vitals\n *\n * @returns A function that forces web vitals collection\n */\nexport function startTrackingWebVitals(): () => void {\n  const performance = getBrowserPerformanceAPI();\n  if (performance && browserPerformanceTimeOrigin) {\n    if (performance.mark) {\n      WINDOW.performance.mark('sentry-tracing-init');\n    }\n    _trackFID();\n    const clsCallback = _trackCLS();\n    const lcpCallback = _trackLCP();\n\n    return (): void => {\n      if (clsCallback) {\n        clsCallback();\n      }\n      if (lcpCallback) {\n        lcpCallback();\n      }\n    };\n  }\n\n  return () => undefined;\n}\n\n/**\n * Start tracking long tasks.\n */\nexport function startTrackingLongTasks(): void {\n  const entryHandler = (entries: PerformanceEntry[]): void => {\n    for (const entry of entries) {\n      const transaction = getActiveTransaction() as IdleTransaction | undefined;\n      if (!transaction) {\n        return;\n      }\n      const startTime = msToSec((browserPerformanceTimeOrigin as number) + entry.startTime);\n      const duration = msToSec(entry.duration);\n\n      transaction.startChild({\n        description: 'Main UI thread blocked',\n        op: 'ui.long-task',\n        startTimestamp: startTime,\n        endTimestamp: startTime + duration,\n      });\n    }\n  };\n\n  observe('longtask', entryHandler);\n}\n\n/**\n * Start tracking interaction events.\n */\nexport function startTrackingInteractions(): void {\n  const entryHandler = (entries: PerformanceEventTiming[]): void => {\n    for (const entry of entries) {\n      const transaction = getActiveTransaction() as IdleTransaction | undefined;\n      if (!transaction) {\n        return;\n      }\n\n      if (entry.name === 'click') {\n        const startTime = msToSec((browserPerformanceTimeOrigin as number) + entry.startTime);\n        const duration = msToSec(entry.duration);\n\n        transaction.startChild({\n          description: htmlTreeAsString(entry.target),\n          op: `ui.interaction.${entry.name}`,\n          startTimestamp: startTime,\n          endTimestamp: startTime + duration,\n        });\n      }\n    }\n  };\n\n  observe('event', entryHandler, { durationThreshold: 0 });\n}\n\n/** Starts tracking the Cumulative Layout Shift on the current page. */\nfunction _trackCLS(): ReturnType<typeof onCLS> {\n  // See:\n  // https://web.dev/evolving-cls/\n  // https://web.dev/cls-web-tooling/\n  return onCLS(metric => {\n    const entry = metric.entries.pop();\n    if (!entry) {\n      return;\n    }\n\n    __DEBUG_BUILD__ && logger.log('[Measurements] Adding CLS');\n    _measurements['cls'] = { value: metric.value, unit: '' };\n    _clsEntry = entry as LayoutShift;\n  });\n}\n\n/** Starts tracking the Largest Contentful Paint on the current page. */\nfunction _trackLCP(): ReturnType<typeof onLCP> {\n  return onLCP(metric => {\n    const entry = metric.entries.pop();\n    if (!entry) {\n      return;\n    }\n\n    __DEBUG_BUILD__ && logger.log('[Measurements] Adding LCP');\n    _measurements['lcp'] = { value: metric.value, unit: 'millisecond' };\n    _lcpEntry = entry as LargestContentfulPaint;\n  });\n}\n\n/** Starts tracking the First Input Delay on the current page. */\nfunction _trackFID(): void {\n  onFID(metric => {\n    const entry = metric.entries.pop();\n    if (!entry) {\n      return;\n    }\n\n    const timeOrigin = msToSec(browserPerformanceTimeOrigin as number);\n    const startTime = msToSec(entry.startTime);\n    __DEBUG_BUILD__ && logger.log('[Measurements] Adding FID');\n    _measurements['fid'] = { value: metric.value, unit: 'millisecond' };\n    _measurements['mark.fid'] = { value: timeOrigin + startTime, unit: 'second' };\n  });\n}\n\n/** Add performance related spans to a transaction */\nexport function addPerformanceEntries(transaction: Transaction): void {\n  const performance = getBrowserPerformanceAPI();\n  if (!performance || !WINDOW.performance.getEntries || !browserPerformanceTimeOrigin) {\n    // Gatekeeper if performance API not available\n    return;\n  }\n\n  __DEBUG_BUILD__ && logger.log('[Tracing] Adding & adjusting spans using Performance API');\n  const timeOrigin = msToSec(browserPerformanceTimeOrigin);\n\n  const performanceEntries = performance.getEntries();\n\n  let responseStartTimestamp: number | undefined;\n  let requestStartTimestamp: number | undefined;\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  performanceEntries.slice(_performanceCursor).forEach((entry: Record<string, any>) => {\n    const startTime = msToSec(entry.startTime);\n    const duration = msToSec(entry.duration);\n\n    if (transaction.op === 'navigation' && timeOrigin + startTime < transaction.startTimestamp) {\n      return;\n    }\n\n    switch (entry.entryType) {\n      case 'navigation': {\n        _addNavigationSpans(transaction, entry, timeOrigin);\n        responseStartTimestamp = timeOrigin + msToSec(entry.responseStart);\n        requestStartTimestamp = timeOrigin + msToSec(entry.requestStart);\n        break;\n      }\n      case 'mark':\n      case 'paint':\n      case 'measure': {\n        _addMeasureSpans(transaction, entry, startTime, duration, timeOrigin);\n\n        // capture web vitals\n        const firstHidden = getVisibilityWatcher();\n        // Only report if the page wasn't hidden prior to the web vital.\n        const shouldRecord = entry.startTime < firstHidden.firstHiddenTime;\n\n        if (entry.name === 'first-paint' && shouldRecord) {\n          __DEBUG_BUILD__ && logger.log('[Measurements] Adding FP');\n          _measurements['fp'] = { value: entry.startTime, unit: 'millisecond' };\n        }\n        if (entry.name === 'first-contentful-paint' && shouldRecord) {\n          __DEBUG_BUILD__ && logger.log('[Measurements] Adding FCP');\n          _measurements['fcp'] = { value: entry.startTime, unit: 'millisecond' };\n        }\n        break;\n      }\n      case 'resource': {\n        const resourceName = (entry.name as string).replace(WINDOW.location.origin, '');\n        _addResourceSpans(transaction, entry, resourceName, startTime, duration, timeOrigin);\n        break;\n      }\n      default:\n      // Ignore other entry types.\n    }\n  });\n\n  _performanceCursor = Math.max(performanceEntries.length - 1, 0);\n\n  _trackNavigator(transaction);\n\n  // Measurements are only available for pageload transactions\n  if (transaction.op === 'pageload') {\n    // Generate TTFB (Time to First Byte), which measured as the time between the beginning of the transaction and the\n    // start of the response in milliseconds\n    if (typeof responseStartTimestamp === 'number') {\n      __DEBUG_BUILD__ && logger.log('[Measurements] Adding TTFB');\n      _measurements['ttfb'] = {\n        value: (responseStartTimestamp - transaction.startTimestamp) * 1000,\n        unit: 'millisecond',\n      };\n\n      if (typeof requestStartTimestamp === 'number' && requestStartTimestamp <= responseStartTimestamp) {\n        // Capture the time spent making the request and receiving the first byte of the response.\n        // This is the time between the start of the request and the start of the response in milliseconds.\n        _measurements['ttfb.requestTime'] = {\n          value: (responseStartTimestamp - requestStartTimestamp) * 1000,\n          unit: 'millisecond',\n        };\n      }\n    }\n\n    ['fcp', 'fp', 'lcp'].forEach(name => {\n      if (!_measurements[name] || timeOrigin >= transaction.startTimestamp) {\n        return;\n      }\n      // The web vitals, fcp, fp, lcp, and ttfb, all measure relative to timeOrigin.\n      // Unfortunately, timeOrigin is not captured within the transaction span data, so these web vitals will need\n      // to be adjusted to be relative to transaction.startTimestamp.\n      const oldValue = _measurements[name].value;\n      const measurementTimestamp = timeOrigin + msToSec(oldValue);\n\n      // normalizedValue should be in milliseconds\n      const normalizedValue = Math.abs((measurementTimestamp - transaction.startTimestamp) * 1000);\n      const delta = normalizedValue - oldValue;\n\n      __DEBUG_BUILD__ &&\n        logger.log(`[Measurements] Normalized ${name} from ${oldValue} to ${normalizedValue} (${delta})`);\n      _measurements[name].value = normalizedValue;\n    });\n\n    const fidMark = _measurements['mark.fid'];\n    if (fidMark && _measurements['fid']) {\n      // create span for FID\n      _startChild(transaction, {\n        description: 'first input delay',\n        endTimestamp: fidMark.value + msToSec(_measurements['fid'].value),\n        op: 'ui.action',\n        startTimestamp: fidMark.value,\n      });\n\n      // Delete mark.fid as we don't want it to be part of final payload\n      delete _measurements['mark.fid'];\n    }\n\n    // If FCP is not recorded we should not record the cls value\n    // according to the new definition of CLS.\n    if (!('fcp' in _measurements)) {\n      delete _measurements.cls;\n    }\n\n    Object.keys(_measurements).forEach(measurementName => {\n      transaction.setMeasurement(\n        measurementName,\n        _measurements[measurementName].value,\n        _measurements[measurementName].unit,\n      );\n    });\n\n    _tagMetricInfo(transaction);\n  }\n\n  _lcpEntry = undefined;\n  _clsEntry = undefined;\n  _measurements = {};\n}\n\n/** Create measure related spans */\nexport function _addMeasureSpans(\n  transaction: Transaction,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  entry: Record<string, any>,\n  startTime: number,\n  duration: number,\n  timeOrigin: number,\n): number {\n  const measureStartTimestamp = timeOrigin + startTime;\n  const measureEndTimestamp = measureStartTimestamp + duration;\n\n  _startChild(transaction, {\n    description: entry.name as string,\n    endTimestamp: measureEndTimestamp,\n    op: entry.entryType as string,\n    startTimestamp: measureStartTimestamp,\n  });\n\n  return measureStartTimestamp;\n}\n\n/** Instrument navigation entries */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _addNavigationSpans(transaction: Transaction, entry: Record<string, any>, timeOrigin: number): void {\n  ['unloadEvent', 'redirect', 'domContentLoadedEvent', 'loadEvent', 'connect'].forEach(event => {\n    _addPerformanceNavigationTiming(transaction, entry, event, timeOrigin);\n  });\n  _addPerformanceNavigationTiming(transaction, entry, 'secureConnection', timeOrigin, 'TLS/SSL', 'connectEnd');\n  _addPerformanceNavigationTiming(transaction, entry, 'fetch', timeOrigin, 'cache', 'domainLookupStart');\n  _addPerformanceNavigationTiming(transaction, entry, 'domainLookup', timeOrigin, 'DNS');\n  _addRequest(transaction, entry, timeOrigin);\n}\n\n/** Create performance navigation related spans */\nfunction _addPerformanceNavigationTiming(\n  transaction: Transaction,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  entry: Record<string, any>,\n  event: string,\n  timeOrigin: number,\n  description?: string,\n  eventEnd?: string,\n): void {\n  const end = eventEnd ? (entry[eventEnd] as number | undefined) : (entry[`${event}End`] as number | undefined);\n  const start = entry[`${event}Start`] as number | undefined;\n  if (!start || !end) {\n    return;\n  }\n  _startChild(transaction, {\n    op: 'browser',\n    description: description || event,\n    startTimestamp: timeOrigin + msToSec(start),\n    endTimestamp: timeOrigin + msToSec(end),\n  });\n}\n\n/** Create request and response related spans */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _addRequest(transaction: Transaction, entry: Record<string, any>, timeOrigin: number): void {\n  _startChild(transaction, {\n    op: 'browser',\n    description: 'request',\n    startTimestamp: timeOrigin + msToSec(entry.requestStart as number),\n    endTimestamp: timeOrigin + msToSec(entry.responseEnd as number),\n  });\n\n  _startChild(transaction, {\n    op: 'browser',\n    description: 'response',\n    startTimestamp: timeOrigin + msToSec(entry.responseStart as number),\n    endTimestamp: timeOrigin + msToSec(entry.responseEnd as number),\n  });\n}\n\nexport interface ResourceEntry extends Record<string, unknown> {\n  initiatorType?: string;\n  transferSize?: number;\n  encodedBodySize?: number;\n  decodedBodySize?: number;\n  renderBlockingStatus?: string;\n}\n\n/** Create resource-related spans */\nexport function _addResourceSpans(\n  transaction: Transaction,\n  entry: ResourceEntry,\n  resourceName: string,\n  startTime: number,\n  duration: number,\n  timeOrigin: number,\n): void {\n  // we already instrument based on fetch and xhr, so we don't need to\n  // duplicate spans here.\n  if (entry.initiatorType === 'xmlhttprequest' || entry.initiatorType === 'fetch') {\n    return;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const data: Record<string, any> = {};\n  if ('transferSize' in entry) {\n    data['http.response_transfer_size'] = entry.transferSize;\n  }\n  if ('encodedBodySize' in entry) {\n    data['http.response_content_length'] = entry.encodedBodySize;\n  }\n  if ('decodedBodySize' in entry) {\n    data['http.decoded_response_content_length'] = entry.decodedBodySize;\n  }\n  if ('renderBlockingStatus' in entry) {\n    data['resource.render_blocking_status'] = entry.renderBlockingStatus;\n  }\n\n  const startTimestamp = timeOrigin + startTime;\n  const endTimestamp = startTimestamp + duration;\n\n  _startChild(transaction, {\n    description: resourceName,\n    endTimestamp,\n    op: entry.initiatorType ? `resource.${entry.initiatorType}` : 'resource.other',\n    startTimestamp,\n    data,\n  });\n}\n\n/**\n * Capture the information of the user agent.\n */\nfunction _trackNavigator(transaction: Transaction): void {\n  const navigator = WINDOW.navigator as null | (Navigator & NavigatorNetworkInformation & NavigatorDeviceMemory);\n  if (!navigator) {\n    return;\n  }\n\n  // track network connectivity\n  const connection = navigator.connection;\n  if (connection) {\n    if (connection.effectiveType) {\n      transaction.setTag('effectiveConnectionType', connection.effectiveType);\n    }\n\n    if (connection.type) {\n      transaction.setTag('connectionType', connection.type);\n    }\n\n    if (isMeasurementValue(connection.rtt)) {\n      _measurements['connection.rtt'] = { value: connection.rtt, unit: 'millisecond' };\n    }\n  }\n\n  if (isMeasurementValue(navigator.deviceMemory)) {\n    transaction.setTag('deviceMemory', `${navigator.deviceMemory} GB`);\n  }\n\n  if (isMeasurementValue(navigator.hardwareConcurrency)) {\n    transaction.setTag('hardwareConcurrency', String(navigator.hardwareConcurrency));\n  }\n}\n\n/** Add LCP / CLS data to transaction to allow debugging */\nfunction _tagMetricInfo(transaction: Transaction): void {\n  if (_lcpEntry) {\n    __DEBUG_BUILD__ && logger.log('[Measurements] Adding LCP Data');\n\n    // Capture Properties of the LCP element that contributes to the LCP.\n\n    if (_lcpEntry.element) {\n      transaction.setTag('lcp.element', htmlTreeAsString(_lcpEntry.element));\n    }\n\n    if (_lcpEntry.id) {\n      transaction.setTag('lcp.id', _lcpEntry.id);\n    }\n\n    if (_lcpEntry.url) {\n      // Trim URL to the first 200 characters.\n      transaction.setTag('lcp.url', _lcpEntry.url.trim().slice(0, 200));\n    }\n\n    transaction.setTag('lcp.size', _lcpEntry.size);\n  }\n\n  // See: https://developer.mozilla.org/en-US/docs/Web/API/LayoutShift\n  if (_clsEntry && _clsEntry.sources) {\n    __DEBUG_BUILD__ && logger.log('[Measurements] Adding CLS Data');\n    _clsEntry.sources.forEach((source, index) =>\n      transaction.setTag(`cls.source.${index + 1}`, htmlTreeAsString(source.node)),\n    );\n  }\n}\n","/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { bindReporter } from './lib/bindReporter';\nimport { getVisibilityWatcher } from './lib/getVisibilityWatcher';\nimport { initMetric } from './lib/initMetric';\nimport { observe } from './lib/observe';\nimport { onHidden } from './lib/onHidden';\nimport type { FIDMetric, PerformanceEventTiming, ReportCallback } from './types';\n\n/**\n * Calculates the [FID](https://web.dev/fid/) value for the current page and\n * calls the `callback` function once the value is ready, along with the\n * relevant `first-input` performance entry used to determine the value. The\n * reported value is a `DOMHighResTimeStamp`.\n *\n * _**Important:** since FID is only reported after the user interacts with the\n * page, it's possible that it will not be reported for some page loads._\n */\nexport const onFID = (onReport: ReportCallback): void => {\n  const visibilityWatcher = getVisibilityWatcher();\n  const metric = initMetric('FID');\n  // eslint-disable-next-line prefer-const\n  let report: ReturnType<typeof bindReporter>;\n\n  const handleEntry = (entry: PerformanceEventTiming): void => {\n    // Only report if the page wasn't hidden prior to the first input.\n    if (entry.startTime < visibilityWatcher.firstHiddenTime) {\n      metric.value = entry.processingStart - entry.startTime;\n      metric.entries.push(entry);\n      report(true);\n    }\n  };\n\n  const handleEntries = (entries: FIDMetric['entries']): void => {\n    (entries as PerformanceEventTiming[]).forEach(handleEntry);\n  };\n\n  const po = observe('first-input', handleEntries);\n  report = bindReporter(onReport, metric);\n\n  if (po) {\n    onHidden(() => {\n      handleEntries(po.takeRecords() as FIDMetric['entries']);\n      po.disconnect();\n    }, true);\n  }\n};\n","/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { bindReporter } from './lib/bindReporter';\nimport { initMetric } from './lib/initMetric';\nimport { observe } from './lib/observe';\nimport { onHidden } from './lib/onHidden';\nimport type { CLSMetric, ReportCallback, StopListening } from './types';\n\n/**\n * Calculates the [CLS](https://web.dev/cls/) value for the current page and\n * calls the `callback` function once the value is ready to be reported, along\n * with all `layout-shift` performance entries that were used in the metric\n * value calculation. The reported value is a `double` (corresponding to a\n * [layout shift score](https://web.dev/cls/#layout-shift-score)).\n *\n * If the `reportAllChanges` configuration option is set to `true`, the\n * `callback` function will be called as soon as the value is initially\n * determined as well as any time the value changes throughout the page\n * lifespan.\n *\n * _**Important:** CLS should be continually monitored for changes throughout\n * the entire lifespan of a page—including if the user returns to the page after\n * it's been hidden/backgrounded. However, since browsers often [will not fire\n * additional callbacks once the user has backgrounded a\n * page](https://developer.chrome.com/blog/page-lifecycle-api/#advice-hidden),\n * `callback` is always called when the page's visibility state changes to\n * hidden. As a result, the `callback` function might be called multiple times\n * during the same page load._\n */\nexport const onCLS = (onReport: ReportCallback): StopListening | undefined => {\n  const metric = initMetric('CLS', 0);\n  let report: ReturnType<typeof bindReporter>;\n\n  let sessionValue = 0;\n  let sessionEntries: PerformanceEntry[] = [];\n\n  // const handleEntries = (entries: Metric['entries']) => {\n  const handleEntries = (entries: LayoutShift[]): void => {\n    entries.forEach(entry => {\n      // Only count layout shifts without recent user input.\n      if (!entry.hadRecentInput) {\n        const firstSessionEntry = sessionEntries[0];\n        const lastSessionEntry = sessionEntries[sessionEntries.length - 1];\n\n        // If the entry occurred less than 1 second after the previous entry and\n        // less than 5 seconds after the first entry in the session, include the\n        // entry in the current session. Otherwise, start a new session.\n        if (\n          sessionValue &&\n          sessionEntries.length !== 0 &&\n          entry.startTime - lastSessionEntry.startTime < 1000 &&\n          entry.startTime - firstSessionEntry.startTime < 5000\n        ) {\n          sessionValue += entry.value;\n          sessionEntries.push(entry);\n        } else {\n          sessionValue = entry.value;\n          sessionEntries = [entry];\n        }\n\n        // If the current session value is larger than the current CLS value,\n        // update CLS and the entries contributing to it.\n        if (sessionValue > metric.value) {\n          metric.value = sessionValue;\n          metric.entries = sessionEntries;\n          if (report) {\n            report();\n          }\n        }\n      }\n    });\n  };\n\n  const po = observe('layout-shift', handleEntries);\n  if (po) {\n    report = bindReporter(onReport, metric);\n\n    const stopListening = (): void => {\n      handleEntries(po.takeRecords() as CLSMetric['entries']);\n      report(true);\n    };\n\n    onHidden(stopListening);\n\n    return stopListening;\n  }\n\n  return;\n};\n","/* eslint-disable max-lines */\nimport { getCurrentHub, hasTracingEnabled } from '@sentry/core';\nimport type { DynamicSamplingContext, Span } from '@sentry/types';\nimport {\n  addInstrumentationHandler,\n  BAGGAGE_HEADER_NAME,\n  dynamicSamplingContextToSentryBaggageHeader,\n  isInstanceOf,\n  SENTRY_XHR_DATA_KEY,\n  stringMatchesSomePattern,\n} from '@sentry/utils';\n\nexport const DEFAULT_TRACE_PROPAGATION_TARGETS = ['localhost', /^\\/(?!\\/)/];\n\n/** Options for Request Instrumentation */\nexport interface RequestInstrumentationOptions {\n  /**\n   * @deprecated Will be removed in v8.\n   * Use `shouldCreateSpanForRequest` to control span creation and `tracePropagationTargets` to control\n   * trace header attachment.\n   */\n  tracingOrigins: Array<string | RegExp>;\n\n  /**\n   * List of strings and/or regexes used to determine which outgoing requests will have `sentry-trace` and `baggage`\n   * headers attached.\n   *\n   * Default: ['localhost', /^\\//] {@see DEFAULT_TRACE_PROPAGATION_TARGETS}\n   */\n  tracePropagationTargets: Array<string | RegExp>;\n\n  /**\n   * Flag to disable patching all together for fetch requests.\n   *\n   * Default: true\n   */\n  traceFetch: boolean;\n\n  /**\n   * Flag to disable patching all together for xhr requests.\n   *\n   * Default: true\n   */\n  traceXHR: boolean;\n\n  /**\n   * This function will be called before creating a span for a request with the given url.\n   * Return false if you don't want a span for the given url.\n   *\n   * Default: (url: string) => true\n   */\n  shouldCreateSpanForRequest?(this: void, url: string): boolean;\n}\n\n/** Data returned from fetch callback */\nexport interface FetchData {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  args: any[]; // the arguments passed to the fetch call itself\n  fetchData?: {\n    method: string;\n    url: string;\n    // span_id\n    __span?: string;\n  };\n\n  // TODO Should this be unknown instead? If we vendor types, make it a Response\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  response?: any;\n  error?: unknown;\n\n  startTimestamp: number;\n  endTimestamp?: number;\n}\n\n/** Data returned from XHR request */\nexport interface XHRData {\n  xhr?: {\n    [SENTRY_XHR_DATA_KEY]?: {\n      method: string;\n      url: string;\n      status_code: number;\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      data: Record<string, any>;\n    };\n    __sentry_xhr_span_id__?: string;\n    setRequestHeader?: (key: string, val: string) => void;\n    getRequestHeader?: (key: string) => string;\n    __sentry_own_request__?: boolean;\n  };\n  startTimestamp: number;\n  endTimestamp?: number;\n}\n\ntype PolymorphicRequestHeaders =\n  | Record<string, string | undefined>\n  | Array<[string, string]>\n  // the below is not preicsely the Header type used in Request, but it'll pass duck-typing\n  | {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      [key: string]: any;\n      append: (key: string, value: string) => void;\n      get: (key: string) => string | null | undefined;\n    };\n\nexport const defaultRequestInstrumentationOptions: RequestInstrumentationOptions = {\n  traceFetch: true,\n  traceXHR: true,\n  // TODO (v8): Remove this property\n  tracingOrigins: DEFAULT_TRACE_PROPAGATION_TARGETS,\n  tracePropagationTargets: DEFAULT_TRACE_PROPAGATION_TARGETS,\n};\n\n/** Registers span creators for xhr and fetch requests  */\nexport function instrumentOutgoingRequests(_options?: Partial<RequestInstrumentationOptions>): void {\n  // eslint-disable-next-line deprecation/deprecation\n  const { traceFetch, traceXHR, tracePropagationTargets, tracingOrigins, shouldCreateSpanForRequest } = {\n    traceFetch: defaultRequestInstrumentationOptions.traceFetch,\n    traceXHR: defaultRequestInstrumentationOptions.traceXHR,\n    ..._options,\n  };\n\n  const shouldCreateSpan =\n    typeof shouldCreateSpanForRequest === 'function' ? shouldCreateSpanForRequest : (_: string) => true;\n\n  // TODO(v8) Remove tracingOrigins here\n  // The only reason we're passing it in here is because this instrumentOutgoingRequests function is publicly exported\n  // and we don't want to break the API. We can remove it in v8.\n  const shouldAttachHeadersWithTargets = (url: string): boolean =>\n    shouldAttachHeaders(url, tracePropagationTargets || tracingOrigins);\n\n  const spans: Record<string, Span> = {};\n\n  if (traceFetch) {\n    addInstrumentationHandler('fetch', (handlerData: FetchData) => {\n      fetchCallback(handlerData, shouldCreateSpan, shouldAttachHeadersWithTargets, spans);\n    });\n  }\n\n  if (traceXHR) {\n    addInstrumentationHandler('xhr', (handlerData: XHRData) => {\n      xhrCallback(handlerData, shouldCreateSpan, shouldAttachHeadersWithTargets, spans);\n    });\n  }\n}\n\n/**\n * A function that determines whether to attach tracing headers to a request.\n * This was extracted from `instrumentOutgoingRequests` to make it easier to test shouldAttachHeaders.\n * We only export this fuction for testing purposes.\n */\nexport function shouldAttachHeaders(url: string, tracePropagationTargets: (string | RegExp)[] | undefined): boolean {\n  return stringMatchesSomePattern(url, tracePropagationTargets || DEFAULT_TRACE_PROPAGATION_TARGETS);\n}\n\n/**\n * Create and track fetch request spans\n */\nexport function fetchCallback(\n  handlerData: FetchData,\n  shouldCreateSpan: (url: string) => boolean,\n  shouldAttachHeaders: (url: string) => boolean,\n  spans: Record<string, Span>,\n): void {\n  if (!hasTracingEnabled() || !(handlerData.fetchData && shouldCreateSpan(handlerData.fetchData.url))) {\n    return;\n  }\n\n  if (handlerData.endTimestamp) {\n    const spanId = handlerData.fetchData.__span;\n    if (!spanId) return;\n\n    const span = spans[spanId];\n    if (span) {\n      if (handlerData.response) {\n        // TODO (kmclb) remove this once types PR goes through\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        span.setHttpStatus(handlerData.response.status);\n\n        const contentLength: string =\n          // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n          handlerData.response && handlerData.response.headers && handlerData.response.headers.get('content-length');\n\n        const contentLengthNum = parseInt(contentLength);\n        if (contentLengthNum > 0) {\n          span.setData('http.response_content_length', contentLengthNum);\n        }\n      } else if (handlerData.error) {\n        span.setStatus('internal_error');\n      }\n      span.finish();\n\n      // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n      delete spans[spanId];\n    }\n    return;\n  }\n\n  const currentScope = getCurrentHub().getScope();\n  const currentSpan = currentScope && currentScope.getSpan();\n  const activeTransaction = currentSpan && currentSpan.transaction;\n\n  if (currentSpan && activeTransaction) {\n    const { method, url } = handlerData.fetchData;\n    const span = currentSpan.startChild({\n      data: {\n        url,\n        type: 'fetch',\n        'http.method': method,\n      },\n      description: `${method} ${url}`,\n      op: 'http.client',\n    });\n\n    handlerData.fetchData.__span = span.spanId;\n    spans[span.spanId] = span;\n\n    const request: string | Request = handlerData.args[0];\n\n    // In case the user hasn't set the second argument of a fetch call we default it to `{}`.\n    handlerData.args[1] = handlerData.args[1] || {};\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const options: { [key: string]: any } = handlerData.args[1];\n\n    if (shouldAttachHeaders(handlerData.fetchData.url)) {\n      options.headers = addTracingHeadersToFetchRequest(\n        request,\n        activeTransaction.getDynamicSamplingContext(),\n        span,\n        options,\n      );\n    }\n  }\n}\n\n/**\n * Adds sentry-trace and baggage headers to the various forms of fetch headers\n */\nexport function addTracingHeadersToFetchRequest(\n  request: string | unknown, // unknown is actually type Request but we can't export DOM types from this package,\n  dynamicSamplingContext: Partial<DynamicSamplingContext>,\n  span: Span,\n  options: {\n    headers?:\n      | {\n          [key: string]: string[] | string | undefined;\n        }\n      | PolymorphicRequestHeaders;\n  },\n): PolymorphicRequestHeaders {\n  const sentryBaggageHeader = dynamicSamplingContextToSentryBaggageHeader(dynamicSamplingContext);\n  const sentryTraceHeader = span.toTraceparent();\n\n  const headers =\n    typeof Request !== 'undefined' && isInstanceOf(request, Request) ? (request as Request).headers : options.headers;\n\n  if (!headers) {\n    return { 'sentry-trace': sentryTraceHeader, baggage: sentryBaggageHeader };\n  } else if (typeof Headers !== 'undefined' && isInstanceOf(headers, Headers)) {\n    const newHeaders = new Headers(headers as Headers);\n\n    newHeaders.append('sentry-trace', sentryTraceHeader);\n\n    if (sentryBaggageHeader) {\n      // If the same header is appended multiple times the browser will merge the values into a single request header.\n      // Its therefore safe to simply push a \"baggage\" entry, even though there might already be another baggage header.\n      newHeaders.append(BAGGAGE_HEADER_NAME, sentryBaggageHeader);\n    }\n\n    return newHeaders as PolymorphicRequestHeaders;\n  } else if (Array.isArray(headers)) {\n    const newHeaders = [...headers, ['sentry-trace', sentryTraceHeader]];\n\n    if (sentryBaggageHeader) {\n      // If there are multiple entries with the same key, the browser will merge the values into a single request header.\n      // Its therefore safe to simply push a \"baggage\" entry, even though there might already be another baggage header.\n      newHeaders.push([BAGGAGE_HEADER_NAME, sentryBaggageHeader]);\n    }\n\n    return newHeaders as PolymorphicRequestHeaders;\n  } else {\n    const existingBaggageHeader = 'baggage' in headers ? headers.baggage : undefined;\n    const newBaggageHeaders: string[] = [];\n\n    if (Array.isArray(existingBaggageHeader)) {\n      newBaggageHeaders.push(...existingBaggageHeader);\n    } else if (existingBaggageHeader) {\n      newBaggageHeaders.push(existingBaggageHeader);\n    }\n\n    if (sentryBaggageHeader) {\n      newBaggageHeaders.push(sentryBaggageHeader);\n    }\n\n    return {\n      ...(headers as Exclude<typeof headers, Headers>),\n      'sentry-trace': sentryTraceHeader,\n      baggage: newBaggageHeaders.length > 0 ? newBaggageHeaders.join(',') : undefined,\n    };\n  }\n}\n\n/**\n * Create and track xhr request spans\n */\nexport function xhrCallback(\n  handlerData: XHRData,\n  shouldCreateSpan: (url: string) => boolean,\n  shouldAttachHeaders: (url: string) => boolean,\n  spans: Record<string, Span>,\n): void {\n  const xhr = handlerData.xhr;\n  const sentryXhrData = xhr && xhr[SENTRY_XHR_DATA_KEY];\n\n  if (\n    !hasTracingEnabled() ||\n    (xhr && xhr.__sentry_own_request__) ||\n    !(xhr && sentryXhrData && shouldCreateSpan(sentryXhrData.url))\n  ) {\n    return;\n  }\n\n  // check first if the request has finished and is tracked by an existing span which should now end\n  if (handlerData.endTimestamp) {\n    const spanId = xhr.__sentry_xhr_span_id__;\n    if (!spanId) return;\n\n    const span = spans[spanId];\n    if (span) {\n      span.setHttpStatus(sentryXhrData.status_code);\n      span.finish();\n\n      // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n      delete spans[spanId];\n    }\n    return;\n  }\n\n  const currentScope = getCurrentHub().getScope();\n  const currentSpan = currentScope && currentScope.getSpan();\n  const activeTransaction = currentSpan && currentSpan.transaction;\n\n  if (currentSpan && activeTransaction) {\n    const span = currentSpan.startChild({\n      data: {\n        ...sentryXhrData.data,\n        type: 'xhr',\n        'http.method': sentryXhrData.method,\n        url: sentryXhrData.url,\n      },\n      description: `${sentryXhrData.method} ${sentryXhrData.url}`,\n      op: 'http.client',\n    });\n\n    xhr.__sentry_xhr_span_id__ = span.spanId;\n    spans[xhr.__sentry_xhr_span_id__] = span;\n\n    if (xhr.setRequestHeader && shouldAttachHeaders(sentryXhrData.url)) {\n      try {\n        xhr.setRequestHeader('sentry-trace', span.toTraceparent());\n\n        const dynamicSamplingContext = activeTransaction.getDynamicSamplingContext();\n        const sentryBaggageHeader = dynamicSamplingContextToSentryBaggageHeader(dynamicSamplingContext);\n\n        if (sentryBaggageHeader) {\n          // From MDN: \"If this method is called several times with the same header, the values are merged into one single request header.\"\n          // We can therefore simply set a baggage header without checking what was there before\n          // https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/setRequestHeader\n          xhr.setRequestHeader(BAGGAGE_HEADER_NAME, sentryBaggageHeader);\n        }\n      } catch (_) {\n        // Error: InvalidStateError: Failed to execute 'setRequestHeader' on 'XMLHttpRequest': The object's state must be OPENED.\n      }\n    }\n  }\n}\n","/* eslint-disable max-lines */\nimport type { Hub, IdleTransaction } from '@sentry/core';\nimport {\n  addTracingExtensions,\n  extractTraceparentData,\n  getActiveTransaction,\n  startIdleTransaction,\n  TRACING_DEFAULTS,\n} from '@sentry/core';\nimport type { EventProcessor, Integration, Transaction, TransactionContext, TransactionSource } from '@sentry/types';\nimport { baggageHeaderToDynamicSamplingContext, getDomElement, logger } from '@sentry/utils';\n\nimport { registerBackgroundTabDetection } from './backgroundtab';\nimport {\n  addPerformanceEntries,\n  startTrackingInteractions,\n  startTrackingLongTasks,\n  startTrackingWebVitals,\n} from './metrics';\nimport type { RequestInstrumentationOptions } from './request';\nimport { defaultRequestInstrumentationOptions, instrumentOutgoingRequests } from './request';\nimport { instrumentRoutingWithDefaults } from './router';\nimport { WINDOW } from './types';\n\nexport const BROWSER_TRACING_INTEGRATION_ID = 'BrowserTracing';\n\n/** Options for Browser Tracing integration */\nexport interface BrowserTracingOptions extends RequestInstrumentationOptions {\n  /**\n   * The time to wait in ms until the transaction will be finished during an idle state. An idle state is defined\n   * by a moment where there are no in-progress spans.\n   *\n   * The transaction will use the end timestamp of the last finished span as the endtime for the transaction.\n   * If there are still active spans when this the `idleTimeout` is set, the `idleTimeout` will get reset.\n   * Time is in ms.\n   *\n   * Default: 1000\n   */\n  idleTimeout: number;\n\n  /**\n   * The max duration for a transaction. If a transaction duration hits the `finalTimeout` value, it\n   * will be finished.\n   * Time is in ms.\n   *\n   * Default: 30000\n   */\n  finalTimeout: number;\n\n  /**\n   * The heartbeat interval. If no new spans are started or open spans are finished within 3 heartbeats,\n   * the transaction will be finished.\n   * Time is in ms.\n   *\n   * Default: 5000\n   */\n  heartbeatInterval: number;\n\n  /**\n   * Flag to enable/disable creation of `navigation` transaction on history changes.\n   *\n   * Default: true\n   */\n  startTransactionOnLocationChange: boolean;\n\n  /**\n   * Flag to enable/disable creation of `pageload` transaction on first pageload.\n   *\n   * Default: true\n   */\n  startTransactionOnPageLoad: boolean;\n\n  /**\n   * Flag Transactions where tabs moved to background with \"cancelled\". Browser background tab timing is\n   * not suited towards doing precise measurements of operations. By default, we recommend that this option\n   * be enabled as background transactions can mess up your statistics in nondeterministic ways.\n   *\n   * Default: true\n   */\n  markBackgroundTransactions: boolean;\n\n  /**\n   * If true, Sentry will capture long tasks and add them to the corresponding transaction.\n   *\n   * Default: true\n   */\n  enableLongTask: boolean;\n\n  /**\n   * _metricOptions allows the user to send options to change how metrics are collected.\n   *\n   * _metricOptions is currently experimental.\n   *\n   * Default: undefined\n   */\n  _metricOptions?: Partial<{\n    /**\n     * @deprecated This property no longer has any effect and will be removed in v8.\n     */\n    _reportAllChanges: boolean;\n  }>;\n\n  /**\n   * _experiments allows the user to send options to define how this integration works.\n   * Note that the `enableLongTask` options is deprecated in favor of the option at the top level, and will be removed in v8.\n   *\n   * TODO (v8): Remove enableLongTask\n   *\n   * Default: undefined\n   */\n  _experiments: Partial<{\n    enableLongTask: boolean;\n    enableInteractions: boolean;\n    onStartRouteTransaction: (t: Transaction | undefined, ctx: TransactionContext, getCurrentHub: () => Hub) => void;\n  }>;\n\n  /**\n   * beforeNavigate is called before a pageload/navigation transaction is created and allows users to modify transaction\n   * context data, or drop the transaction entirely (by setting `sampled = false` in the context).\n   *\n   * Note: For legacy reasons, transactions can also be dropped by returning `undefined`.\n   *\n   * @param context: The context data which will be passed to `startTransaction` by default\n   *\n   * @returns A (potentially) modified context object, with `sampled = false` if the transaction should be dropped.\n   */\n  beforeNavigate?(this: void, context: TransactionContext): TransactionContext | undefined;\n\n  /**\n   * Instrumentation that creates routing change transactions. By default creates\n   * pageload and navigation transactions.\n   */\n  routingInstrumentation<T extends Transaction>(\n    this: void,\n    customStartTransaction: (context: TransactionContext) => T | undefined,\n    startTransactionOnPageLoad?: boolean,\n    startTransactionOnLocationChange?: boolean,\n  ): void;\n}\n\nconst DEFAULT_BROWSER_TRACING_OPTIONS: BrowserTracingOptions = {\n  ...TRACING_DEFAULTS,\n  markBackgroundTransactions: true,\n  routingInstrumentation: instrumentRoutingWithDefaults,\n  startTransactionOnLocationChange: true,\n  startTransactionOnPageLoad: true,\n  enableLongTask: true,\n  _experiments: {},\n  ...defaultRequestInstrumentationOptions,\n};\n\n/**\n * The Browser Tracing integration automatically instruments browser pageload/navigation\n * actions as transactions, and captures requests, metrics and errors as spans.\n *\n * The integration can be configured with a variety of options, and can be extended to use\n * any routing library. This integration uses {@see IdleTransaction} to create transactions.\n */\nexport class BrowserTracing implements Integration {\n  // This class currently doesn't have a static `id` field like the other integration classes, because it prevented\n  // @sentry/tracing from being treeshaken. Tree shakers do not like static fields, because they behave like side effects.\n  // TODO: Come up with a better plan, than using static fields on integration classes, and use that plan on all\n  // integrations.\n\n  /** Browser Tracing integration options */\n  public options: BrowserTracingOptions;\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = BROWSER_TRACING_INTEGRATION_ID;\n\n  private _getCurrentHub?: () => Hub;\n\n  private _latestRouteName?: string;\n  private _latestRouteSource?: TransactionSource;\n\n  private _collectWebVitals: () => void;\n\n  public constructor(_options?: Partial<BrowserTracingOptions>) {\n    addTracingExtensions();\n\n    this.options = {\n      ...DEFAULT_BROWSER_TRACING_OPTIONS,\n      ..._options,\n    };\n\n    // Special case: enableLongTask can be set in _experiments\n    // TODO (v8): Remove this in v8\n    if (this.options._experiments.enableLongTask !== undefined) {\n      this.options.enableLongTask = this.options._experiments.enableLongTask;\n    }\n\n    // TODO (v8): remove this block after tracingOrigins is removed\n    // Set tracePropagationTargets to tracingOrigins if specified by the user\n    // In case both are specified, tracePropagationTargets takes precedence\n    // eslint-disable-next-line deprecation/deprecation\n    if (_options && !_options.tracePropagationTargets && _options.tracingOrigins) {\n      // eslint-disable-next-line deprecation/deprecation\n      this.options.tracePropagationTargets = _options.tracingOrigins;\n    }\n\n    this._collectWebVitals = startTrackingWebVitals();\n    if (this.options.enableLongTask) {\n      startTrackingLongTasks();\n    }\n    if (this.options._experiments.enableInteractions) {\n      startTrackingInteractions();\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(_: (callback: EventProcessor) => void, getCurrentHub: () => Hub): void {\n    this._getCurrentHub = getCurrentHub;\n\n    const {\n      routingInstrumentation: instrumentRouting,\n      startTransactionOnLocationChange,\n      startTransactionOnPageLoad,\n      markBackgroundTransactions,\n      traceFetch,\n      traceXHR,\n      tracePropagationTargets,\n      shouldCreateSpanForRequest,\n      _experiments,\n    } = this.options;\n\n    instrumentRouting(\n      (context: TransactionContext) => {\n        const transaction = this._createRouteTransaction(context);\n\n        this.options._experiments.onStartRouteTransaction &&\n          this.options._experiments.onStartRouteTransaction(transaction, context, getCurrentHub);\n\n        return transaction;\n      },\n      startTransactionOnPageLoad,\n      startTransactionOnLocationChange,\n    );\n\n    if (markBackgroundTransactions) {\n      registerBackgroundTabDetection();\n    }\n\n    if (_experiments.enableInteractions) {\n      this._registerInteractionListener();\n    }\n\n    instrumentOutgoingRequests({\n      traceFetch,\n      traceXHR,\n      tracePropagationTargets,\n      shouldCreateSpanForRequest,\n    });\n  }\n\n  /** Create routing idle transaction. */\n  private _createRouteTransaction(context: TransactionContext): Transaction | undefined {\n    if (!this._getCurrentHub) {\n      __DEBUG_BUILD__ &&\n        logger.warn(`[Tracing] Did not create ${context.op} transaction because _getCurrentHub is invalid.`);\n      return undefined;\n    }\n\n    const { beforeNavigate, idleTimeout, finalTimeout, heartbeatInterval } = this.options;\n\n    const isPageloadTransaction = context.op === 'pageload';\n\n    const sentryTraceMetaTagValue = isPageloadTransaction ? getMetaContent('sentry-trace') : null;\n    const baggageMetaTagValue = isPageloadTransaction ? getMetaContent('baggage') : null;\n\n    const traceParentData = sentryTraceMetaTagValue ? extractTraceparentData(sentryTraceMetaTagValue) : undefined;\n    const dynamicSamplingContext = baggageMetaTagValue\n      ? baggageHeaderToDynamicSamplingContext(baggageMetaTagValue)\n      : undefined;\n\n    const expandedContext: TransactionContext = {\n      ...context,\n      ...traceParentData,\n      metadata: {\n        ...context.metadata,\n        dynamicSamplingContext: traceParentData && !dynamicSamplingContext ? {} : dynamicSamplingContext,\n      },\n      trimEnd: true,\n    };\n\n    const modifiedContext = typeof beforeNavigate === 'function' ? beforeNavigate(expandedContext) : expandedContext;\n\n    // For backwards compatibility reasons, beforeNavigate can return undefined to \"drop\" the transaction (prevent it\n    // from being sent to Sentry).\n    const finalContext = modifiedContext === undefined ? { ...expandedContext, sampled: false } : modifiedContext;\n\n    // If `beforeNavigate` set a custom name, record that fact\n    finalContext.metadata =\n      finalContext.name !== expandedContext.name\n        ? { ...finalContext.metadata, source: 'custom' }\n        : finalContext.metadata;\n\n    this._latestRouteName = finalContext.name;\n    this._latestRouteSource = finalContext.metadata && finalContext.metadata.source;\n\n    if (finalContext.sampled === false) {\n      __DEBUG_BUILD__ &&\n        logger.log(`[Tracing] Will not send ${finalContext.op} transaction because of beforeNavigate.`);\n    }\n\n    __DEBUG_BUILD__ && logger.log(`[Tracing] Starting ${finalContext.op} transaction on scope`);\n\n    const hub = this._getCurrentHub();\n    const { location } = WINDOW;\n\n    const idleTransaction = startIdleTransaction(\n      hub,\n      finalContext,\n      idleTimeout,\n      finalTimeout,\n      true,\n      { location }, // for use in the tracesSampler\n      heartbeatInterval,\n    );\n    idleTransaction.registerBeforeFinishCallback(transaction => {\n      this._collectWebVitals();\n      addPerformanceEntries(transaction);\n    });\n\n    return idleTransaction as Transaction;\n  }\n\n  /** Start listener for interaction transactions */\n  private _registerInteractionListener(): void {\n    let inflightInteractionTransaction: IdleTransaction | undefined;\n    const registerInteractionTransaction = (): void => {\n      const { idleTimeout, finalTimeout, heartbeatInterval } = this.options;\n      const op = 'ui.action.click';\n\n      const currentTransaction = getActiveTransaction();\n      if (currentTransaction && currentTransaction.op && ['navigation', 'pageload'].includes(currentTransaction.op)) {\n        __DEBUG_BUILD__ &&\n          logger.warn(\n            `[Tracing] Did not create ${op} transaction because a pageload or navigation transaction is in progress.`,\n          );\n        return undefined;\n      }\n\n      if (inflightInteractionTransaction) {\n        inflightInteractionTransaction.setFinishReason('interactionInterrupted');\n        inflightInteractionTransaction.finish();\n        inflightInteractionTransaction = undefined;\n      }\n\n      if (!this._getCurrentHub) {\n        __DEBUG_BUILD__ && logger.warn(`[Tracing] Did not create ${op} transaction because _getCurrentHub is invalid.`);\n        return undefined;\n      }\n\n      if (!this._latestRouteName) {\n        __DEBUG_BUILD__ &&\n          logger.warn(`[Tracing] Did not create ${op} transaction because _latestRouteName is missing.`);\n        return undefined;\n      }\n\n      const hub = this._getCurrentHub();\n      const { location } = WINDOW;\n\n      const context: TransactionContext = {\n        name: this._latestRouteName,\n        op,\n        trimEnd: true,\n        metadata: {\n          source: this._latestRouteSource || 'url',\n        },\n      };\n\n      inflightInteractionTransaction = startIdleTransaction(\n        hub,\n        context,\n        idleTimeout,\n        finalTimeout,\n        true,\n        { location }, // for use in the tracesSampler\n        heartbeatInterval,\n      );\n    };\n\n    ['click'].forEach(type => {\n      addEventListener(type, registerInteractionTransaction, { once: false, capture: true });\n    });\n  }\n}\n\n/** Returns the value of a meta tag */\nexport function getMetaContent(metaName: string): string | null {\n  // Can't specify generic to `getDomElement` because tracing can be used\n  // in a variety of environments, have to disable `no-unsafe-member-access`\n  // as a result.\n  const metaTag = getDomElement(`meta[name=${metaName}]`);\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n  return metaTag ? metaTag.getAttribute('content') : null;\n}\n","import type { Transaction, TransactionContext } from '@sentry/types';\nimport { addInstrumentationHandler, browserPerformanceTimeOrigin, logger } from '@sentry/utils';\n\nimport { WINDOW } from './types';\n\n/**\n * Default function implementing pageload and navigation transactions\n */\nexport function instrumentRoutingWithDefaults<T extends Transaction>(\n  customStartTransaction: (context: TransactionContext) => T | undefined,\n  startTransactionOnPageLoad: boolean = true,\n  startTransactionOnLocationChange: boolean = true,\n): void {\n  if (!WINDOW || !WINDOW.location) {\n    __DEBUG_BUILD__ && logger.warn('Could not initialize routing instrumentation due to invalid location');\n    return;\n  }\n\n  let startingUrl: string | undefined = WINDOW.location.href;\n\n  let activeTransaction: T | undefined;\n  if (startTransactionOnPageLoad) {\n    activeTransaction = customStartTransaction({\n      name: WINDOW.location.pathname,\n      // pageload should always start at timeOrigin (and needs to be in s, not ms)\n      startTimestamp: browserPerformanceTimeOrigin ? browserPerformanceTimeOrigin / 1000 : undefined,\n      op: 'pageload',\n      metadata: { source: 'url' },\n    });\n  }\n\n  if (startTransactionOnLocationChange) {\n    addInstrumentationHandler('history', ({ to, from }: { to: string; from?: string }) => {\n      /**\n       * This early return is there to account for some cases where a navigation transaction starts right after\n       * long-running pageload. We make sure that if `from` is undefined and a valid `startingURL` exists, we don't\n       * create an uneccessary navigation transaction.\n       *\n       * This was hard to duplicate, but this behavior stopped as soon as this fix was applied. This issue might also\n       * only be caused in certain development environments where the usage of a hot module reloader is causing\n       * errors.\n       */\n      if (from === undefined && startingUrl && startingUrl.indexOf(to) !== -1) {\n        startingUrl = undefined;\n        return;\n      }\n\n      if (from !== to) {\n        startingUrl = undefined;\n        if (activeTransaction) {\n          __DEBUG_BUILD__ && logger.log(`[Tracing] Finishing current transaction with op: ${activeTransaction.op}`);\n          // If there's an open transaction on the scope, we need to finish it before creating an new one.\n          activeTransaction.finish();\n        }\n        activeTransaction = customStartTransaction({\n          name: WINDOW.location.pathname,\n          op: 'navigation',\n          metadata: { source: 'url' },\n        });\n      }\n    });\n  }\n}\n","import type { IdleTransaction, SpanStatusType } from '@sentry/core';\nimport { getActiveTransaction } from '@sentry/core';\nimport { logger } from '@sentry/utils';\n\nimport { WINDOW } from './types';\n\n/**\n * Add a listener that cancels and finishes a transaction when the global\n * document is hidden.\n */\nexport function registerBackgroundTabDetection(): void {\n  if (WINDOW && WINDOW.document) {\n    WINDOW.document.addEventListener('visibilitychange', () => {\n      const activeTransaction = getActiveTransaction() as IdleTransaction;\n      if (WINDOW.document.hidden && activeTransaction) {\n        const statusType: SpanStatusType = 'cancelled';\n\n        __DEBUG_BUILD__ &&\n          logger.log(\n            `[Tracing] Transaction: ${statusType} -> since tab moved to the background, op: ${activeTransaction.op}`,\n          );\n        // We should not set status if it is already set, this prevent important statuses like\n        // error or data loss from being overwritten on transaction.\n        if (!activeTransaction.status) {\n          activeTransaction.setStatus(statusType);\n        }\n        activeTransaction.setTag('visibilitychange', 'document.hidden');\n        activeTransaction.finish();\n      }\n    });\n  } else {\n    __DEBUG_BUILD__ &&\n      logger.warn('[Tracing] Could not set up background tab detection due to lack of global document');\n  }\n}\n","export const SDK_VERSION = '7.56.0';\n","import type { DsnComponents, DsnLike, DsnProtocol } from '@sentry/types';\n\nimport { logger } from './logger';\n\n/** Regular expression used to parse a Dsn. */\nconst DSN_REGEX = /^(?:(\\w+):)\\/\\/(?:(\\w+)(?::(\\w+)?)?@)([\\w.-]+)(?::(\\d+))?\\/(.+)/;\n\nfunction isValidProtocol(protocol?: string): protocol is DsnProtocol {\n  return protocol === 'http' || protocol === 'https';\n}\n\n/**\n * Renders the string representation of this Dsn.\n *\n * By default, this will render the public representation without the password\n * component. To get the deprecated private representation, set `withPassword`\n * to true.\n *\n * @param withPassword When set to true, the password will be included.\n */\nexport function dsnToString(dsn: DsnComponents, withPassword: boolean = false): string {\n  const { host, path, pass, port, projectId, protocol, publicKey } = dsn;\n  return (\n    `${protocol}://${publicKey}${withPassword && pass ? `:${pass}` : ''}` +\n    `@${host}${port ? `:${port}` : ''}/${path ? `${path}/` : path}${projectId}`\n  );\n}\n\n/**\n * Parses a Dsn from a given string.\n *\n * @param str A Dsn as string\n * @returns Dsn as DsnComponents or undefined if @param str is not a valid DSN string\n */\nexport function dsnFromString(str: string): DsnComponents | undefined {\n  const match = DSN_REGEX.exec(str);\n\n  if (!match) {\n    // This should be logged to the console\n    // eslint-disable-next-line no-console\n    console.error(`Invalid Sentry Dsn: ${str}`);\n    return undefined;\n  }\n\n  const [protocol, publicKey, pass = '', host, port = '', lastPath] = match.slice(1);\n  let path = '';\n  let projectId = lastPath;\n\n  const split = projectId.split('/');\n  if (split.length > 1) {\n    path = split.slice(0, -1).join('/');\n    projectId = split.pop() as string;\n  }\n\n  if (projectId) {\n    const projectMatch = projectId.match(/^\\d+/);\n    if (projectMatch) {\n      projectId = projectMatch[0];\n    }\n  }\n\n  return dsnFromComponents({ host, pass, path, projectId, port, protocol: protocol as DsnProtocol, publicKey });\n}\n\nfunction dsnFromComponents(components: DsnComponents): DsnComponents {\n  return {\n    protocol: components.protocol,\n    publicKey: components.publicKey || '',\n    pass: components.pass || '',\n    host: components.host,\n    port: components.port || '',\n    path: components.path || '',\n    projectId: components.projectId,\n  };\n}\n\nfunction validateDsn(dsn: DsnComponents): boolean {\n  if (!__DEBUG_BUILD__) {\n    return true;\n  }\n\n  const { port, projectId, protocol } = dsn;\n\n  const requiredComponents: ReadonlyArray<keyof DsnComponents> = ['protocol', 'publicKey', 'host', 'projectId'];\n  const hasMissingRequiredComponent = requiredComponents.find(component => {\n    if (!dsn[component]) {\n      logger.error(`Invalid Sentry Dsn: ${component} missing`);\n      return true;\n    }\n    return false;\n  });\n\n  if (hasMissingRequiredComponent) {\n    return false;\n  }\n\n  if (!projectId.match(/^\\d+$/)) {\n    logger.error(`Invalid Sentry Dsn: Invalid projectId ${projectId}`);\n    return false;\n  }\n\n  if (!isValidProtocol(protocol)) {\n    logger.error(`Invalid Sentry Dsn: Invalid protocol ${protocol}`);\n    return false;\n  }\n\n  if (port && isNaN(parseInt(port, 10))) {\n    logger.error(`Invalid Sentry Dsn: Invalid port ${port}`);\n    return false;\n  }\n\n  return true;\n}\n\n/**\n * Creates a valid Sentry Dsn object, identifying a Sentry instance and project.\n * @returns a valid DsnComponents object or `undefined` if @param from is an invalid DSN source\n */\nexport function makeDsn(from: DsnLike): DsnComponents | undefined {\n  const components = typeof from === 'string' ? dsnFromString(from) : dsnFromComponents(from);\n  if (!components || !validateDsn(components)) {\n    return undefined;\n  }\n  return components;\n}\n","import type {\n  Attachment,\n  AttachmentItem,\n  BaseEnvelopeHeaders,\n  BaseEnvelopeItemHeaders,\n  DataCategory,\n  DsnComponents,\n  Envelope,\n  EnvelopeItemType,\n  Event,\n  EventEnvelopeHeaders,\n  SdkInfo,\n  SdkMetadata,\n  TextEncoderInternal,\n} from '@sentry/types';\n\nimport { dsnToString } from './dsn';\nimport { normalize } from './normalize';\nimport { dropUndefinedKeys } from './object';\n\n/**\n * Creates an envelope.\n * Make sure to always explicitly provide the generic to this function\n * so that the envelope types resolve correctly.\n */\nexport function createEnvelope<E extends Envelope>(headers: E[0], items: E[1] = []): E {\n  return [headers, items] as E;\n}\n\n/**\n * Add an item to an envelope.\n * Make sure to always explicitly provide the generic to this function\n * so that the envelope types resolve correctly.\n */\nexport function addItemToEnvelope<E extends Envelope>(envelope: E, newItem: E[1][number]): E {\n  const [headers, items] = envelope;\n  return [headers, [...items, newItem]] as E;\n}\n\n/**\n * Convenience function to loop through the items and item types of an envelope.\n * (This function was mostly created because working with envelope types is painful at the moment)\n *\n * If the callback returns true, the rest of the items will be skipped.\n */\nexport function forEachEnvelopeItem<E extends Envelope>(\n  envelope: Envelope,\n  callback: (envelopeItem: E[1][number], envelopeItemType: E[1][number][0]['type']) => boolean | void,\n): boolean {\n  const envelopeItems = envelope[1];\n\n  for (const envelopeItem of envelopeItems) {\n    const envelopeItemType = envelopeItem[0].type;\n    const result = callback(envelopeItem, envelopeItemType);\n\n    if (result) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\n/**\n * Returns true if the envelope contains any of the given envelope item types\n */\nexport function envelopeContainsItemType(envelope: Envelope, types: EnvelopeItemType[]): boolean {\n  return forEachEnvelopeItem(envelope, (_, type) => types.includes(type));\n}\n\n/**\n * Encode a string to UTF8.\n */\nfunction encodeUTF8(input: string, textEncoder?: TextEncoderInternal): Uint8Array {\n  const utf8 = textEncoder || new TextEncoder();\n  return utf8.encode(input);\n}\n\n/**\n * Serializes an envelope.\n */\nexport function serializeEnvelope(envelope: Envelope, textEncoder?: TextEncoderInternal): string | Uint8Array {\n  const [envHeaders, items] = envelope;\n\n  // Initially we construct our envelope as a string and only convert to binary chunks if we encounter binary data\n  let parts: string | Uint8Array[] = JSON.stringify(envHeaders);\n\n  function append(next: string | Uint8Array): void {\n    if (typeof parts === 'string') {\n      parts = typeof next === 'string' ? parts + next : [encodeUTF8(parts, textEncoder), next];\n    } else {\n      parts.push(typeof next === 'string' ? encodeUTF8(next, textEncoder) : next);\n    }\n  }\n\n  for (const item of items) {\n    const [itemHeaders, payload] = item;\n\n    append(`\\n${JSON.stringify(itemHeaders)}\\n`);\n\n    if (typeof payload === 'string' || payload instanceof Uint8Array) {\n      append(payload);\n    } else {\n      let stringifiedPayload: string;\n      try {\n        stringifiedPayload = JSON.stringify(payload);\n      } catch (e) {\n        // In case, despite all our efforts to keep `payload` circular-dependency-free, `JSON.strinify()` still\n        // fails, we try again after normalizing it again with infinite normalization depth. This of course has a\n        // performance impact but in this case a performance hit is better than throwing.\n        stringifiedPayload = JSON.stringify(normalize(payload));\n      }\n      append(stringifiedPayload);\n    }\n  }\n\n  return typeof parts === 'string' ? parts : concatBuffers(parts);\n}\n\nfunction concatBuffers(buffers: Uint8Array[]): Uint8Array {\n  const totalLength = buffers.reduce((acc, buf) => acc + buf.length, 0);\n\n  const merged = new Uint8Array(totalLength);\n  let offset = 0;\n  for (const buffer of buffers) {\n    merged.set(buffer, offset);\n    offset += buffer.length;\n  }\n\n  return merged;\n}\n\nexport interface TextDecoderInternal {\n  decode(input?: Uint8Array): string;\n}\n\n/**\n * Parses an envelope\n */\nexport function parseEnvelope(\n  env: string | Uint8Array,\n  textEncoder: TextEncoderInternal,\n  textDecoder: TextDecoderInternal,\n): Envelope {\n  let buffer = typeof env === 'string' ? textEncoder.encode(env) : env;\n\n  function readBinary(length: number): Uint8Array {\n    const bin = buffer.subarray(0, length);\n    // Replace the buffer with the remaining data excluding trailing newline\n    buffer = buffer.subarray(length + 1);\n    return bin;\n  }\n\n  function readJson<T>(): T {\n    let i = buffer.indexOf(0xa);\n    // If we couldn't find a newline, we must have found the end of the buffer\n    if (i < 0) {\n      i = buffer.length;\n    }\n\n    return JSON.parse(textDecoder.decode(readBinary(i))) as T;\n  }\n\n  const envelopeHeader = readJson<BaseEnvelopeHeaders>();\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const items: [any, any][] = [];\n\n  while (buffer.length) {\n    const itemHeader = readJson<BaseEnvelopeItemHeaders>();\n    const binaryLength = typeof itemHeader.length === 'number' ? itemHeader.length : undefined;\n\n    items.push([itemHeader, binaryLength ? readBinary(binaryLength) : readJson()]);\n  }\n\n  return [envelopeHeader, items];\n}\n\n/**\n * Creates attachment envelope items\n */\nexport function createAttachmentEnvelopeItem(\n  attachment: Attachment,\n  textEncoder?: TextEncoderInternal,\n): AttachmentItem {\n  const buffer = typeof attachment.data === 'string' ? encodeUTF8(attachment.data, textEncoder) : attachment.data;\n\n  return [\n    dropUndefinedKeys({\n      type: 'attachment',\n      length: buffer.length,\n      filename: attachment.filename,\n      content_type: attachment.contentType,\n      attachment_type: attachment.attachmentType,\n    }),\n    buffer,\n  ];\n}\n\nconst ITEM_TYPE_TO_DATA_CATEGORY_MAP: Record<EnvelopeItemType, DataCategory> = {\n  session: 'session',\n  sessions: 'session',\n  attachment: 'attachment',\n  transaction: 'transaction',\n  event: 'error',\n  client_report: 'internal',\n  user_report: 'default',\n  profile: 'profile',\n  replay_event: 'replay',\n  replay_recording: 'replay',\n  check_in: 'monitor',\n};\n\n/**\n * Maps the type of an envelope item to a data category.\n */\nexport function envelopeItemTypeToDataCategory(type: EnvelopeItemType): DataCategory {\n  return ITEM_TYPE_TO_DATA_CATEGORY_MAP[type];\n}\n\n/** Extracts the minimal SDK info from from the metadata or an events */\nexport function getSdkMetadataForEnvelopeHeader(metadataOrEvent?: SdkMetadata | Event): SdkInfo | undefined {\n  if (!metadataOrEvent || !metadataOrEvent.sdk) {\n    return;\n  }\n  const { name, version } = metadataOrEvent.sdk;\n  return { name, version };\n}\n\n/**\n * Creates event envelope headers, based on event, sdk info and tunnel\n * Note: This function was extracted from the core package to make it available in Replay\n */\nexport function createEventEnvelopeHeaders(\n  event: Event,\n  sdkInfo: SdkInfo | undefined,\n  tunnel: string | undefined,\n  dsn: DsnComponents,\n): EventEnvelopeHeaders {\n  const dynamicSamplingContext = event.sdkProcessingMetadata && event.sdkProcessingMetadata.dynamicSamplingContext;\n  return {\n    event_id: event.event_id as string,\n    sent_at: new Date().toISOString(),\n    ...(sdkInfo && { sdk: sdkInfo }),\n    ...(!!tunnel && { dsn: dsnToString(dsn) }),\n    ...(dynamicSamplingContext && {\n      trace: dropUndefinedKeys({ ...dynamicSamplingContext }),\n    }),\n  };\n}\n","export default function _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}","import setPrototypeOf from \"./setPrototypeOf.js\";\nimport isNativeReflectConstruct from \"./isNativeReflectConstruct.js\";\nexport default function _construct(Parent, args, Class) {\n  if (isNativeReflectConstruct()) {\n    _construct = Reflect.construct.bind();\n  } else {\n    _construct = function _construct(Parent, args, Class) {\n      var a = [null];\n      a.push.apply(a, args);\n      var Constructor = Function.bind.apply(Parent, a);\n      var instance = new Constructor();\n      if (Class) setPrototypeOf(instance, Class.prototype);\n      return instance;\n    };\n  }\n  return _construct.apply(null, arguments);\n}","export default function _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}","import getPrototypeOf from \"./getPrototypeOf.js\";\nimport setPrototypeOf from \"./setPrototypeOf.js\";\nimport isNativeFunction from \"./isNativeFunction.js\";\nimport construct from \"./construct.js\";\nexport default function _wrapNativeSuper(Class) {\n  var _cache = typeof Map === \"function\" ? new Map() : undefined;\n  _wrapNativeSuper = function _wrapNativeSuper(Class) {\n    if (Class === null || !isNativeFunction(Class)) return Class;\n    if (typeof Class !== \"function\") {\n      throw new TypeError(\"Super expression must either be null or a function\");\n    }\n    if (typeof _cache !== \"undefined\") {\n      if (_cache.has(Class)) return _cache.get(Class);\n      _cache.set(Class, Wrapper);\n    }\n    function Wrapper() {\n      return construct(Class, arguments, getPrototypeOf(this).constructor);\n    }\n    Wrapper.prototype = Object.create(Class.prototype, {\n      constructor: {\n        value: Wrapper,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n    return setPrototypeOf(Wrapper, Class);\n  };\n  return _wrapNativeSuper(Class);\n}","export default function _isNativeFunction(fn) {\n  return Function.toString.call(fn).indexOf(\"[native code]\") !== -1;\n}","import type { ConsoleLevel } from './logger';\n\n/** An error emitted by Sentry SDKs and related utilities. */\nexport class SentryError extends Error {\n  /** Display name of this error instance. */\n  public name: string;\n\n  public logLevel: ConsoleLevel;\n\n  public constructor(public message: string, logLevel: ConsoleLevel = 'warn') {\n    super(message);\n\n    this.name = new.target.prototype.constructor.name;\n    // This sets the prototype to be `Error`, not `SentryError`. It's unclear why we do this, but commenting this line\n    // out causes various (seemingly totally unrelated) playwright tests consistently time out. FYI, this makes\n    // instances of `SentryError` fail `obj instanceof SentryError` checks.\n    Object.setPrototypeOf(this, new.target.prototype);\n    this.logLevel = logLevel;\n  }\n}\n","import type { ClientOptions, DsnComponents, DsnLike, SdkInfo } from '@sentry/types';\nimport { dsnToString, makeDsn, urlEncode } from '@sentry/utils';\n\nconst SENTRY_API_VERSION = '7';\n\n/** Returns the prefix to construct Sentry ingestion API endpoints. */\nfunction getBaseApiEndpoint(dsn: DsnComponents): string {\n  const protocol = dsn.protocol ? `${dsn.protocol}:` : '';\n  const port = dsn.port ? `:${dsn.port}` : '';\n  return `${protocol}//${dsn.host}${port}${dsn.path ? `/${dsn.path}` : ''}/api/`;\n}\n\n/** Returns the ingest API endpoint for target. */\nfunction _getIngestEndpoint(dsn: DsnComponents): string {\n  return `${getBaseApiEndpoint(dsn)}${dsn.projectId}/envelope/`;\n}\n\n/** Returns a URL-encoded string with auth config suitable for a query string. */\nfunction _encodedAuth(dsn: DsnComponents, sdkInfo: SdkInfo | undefined): string {\n  return urlEncode({\n    // We send only the minimum set of required information. See\n    // https://github.com/getsentry/sentry-javascript/issues/2572.\n    sentry_key: dsn.publicKey,\n    sentry_version: SENTRY_API_VERSION,\n    ...(sdkInfo && { sentry_client: `${sdkInfo.name}/${sdkInfo.version}` }),\n  });\n}\n\n/**\n * Returns the envelope endpoint URL with auth in the query string.\n *\n * Sending auth as part of the query string and not as custom HTTP headers avoids CORS preflight requests.\n */\nexport function getEnvelopeEndpointWithUrlEncodedAuth(\n  dsn: DsnComponents,\n  // TODO (v8): Remove `tunnelOrOptions` in favor of `options`, and use the substitute code below\n  // options: ClientOptions = {} as ClientOptions,\n  tunnelOrOptions: string | ClientOptions = {} as ClientOptions,\n): string {\n  // TODO (v8): Use this code instead\n  // const { tunnel, _metadata = {} } = options;\n  // return tunnel ? tunnel : `${_getIngestEndpoint(dsn)}?${_encodedAuth(dsn, _metadata.sdk)}`;\n\n  const tunnel = typeof tunnelOrOptions === 'string' ? tunnelOrOptions : tunnelOrOptions.tunnel;\n  const sdkInfo =\n    typeof tunnelOrOptions === 'string' || !tunnelOrOptions._metadata ? undefined : tunnelOrOptions._metadata.sdk;\n\n  return tunnel ? tunnel : `${_getIngestEndpoint(dsn)}?${_encodedAuth(dsn, sdkInfo)}`;\n}\n\n/** Returns the url to the report dialog endpoint. */\nexport function getReportDialogEndpoint(\n  dsnLike: DsnLike,\n  dialogOptions: {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    [key: string]: any;\n    user?: { name?: string; email?: string };\n  },\n): string {\n  const dsn = makeDsn(dsnLike);\n  if (!dsn) {\n    return '';\n  }\n\n  const endpoint = `${getBaseApiEndpoint(dsn)}embed/error-page/`;\n\n  let encodedOptions = `dsn=${dsnToString(dsn)}`;\n  for (const key in dialogOptions) {\n    if (key === 'dsn') {\n      continue;\n    }\n\n    if (key === 'user') {\n      const user = dialogOptions.user;\n      if (!user) {\n        continue;\n      }\n      if (user.name) {\n        encodedOptions += `&name=${encodeURIComponent(user.name)}`;\n      }\n      if (user.email) {\n        encodedOptions += `&email=${encodeURIComponent(user.email)}`;\n      }\n    } else {\n      encodedOptions += `&${encodeURIComponent(key)}=${encodeURIComponent(dialogOptions[key] as string)}`;\n    }\n  }\n\n  return `${endpoint}?${encodedOptions}`;\n}\n","import type { Integration, Options } from '@sentry/types';\nimport { arrayify, logger } from '@sentry/utils';\n\nimport { getCurrentHub } from './hub';\nimport { addGlobalEventProcessor } from './scope';\n\ndeclare module '@sentry/types' {\n  interface Integration {\n    isDefaultInstance?: boolean;\n  }\n}\n\nexport const installedIntegrations: string[] = [];\n\n/** Map of integrations assigned to a client */\nexport type IntegrationIndex = {\n  [key: string]: Integration;\n};\n\n/**\n * Remove duplicates from the given array, preferring the last instance of any duplicate. Not guaranteed to\n * preseve the order of integrations in the array.\n *\n * @private\n */\nfunction filterDuplicates(integrations: Integration[]): Integration[] {\n  const integrationsByName: { [key: string]: Integration } = {};\n\n  integrations.forEach(currentInstance => {\n    const { name } = currentInstance;\n\n    const existingInstance = integrationsByName[name];\n\n    // We want integrations later in the array to overwrite earlier ones of the same type, except that we never want a\n    // default instance to overwrite an existing user instance\n    if (existingInstance && !existingInstance.isDefaultInstance && currentInstance.isDefaultInstance) {\n      return;\n    }\n\n    integrationsByName[name] = currentInstance;\n  });\n\n  return Object.keys(integrationsByName).map(k => integrationsByName[k]);\n}\n\n/** Gets integrations to install */\nexport function getIntegrationsToSetup(options: Options): Integration[] {\n  const defaultIntegrations = options.defaultIntegrations || [];\n  const userIntegrations = options.integrations;\n\n  // We flag default instances, so that later we can tell them apart from any user-created instances of the same class\n  defaultIntegrations.forEach(integration => {\n    integration.isDefaultInstance = true;\n  });\n\n  let integrations: Integration[];\n\n  if (Array.isArray(userIntegrations)) {\n    integrations = [...defaultIntegrations, ...userIntegrations];\n  } else if (typeof userIntegrations === 'function') {\n    integrations = arrayify(userIntegrations(defaultIntegrations));\n  } else {\n    integrations = defaultIntegrations;\n  }\n\n  const finalIntegrations = filterDuplicates(integrations);\n\n  // The `Debug` integration prints copies of the `event` and `hint` which will be passed to `beforeSend` or\n  // `beforeSendTransaction`. It therefore has to run after all other integrations, so that the changes of all event\n  // processors will be reflected in the printed values. For lack of a more elegant way to guarantee that, we therefore\n  // locate it and, assuming it exists, pop it out of its current spot and shove it onto the end of the array.\n  const debugIndex = findIndex(finalIntegrations, integration => integration.name === 'Debug');\n  if (debugIndex !== -1) {\n    const [debugInstance] = finalIntegrations.splice(debugIndex, 1);\n    finalIntegrations.push(debugInstance);\n  }\n\n  return finalIntegrations;\n}\n\n/**\n * Given a list of integration instances this installs them all. When `withDefaults` is set to `true` then all default\n * integrations are added unless they were already provided before.\n * @param integrations array of integration instances\n * @param withDefault should enable default integrations\n */\nexport function setupIntegrations(integrations: Integration[]): IntegrationIndex {\n  const integrationIndex: IntegrationIndex = {};\n\n  integrations.forEach(integration => {\n    // guard against empty provided integrations\n    if (integration) {\n      setupIntegration(integration, integrationIndex);\n    }\n  });\n\n  return integrationIndex;\n}\n\n/** Setup a single integration.  */\nexport function setupIntegration(integration: Integration, integrationIndex: IntegrationIndex): void {\n  integrationIndex[integration.name] = integration;\n\n  if (installedIntegrations.indexOf(integration.name) === -1) {\n    integration.setupOnce(addGlobalEventProcessor, getCurrentHub);\n    installedIntegrations.push(integration.name);\n    __DEBUG_BUILD__ && logger.log(`Integration installed: ${integration.name}`);\n  }\n}\n\n// Polyfill for Array.findIndex(), which is not supported in ES5\nfunction findIndex<T>(arr: T[], callback: (item: T) => boolean): number {\n  for (let i = 0; i < arr.length; i++) {\n    if (callback(arr[i]) === true) {\n      return i;\n    }\n  }\n\n  return -1;\n}\n","import type { ClientOptions, Event, EventHint, StackFrame, StackParser } from '@sentry/types';\nimport { dateTimestampInSeconds, GLOBAL_OBJ, normalize, resolvedSyncPromise, truncate, uuid4 } from '@sentry/utils';\n\nimport { DEFAULT_ENVIRONMENT } from '../constants';\nimport { Scope } from '../scope';\n\n/**\n * Adds common information to events.\n *\n * The information includes release and environment from `options`,\n * breadcrumbs and context (extra, tags and user) from the scope.\n *\n * Information that is already present in the event is never overwritten. For\n * nested objects, such as the context, keys are merged.\n *\n * Note: This also triggers callbacks for `addGlobalEventProcessor`, but not `beforeSend`.\n *\n * @param event The original event.\n * @param hint May contain additional information about the original exception.\n * @param scope A scope containing event metadata.\n * @returns A new event with more information.\n * @hidden\n */\nexport function prepareEvent(\n  options: ClientOptions,\n  event: Event,\n  hint: EventHint,\n  scope?: Scope,\n): PromiseLike<Event | null> {\n  const { normalizeDepth = 3, normalizeMaxBreadth = 1_000 } = options;\n  const prepared: Event = {\n    ...event,\n    event_id: event.event_id || hint.event_id || uuid4(),\n    timestamp: event.timestamp || dateTimestampInSeconds(),\n  };\n  const integrations = hint.integrations || options.integrations.map(i => i.name);\n\n  applyClientOptions(prepared, options);\n  applyIntegrationsMetadata(prepared, integrations);\n\n  // Only put debug IDs onto frames for error events.\n  if (event.type === undefined) {\n    applyDebugIds(prepared, options.stackParser);\n  }\n\n  // If we have scope given to us, use it as the base for further modifications.\n  // This allows us to prevent unnecessary copying of data if `captureContext` is not provided.\n  let finalScope = scope;\n  if (hint.captureContext) {\n    finalScope = Scope.clone(finalScope).update(hint.captureContext);\n  }\n\n  // We prepare the result here with a resolved Event.\n  let result = resolvedSyncPromise<Event | null>(prepared);\n\n  // This should be the last thing called, since we want that\n  // {@link Hub.addEventProcessor} gets the finished prepared event.\n  //\n  // We need to check for the existence of `finalScope.getAttachments`\n  // because `getAttachments` can be undefined if users are using an older version\n  // of `@sentry/core` that does not have the `getAttachments` method.\n  // See: https://github.com/getsentry/sentry-javascript/issues/5229\n  if (finalScope) {\n    // Collect attachments from the hint and scope\n    if (finalScope.getAttachments) {\n      const attachments = [...(hint.attachments || []), ...finalScope.getAttachments()];\n\n      if (attachments.length) {\n        hint.attachments = attachments;\n      }\n    }\n\n    // In case we have a hub we reassign it.\n    result = finalScope.applyToEvent(prepared, hint);\n  }\n\n  return result.then(evt => {\n    if (evt) {\n      // We apply the debug_meta field only after all event processors have ran, so that if any event processors modified\n      // file names (e.g.the RewriteFrames integration) the filename -> debug ID relationship isn't destroyed.\n      // This should not cause any PII issues, since we're only moving data that is already on the event and not adding\n      // any new data\n      applyDebugMeta(evt);\n    }\n\n    if (typeof normalizeDepth === 'number' && normalizeDepth > 0) {\n      return normalizeEvent(evt, normalizeDepth, normalizeMaxBreadth);\n    }\n    return evt;\n  });\n}\n\n/**\n *  Enhances event using the client configuration.\n *  It takes care of all \"static\" values like environment, release and `dist`,\n *  as well as truncating overly long values.\n * @param event event instance to be enhanced\n */\nfunction applyClientOptions(event: Event, options: ClientOptions): void {\n  const { environment, release, dist, maxValueLength = 250 } = options;\n\n  if (!('environment' in event)) {\n    event.environment = 'environment' in options ? environment : DEFAULT_ENVIRONMENT;\n  }\n\n  if (event.release === undefined && release !== undefined) {\n    event.release = release;\n  }\n\n  if (event.dist === undefined && dist !== undefined) {\n    event.dist = dist;\n  }\n\n  if (event.message) {\n    event.message = truncate(event.message, maxValueLength);\n  }\n\n  const exception = event.exception && event.exception.values && event.exception.values[0];\n  if (exception && exception.value) {\n    exception.value = truncate(exception.value, maxValueLength);\n  }\n\n  const request = event.request;\n  if (request && request.url) {\n    request.url = truncate(request.url, maxValueLength);\n  }\n}\n\nconst debugIdStackParserCache = new WeakMap<StackParser, Map<string, StackFrame[]>>();\n\n/**\n * Puts debug IDs into the stack frames of an error event.\n */\nexport function applyDebugIds(event: Event, stackParser: StackParser): void {\n  const debugIdMap = GLOBAL_OBJ._sentryDebugIds;\n\n  if (!debugIdMap) {\n    return;\n  }\n\n  let debugIdStackFramesCache: Map<string, StackFrame[]>;\n  const cachedDebugIdStackFrameCache = debugIdStackParserCache.get(stackParser);\n  if (cachedDebugIdStackFrameCache) {\n    debugIdStackFramesCache = cachedDebugIdStackFrameCache;\n  } else {\n    debugIdStackFramesCache = new Map<string, StackFrame[]>();\n    debugIdStackParserCache.set(stackParser, debugIdStackFramesCache);\n  }\n\n  // Build a map of filename -> debug_id\n  const filenameDebugIdMap = Object.keys(debugIdMap).reduce<Record<string, string>>((acc, debugIdStackTrace) => {\n    let parsedStack: StackFrame[];\n    const cachedParsedStack = debugIdStackFramesCache.get(debugIdStackTrace);\n    if (cachedParsedStack) {\n      parsedStack = cachedParsedStack;\n    } else {\n      parsedStack = stackParser(debugIdStackTrace);\n      debugIdStackFramesCache.set(debugIdStackTrace, parsedStack);\n    }\n\n    for (let i = parsedStack.length - 1; i >= 0; i--) {\n      const stackFrame = parsedStack[i];\n      if (stackFrame.filename) {\n        acc[stackFrame.filename] = debugIdMap[debugIdStackTrace];\n        break;\n      }\n    }\n    return acc;\n  }, {});\n\n  try {\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    event!.exception!.values!.forEach(exception => {\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      exception.stacktrace!.frames!.forEach(frame => {\n        if (frame.filename) {\n          frame.debug_id = filenameDebugIdMap[frame.filename];\n        }\n      });\n    });\n  } catch (e) {\n    // To save bundle size we're just try catching here instead of checking for the existence of all the different objects.\n  }\n}\n\n/**\n * Moves debug IDs from the stack frames of an error event into the debug_meta field.\n */\nexport function applyDebugMeta(event: Event): void {\n  // Extract debug IDs and filenames from the stack frames on the event.\n  const filenameDebugIdMap: Record<string, string> = {};\n  try {\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    event.exception!.values!.forEach(exception => {\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      exception.stacktrace!.frames!.forEach(frame => {\n        if (frame.debug_id) {\n          if (frame.abs_path) {\n            filenameDebugIdMap[frame.abs_path] = frame.debug_id;\n          } else if (frame.filename) {\n            filenameDebugIdMap[frame.filename] = frame.debug_id;\n          }\n          delete frame.debug_id;\n        }\n      });\n    });\n  } catch (e) {\n    // To save bundle size we're just try catching here instead of checking for the existence of all the different objects.\n  }\n\n  if (Object.keys(filenameDebugIdMap).length === 0) {\n    return;\n  }\n\n  // Fill debug_meta information\n  event.debug_meta = event.debug_meta || {};\n  event.debug_meta.images = event.debug_meta.images || [];\n  const images = event.debug_meta.images;\n  Object.keys(filenameDebugIdMap).forEach(filename => {\n    images.push({\n      type: 'sourcemap',\n      code_file: filename,\n      debug_id: filenameDebugIdMap[filename],\n    });\n  });\n}\n\n/**\n * This function adds all used integrations to the SDK info in the event.\n * @param event The event that will be filled with all integrations.\n */\nfunction applyIntegrationsMetadata(event: Event, integrationNames: string[]): void {\n  if (integrationNames.length > 0) {\n    event.sdk = event.sdk || {};\n    event.sdk.integrations = [...(event.sdk.integrations || []), ...integrationNames];\n  }\n}\n\n/**\n * Applies `normalize` function on necessary `Event` attributes to make them safe for serialization.\n * Normalized keys:\n * - `breadcrumbs.data`\n * - `user`\n * - `contexts`\n * - `extra`\n * @param event Event\n * @returns Normalized event\n */\nfunction normalizeEvent(event: Event | null, depth: number, maxBreadth: number): Event | null {\n  if (!event) {\n    return null;\n  }\n\n  const normalized: Event = {\n    ...event,\n    ...(event.breadcrumbs && {\n      breadcrumbs: event.breadcrumbs.map(b => ({\n        ...b,\n        ...(b.data && {\n          data: normalize(b.data, depth, maxBreadth),\n        }),\n      })),\n    }),\n    ...(event.user && {\n      user: normalize(event.user, depth, maxBreadth),\n    }),\n    ...(event.contexts && {\n      contexts: normalize(event.contexts, depth, maxBreadth),\n    }),\n    ...(event.extra && {\n      extra: normalize(event.extra, depth, maxBreadth),\n    }),\n  };\n\n  // event.contexts.trace stores information about a Transaction. Similarly,\n  // event.spans[] stores information about child Spans. Given that a\n  // Transaction is conceptually a Span, normalization should apply to both\n  // Transactions and Spans consistently.\n  // For now the decision is to skip normalization of Transactions and Spans,\n  // so this block overwrites the normalized event to add back the original\n  // Transaction information prior to normalization.\n  if (event.contexts && event.contexts.trace && normalized.contexts) {\n    normalized.contexts.trace = event.contexts.trace;\n\n    // event.contexts.trace.data may contain circular/dangerous data so we need to normalize it\n    if (event.contexts.trace.data) {\n      normalized.contexts.trace.data = normalize(event.contexts.trace.data, depth, maxBreadth);\n    }\n  }\n\n  // event.spans[].data may contain circular/dangerous data so we need to normalize it\n  if (event.spans) {\n    normalized.spans = event.spans.map(span => {\n      // We cannot use the spread operator here because `toJSON` on `span` is non-enumerable\n      if (span.data) {\n        span.data = normalize(span.data, depth, maxBreadth);\n      }\n      return span;\n    });\n  }\n\n  return normalized;\n}\n","/* eslint-disable max-lines */\nimport type {\n  Breadcrumb,\n  BreadcrumbHint,\n  Client,\n  ClientOptions,\n  DataCategory,\n  DsnComponents,\n  DynamicSamplingContext,\n  Envelope,\n  ErrorEvent,\n  Event,\n  EventDropReason,\n  EventHint,\n  Integration,\n  IntegrationClass,\n  Outcome,\n  SdkMetadata,\n  Session,\n  SessionAggregates,\n  Severity,\n  SeverityLevel,\n  Transaction,\n  TransactionEvent,\n  Transport,\n  TransportMakeRequestResponse,\n} from '@sentry/types';\nimport {\n  addItemToEnvelope,\n  checkOrSetAlreadyCaught,\n  createAttachmentEnvelopeItem,\n  isPlainObject,\n  isPrimitive,\n  isThenable,\n  logger,\n  makeDsn,\n  rejectedSyncPromise,\n  resolvedSyncPromise,\n  SentryError,\n  SyncPromise,\n} from '@sentry/utils';\n\nimport { getEnvelopeEndpointWithUrlEncodedAuth } from './api';\nimport { createEventEnvelope, createSessionEnvelope } from './envelope';\nimport type { IntegrationIndex } from './integration';\nimport { setupIntegration, setupIntegrations } from './integration';\nimport type { Scope } from './scope';\nimport { updateSession } from './session';\nimport { prepareEvent } from './utils/prepareEvent';\n\nconst ALREADY_SEEN_ERROR = \"Not capturing exception because it's already been captured.\";\n\n/**\n * Base implementation for all JavaScript SDK clients.\n *\n * Call the constructor with the corresponding options\n * specific to the client subclass. To access these options later, use\n * {@link Client.getOptions}.\n *\n * If a Dsn is specified in the options, it will be parsed and stored. Use\n * {@link Client.getDsn} to retrieve the Dsn at any moment. In case the Dsn is\n * invalid, the constructor will throw a {@link SentryException}. Note that\n * without a valid Dsn, the SDK will not send any events to Sentry.\n *\n * Before sending an event, it is passed through\n * {@link BaseClient._prepareEvent} to add SDK information and scope data\n * (breadcrumbs and context). To add more custom information, override this\n * method and extend the resulting prepared event.\n *\n * To issue automatically created events (e.g. via instrumentation), use\n * {@link Client.captureEvent}. It will prepare the event and pass it through\n * the callback lifecycle. To issue auto-breadcrumbs, use\n * {@link Client.addBreadcrumb}.\n *\n * @example\n * class NodeClient extends BaseClient<NodeOptions> {\n *   public constructor(options: NodeOptions) {\n *     super(options);\n *   }\n *\n *   // ...\n * }\n */\nexport abstract class BaseClient<O extends ClientOptions> implements Client<O> {\n  /** Options passed to the SDK. */\n  protected readonly _options: O;\n\n  /** The client Dsn, if specified in options. Without this Dsn, the SDK will be disabled. */\n  protected readonly _dsn?: DsnComponents;\n\n  protected readonly _transport?: Transport;\n\n  /** Array of set up integrations. */\n  protected _integrations: IntegrationIndex = {};\n\n  /** Indicates whether this client's integrations have been set up. */\n  protected _integrationsInitialized: boolean = false;\n\n  /** Number of calls being processed */\n  protected _numProcessing: number = 0;\n\n  /** Holds flushable  */\n  private _outcomes: { [key: string]: number } = {};\n\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  private _hooks: Record<string, Function[]> = {};\n\n  /**\n   * Initializes this client instance.\n   *\n   * @param options Options for the client.\n   */\n  protected constructor(options: O) {\n    this._options = options;\n\n    if (options.dsn) {\n      this._dsn = makeDsn(options.dsn);\n    } else {\n      __DEBUG_BUILD__ && logger.warn('No DSN provided, client will not do anything.');\n    }\n\n    if (this._dsn) {\n      const url = getEnvelopeEndpointWithUrlEncodedAuth(this._dsn, options);\n      this._transport = options.transport({\n        recordDroppedEvent: this.recordDroppedEvent.bind(this),\n        ...options.transportOptions,\n        url,\n      });\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types\n  public captureException(exception: any, hint?: EventHint, scope?: Scope): string | undefined {\n    // ensure we haven't captured this very object before\n    if (checkOrSetAlreadyCaught(exception)) {\n      __DEBUG_BUILD__ && logger.log(ALREADY_SEEN_ERROR);\n      return;\n    }\n\n    let eventId: string | undefined = hint && hint.event_id;\n\n    this._process(\n      this.eventFromException(exception, hint)\n        .then(event => this._captureEvent(event, hint, scope))\n        .then(result => {\n          eventId = result;\n        }),\n    );\n\n    return eventId;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public captureMessage(\n    message: string,\n    // eslint-disable-next-line deprecation/deprecation\n    level?: Severity | SeverityLevel,\n    hint?: EventHint,\n    scope?: Scope,\n  ): string | undefined {\n    let eventId: string | undefined = hint && hint.event_id;\n\n    const promisedEvent = isPrimitive(message)\n      ? this.eventFromMessage(String(message), level, hint)\n      : this.eventFromException(message, hint);\n\n    this._process(\n      promisedEvent\n        .then(event => this._captureEvent(event, hint, scope))\n        .then(result => {\n          eventId = result;\n        }),\n    );\n\n    return eventId;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public captureEvent(event: Event, hint?: EventHint, scope?: Scope): string | undefined {\n    // ensure we haven't captured this very object before\n    if (hint && hint.originalException && checkOrSetAlreadyCaught(hint.originalException)) {\n      __DEBUG_BUILD__ && logger.log(ALREADY_SEEN_ERROR);\n      return;\n    }\n\n    let eventId: string | undefined = hint && hint.event_id;\n\n    this._process(\n      this._captureEvent(event, hint, scope).then(result => {\n        eventId = result;\n      }),\n    );\n\n    return eventId;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public captureSession(session: Session): void {\n    if (!this._isEnabled()) {\n      __DEBUG_BUILD__ && logger.warn('SDK not enabled, will not capture session.');\n      return;\n    }\n\n    if (!(typeof session.release === 'string')) {\n      __DEBUG_BUILD__ && logger.warn('Discarded session because of missing or non-string release');\n    } else {\n      this.sendSession(session);\n      // After sending, we set init false to indicate it's not the first occurrence\n      updateSession(session, { init: false });\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getDsn(): DsnComponents | undefined {\n    return this._dsn;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getOptions(): O {\n    return this._options;\n  }\n\n  /**\n   * @see SdkMetadata in @sentry/types\n   *\n   * @return The metadata of the SDK\n   */\n  public getSdkMetadata(): SdkMetadata | undefined {\n    return this._options._metadata;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getTransport(): Transport | undefined {\n    return this._transport;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public flush(timeout?: number): PromiseLike<boolean> {\n    const transport = this._transport;\n    if (transport) {\n      return this._isClientDoneProcessing(timeout).then(clientFinished => {\n        return transport.flush(timeout).then(transportFlushed => clientFinished && transportFlushed);\n      });\n    } else {\n      return resolvedSyncPromise(true);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public close(timeout?: number): PromiseLike<boolean> {\n    return this.flush(timeout).then(result => {\n      this.getOptions().enabled = false;\n      return result;\n    });\n  }\n\n  /**\n   * Sets up the integrations\n   */\n  public setupIntegrations(): void {\n    if (this._isEnabled() && !this._integrationsInitialized) {\n      this._integrations = setupIntegrations(this._options.integrations);\n      this._integrationsInitialized = true;\n    }\n  }\n\n  /**\n   * Gets an installed integration by its `id`.\n   *\n   * @returns The installed integration or `undefined` if no integration with that `id` was installed.\n   */\n  public getIntegrationById(integrationId: string): Integration | undefined {\n    return this._integrations[integrationId];\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getIntegration<T extends Integration>(integration: IntegrationClass<T>): T | null {\n    try {\n      return (this._integrations[integration.id] as T) || null;\n    } catch (_oO) {\n      __DEBUG_BUILD__ && logger.warn(`Cannot retrieve integration ${integration.id} from the current Client`);\n      return null;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public addIntegration(integration: Integration): void {\n    setupIntegration(integration, this._integrations);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public sendEvent(event: Event, hint: EventHint = {}): void {\n    if (this._dsn) {\n      let env = createEventEnvelope(event, this._dsn, this._options._metadata, this._options.tunnel);\n\n      for (const attachment of hint.attachments || []) {\n        env = addItemToEnvelope(\n          env,\n          createAttachmentEnvelopeItem(\n            attachment,\n            this._options.transportOptions && this._options.transportOptions.textEncoder,\n          ),\n        );\n      }\n\n      const promise = this._sendEnvelope(env);\n      if (promise) {\n        promise.then(sendResponse => this.emit('afterSendEvent', event, sendResponse), null);\n      }\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public sendSession(session: Session | SessionAggregates): void {\n    if (this._dsn) {\n      const env = createSessionEnvelope(session, this._dsn, this._options._metadata, this._options.tunnel);\n      void this._sendEnvelope(env);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public recordDroppedEvent(reason: EventDropReason, category: DataCategory, _event?: Event): void {\n    // Note: we use `event` in replay, where we overwrite this hook.\n\n    if (this._options.sendClientReports) {\n      // We want to track each category (error, transaction, session, replay_event) separately\n      // but still keep the distinction between different type of outcomes.\n      // We could use nested maps, but it's much easier to read and type this way.\n      // A correct type for map-based implementation if we want to go that route\n      // would be `Partial<Record<SentryRequestType, Partial<Record<Outcome, number>>>>`\n      // With typescript 4.1 we could even use template literal types\n      const key = `${reason}:${category}`;\n      __DEBUG_BUILD__ && logger.log(`Adding outcome: \"${key}\"`);\n\n      // The following works because undefined + 1 === NaN and NaN is falsy\n      this._outcomes[key] = this._outcomes[key] + 1 || 1;\n    }\n  }\n\n  // Keep on() & emit() signatures in sync with types' client.ts interface\n\n  /** @inheritdoc */\n  public on(hook: 'startTransaction' | 'finishTransaction', callback: (transaction: Transaction) => void): void;\n\n  /** @inheritdoc */\n  public on(hook: 'beforeEnvelope', callback: (envelope: Envelope) => void): void;\n\n  /** @inheritdoc */\n  public on(\n    hook: 'afterSendEvent',\n    callback: (event: Event, sendResponse: TransportMakeRequestResponse | void) => void,\n  ): void;\n\n  /** @inheritdoc */\n  public on(hook: 'beforeAddBreadcrumb', callback: (breadcrumb: Breadcrumb, hint?: BreadcrumbHint) => void): void;\n\n  /** @inheritdoc */\n  public on(hook: 'createDsc', callback: (dsc: DynamicSamplingContext) => void): void;\n\n  /** @inheritdoc */\n  public on(hook: string, callback: unknown): void {\n    if (!this._hooks[hook]) {\n      this._hooks[hook] = [];\n    }\n\n    // @ts-ignore We assue the types are correct\n    this._hooks[hook].push(callback);\n  }\n\n  /** @inheritdoc */\n  public emit(hook: 'startTransaction' | 'finishTransaction', transaction: Transaction): void;\n\n  /** @inheritdoc */\n  public emit(hook: 'beforeEnvelope', envelope: Envelope): void;\n\n  /** @inheritdoc */\n  public emit(hook: 'afterSendEvent', event: Event, sendResponse: TransportMakeRequestResponse | void): void;\n\n  /** @inheritdoc */\n  public emit(hook: 'beforeAddBreadcrumb', breadcrumb: Breadcrumb, hint?: BreadcrumbHint): void;\n\n  /** @inheritdoc */\n  public emit(hook: 'createDsc', dsc: DynamicSamplingContext): void;\n\n  /** @inheritdoc */\n  public emit(hook: string, ...rest: unknown[]): void {\n    if (this._hooks[hook]) {\n      // @ts-ignore we cannot enforce the callback to match the hook\n      this._hooks[hook].forEach(callback => callback(...rest));\n    }\n  }\n\n  /** Updates existing session based on the provided event */\n  protected _updateSessionFromEvent(session: Session, event: Event): void {\n    let crashed = false;\n    let errored = false;\n    const exceptions = event.exception && event.exception.values;\n\n    if (exceptions) {\n      errored = true;\n\n      for (const ex of exceptions) {\n        const mechanism = ex.mechanism;\n        if (mechanism && mechanism.handled === false) {\n          crashed = true;\n          break;\n        }\n      }\n    }\n\n    // A session is updated and that session update is sent in only one of the two following scenarios:\n    // 1. Session with non terminal status and 0 errors + an error occurred -> Will set error count to 1 and send update\n    // 2. Session with non terminal status and 1 error + a crash occurred -> Will set status crashed and send update\n    const sessionNonTerminal = session.status === 'ok';\n    const shouldUpdateAndSend = (sessionNonTerminal && session.errors === 0) || (sessionNonTerminal && crashed);\n\n    if (shouldUpdateAndSend) {\n      updateSession(session, {\n        ...(crashed && { status: 'crashed' }),\n        errors: session.errors || Number(errored || crashed),\n      });\n      this.captureSession(session);\n    }\n  }\n\n  /**\n   * Determine if the client is finished processing. Returns a promise because it will wait `timeout` ms before saying\n   * \"no\" (resolving to `false`) in order to give the client a chance to potentially finish first.\n   *\n   * @param timeout The time, in ms, after which to resolve to `false` if the client is still busy. Passing `0` (or not\n   * passing anything) will make the promise wait as long as it takes for processing to finish before resolving to\n   * `true`.\n   * @returns A promise which will resolve to `true` if processing is already done or finishes before the timeout, and\n   * `false` otherwise\n   */\n  protected _isClientDoneProcessing(timeout?: number): PromiseLike<boolean> {\n    return new SyncPromise(resolve => {\n      let ticked: number = 0;\n      const tick: number = 1;\n\n      const interval = setInterval(() => {\n        if (this._numProcessing == 0) {\n          clearInterval(interval);\n          resolve(true);\n        } else {\n          ticked += tick;\n          if (timeout && ticked >= timeout) {\n            clearInterval(interval);\n            resolve(false);\n          }\n        }\n      }, tick);\n    });\n  }\n\n  /** Determines whether this SDK is enabled and a valid Dsn is present. */\n  protected _isEnabled(): boolean {\n    return this.getOptions().enabled !== false && this._dsn !== undefined;\n  }\n\n  /**\n   * Adds common information to events.\n   *\n   * The information includes release and environment from `options`,\n   * breadcrumbs and context (extra, tags and user) from the scope.\n   *\n   * Information that is already present in the event is never overwritten. For\n   * nested objects, such as the context, keys are merged.\n   *\n   * @param event The original event.\n   * @param hint May contain additional information about the original exception.\n   * @param scope A scope containing event metadata.\n   * @returns A new event with more information.\n   */\n  protected _prepareEvent(event: Event, hint: EventHint, scope?: Scope): PromiseLike<Event | null> {\n    const options = this.getOptions();\n    const integrations = Object.keys(this._integrations);\n    if (!hint.integrations && integrations.length > 0) {\n      hint.integrations = integrations;\n    }\n    return prepareEvent(options, event, hint, scope);\n  }\n\n  /**\n   * Processes the event and logs an error in case of rejection\n   * @param event\n   * @param hint\n   * @param scope\n   */\n  protected _captureEvent(event: Event, hint: EventHint = {}, scope?: Scope): PromiseLike<string | undefined> {\n    return this._processEvent(event, hint, scope).then(\n      finalEvent => {\n        return finalEvent.event_id;\n      },\n      reason => {\n        if (__DEBUG_BUILD__) {\n          // If something's gone wrong, log the error as a warning. If it's just us having used a `SentryError` for\n          // control flow, log just the message (no stack) as a log-level log.\n          const sentryError = reason as SentryError;\n          if (sentryError.logLevel === 'log') {\n            logger.log(sentryError.message);\n          } else {\n            logger.warn(sentryError);\n          }\n        }\n        return undefined;\n      },\n    );\n  }\n\n  /**\n   * Processes an event (either error or message) and sends it to Sentry.\n   *\n   * This also adds breadcrumbs and context information to the event. However,\n   * platform specific meta data (such as the User's IP address) must be added\n   * by the SDK implementor.\n   *\n   *\n   * @param event The event to send to Sentry.\n   * @param hint May contain additional information about the original exception.\n   * @param scope A scope containing event metadata.\n   * @returns A SyncPromise that resolves with the event or rejects in case event was/will not be send.\n   */\n  protected _processEvent(event: Event, hint: EventHint, scope?: Scope): PromiseLike<Event> {\n    const options = this.getOptions();\n    const { sampleRate } = options;\n\n    if (!this._isEnabled()) {\n      return rejectedSyncPromise(new SentryError('SDK not enabled, will not capture event.', 'log'));\n    }\n\n    const isTransaction = isTransactionEvent(event);\n    const isError = isErrorEvent(event);\n    const eventType = event.type || 'error';\n    const beforeSendLabel = `before send for type \\`${eventType}\\``;\n\n    // 1.0 === 100% events are sent\n    // 0.0 === 0% events are sent\n    // Sampling for transaction happens somewhere else\n    if (isError && typeof sampleRate === 'number' && Math.random() > sampleRate) {\n      this.recordDroppedEvent('sample_rate', 'error', event);\n      return rejectedSyncPromise(\n        new SentryError(\n          `Discarding event because it's not included in the random sample (sampling rate = ${sampleRate})`,\n          'log',\n        ),\n      );\n    }\n\n    const dataCategory: DataCategory = eventType === 'replay_event' ? 'replay' : eventType;\n\n    return this._prepareEvent(event, hint, scope)\n      .then(prepared => {\n        if (prepared === null) {\n          this.recordDroppedEvent('event_processor', dataCategory, event);\n          throw new SentryError('An event processor returned `null`, will not send event.', 'log');\n        }\n\n        const isInternalException = hint.data && (hint.data as { __sentry__: boolean }).__sentry__ === true;\n        if (isInternalException) {\n          return prepared;\n        }\n\n        const result = processBeforeSend(options, prepared, hint);\n        return _validateBeforeSendResult(result, beforeSendLabel);\n      })\n      .then(processedEvent => {\n        if (processedEvent === null) {\n          this.recordDroppedEvent('before_send', dataCategory, event);\n          throw new SentryError(`${beforeSendLabel} returned \\`null\\`, will not send event.`, 'log');\n        }\n\n        const session = scope && scope.getSession();\n        if (!isTransaction && session) {\n          this._updateSessionFromEvent(session, processedEvent);\n        }\n\n        // None of the Sentry built event processor will update transaction name,\n        // so if the transaction name has been changed by an event processor, we know\n        // it has to come from custom event processor added by a user\n        const transactionInfo = processedEvent.transaction_info;\n        if (isTransaction && transactionInfo && processedEvent.transaction !== event.transaction) {\n          const source = 'custom';\n          processedEvent.transaction_info = {\n            ...transactionInfo,\n            source,\n          };\n        }\n\n        this.sendEvent(processedEvent, hint);\n        return processedEvent;\n      })\n      .then(null, reason => {\n        if (reason instanceof SentryError) {\n          throw reason;\n        }\n\n        this.captureException(reason, {\n          data: {\n            __sentry__: true,\n          },\n          originalException: reason,\n        });\n        throw new SentryError(\n          `Event processing pipeline threw an error, original event will not be sent. Details have been sent as a new event.\\nReason: ${reason}`,\n        );\n      });\n  }\n\n  /**\n   * Occupies the client with processing and event\n   */\n  protected _process<T>(promise: PromiseLike<T>): void {\n    this._numProcessing++;\n    void promise.then(\n      value => {\n        this._numProcessing--;\n        return value;\n      },\n      reason => {\n        this._numProcessing--;\n        return reason;\n      },\n    );\n  }\n\n  /**\n   * @inheritdoc\n   */\n  protected _sendEnvelope(envelope: Envelope): PromiseLike<void | TransportMakeRequestResponse> | void {\n    if (this._transport && this._dsn) {\n      this.emit('beforeEnvelope', envelope);\n\n      return this._transport.send(envelope).then(null, reason => {\n        __DEBUG_BUILD__ && logger.error('Error while sending event:', reason);\n      });\n    } else {\n      __DEBUG_BUILD__ && logger.error('Transport disabled');\n    }\n  }\n\n  /**\n   * Clears outcomes on this client and returns them.\n   */\n  protected _clearOutcomes(): Outcome[] {\n    const outcomes = this._outcomes;\n    this._outcomes = {};\n    return Object.keys(outcomes).map(key => {\n      const [reason, category] = key.split(':') as [EventDropReason, DataCategory];\n      return {\n        reason,\n        category,\n        quantity: outcomes[key],\n      };\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types\n  public abstract eventFromException(_exception: any, _hint?: EventHint): PromiseLike<Event>;\n\n  /**\n   * @inheritDoc\n   */\n  public abstract eventFromMessage(\n    _message: string,\n    // eslint-disable-next-line deprecation/deprecation\n    _level?: Severity | SeverityLevel,\n    _hint?: EventHint,\n  ): PromiseLike<Event>;\n}\n\n/**\n * Verifies that return value of configured `beforeSend` or `beforeSendTransaction` is of expected type, and returns the value if so.\n */\nfunction _validateBeforeSendResult(\n  beforeSendResult: PromiseLike<Event | null> | Event | null,\n  beforeSendLabel: string,\n): PromiseLike<Event | null> | Event | null {\n  const invalidValueError = `${beforeSendLabel} must return \\`null\\` or a valid event.`;\n  if (isThenable(beforeSendResult)) {\n    return beforeSendResult.then(\n      event => {\n        if (!isPlainObject(event) && event !== null) {\n          throw new SentryError(invalidValueError);\n        }\n        return event;\n      },\n      e => {\n        throw new SentryError(`${beforeSendLabel} rejected with ${e}`);\n      },\n    );\n  } else if (!isPlainObject(beforeSendResult) && beforeSendResult !== null) {\n    throw new SentryError(invalidValueError);\n  }\n  return beforeSendResult;\n}\n\n/**\n * Process the matching `beforeSendXXX` callback.\n */\nfunction processBeforeSend(\n  options: ClientOptions,\n  event: Event,\n  hint: EventHint,\n): PromiseLike<Event | null> | Event | null {\n  const { beforeSend, beforeSendTransaction } = options;\n\n  if (isErrorEvent(event) && beforeSend) {\n    return beforeSend(event, hint);\n  }\n\n  if (isTransactionEvent(event) && beforeSendTransaction) {\n    return beforeSendTransaction(event, hint);\n  }\n\n  return event;\n}\n\nfunction isErrorEvent(event: Event): event is ErrorEvent {\n  return event.type === undefined;\n}\n\nfunction isTransactionEvent(event: Event): event is TransactionEvent {\n  return event.type === 'transaction';\n}\n","import type { Scope } from '@sentry/core';\nimport { BaseClient, SDK_VERSION } from '@sentry/core';\nimport type {\n  BrowserClientReplayOptions,\n  ClientOptions,\n  Event,\n  EventHint,\n  Options,\n  Severity,\n  SeverityLevel,\n  UserFeedback,\n} from '@sentry/types';\nimport { createClientReportEnvelope, dsnToString, getSDKSource, logger } from '@sentry/utils';\n\nimport { eventFromException, eventFromMessage } from './eventbuilder';\nimport { WINDOW } from './helpers';\nimport type { Breadcrumbs } from './integrations';\nimport { BREADCRUMB_INTEGRATION_ID } from './integrations/breadcrumbs';\nimport type { BrowserTransportOptions } from './transports/types';\nimport { createUserFeedbackEnvelope } from './userfeedback';\n\n/**\n * Configuration options for the Sentry Browser SDK.\n * @see @sentry/types Options for more information.\n */\nexport type BrowserOptions = Options<BrowserTransportOptions> & BrowserClientReplayOptions;\n\n/**\n * Configuration options for the Sentry Browser SDK Client class\n * @see BrowserClient for more information.\n */\nexport type BrowserClientOptions = ClientOptions<BrowserTransportOptions>;\n\n/**\n * The Sentry Browser SDK Client.\n *\n * @see BrowserOptions for documentation on configuration options.\n * @see SentryClient for usage documentation.\n */\nexport class BrowserClient extends BaseClient<BrowserClientOptions> {\n  /**\n   * Creates a new Browser SDK instance.\n   *\n   * @param options Configuration options for this SDK.\n   */\n  public constructor(options: BrowserClientOptions) {\n    const sdkSource = WINDOW.SENTRY_SDK_SOURCE || getSDKSource();\n\n    options._metadata = options._metadata || {};\n    options._metadata.sdk = options._metadata.sdk || {\n      name: 'sentry.javascript.browser',\n      packages: [\n        {\n          name: `${sdkSource}:@sentry/browser`,\n          version: SDK_VERSION,\n        },\n      ],\n      version: SDK_VERSION,\n    };\n\n    super(options);\n\n    if (options.sendClientReports && WINDOW.document) {\n      WINDOW.document.addEventListener('visibilitychange', () => {\n        if (WINDOW.document.visibilityState === 'hidden') {\n          this._flushOutcomes();\n        }\n      });\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public eventFromException(exception: unknown, hint?: EventHint): PromiseLike<Event> {\n    return eventFromException(this._options.stackParser, exception, hint, this._options.attachStacktrace);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public eventFromMessage(\n    message: string,\n    // eslint-disable-next-line deprecation/deprecation\n    level: Severity | SeverityLevel = 'info',\n    hint?: EventHint,\n  ): PromiseLike<Event> {\n    return eventFromMessage(this._options.stackParser, message, level, hint, this._options.attachStacktrace);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public sendEvent(event: Event, hint?: EventHint): void {\n    // We only want to add the sentry event breadcrumb when the user has the breadcrumb integration installed and\n    // activated its `sentry` option.\n    // We also do not want to use the `Breadcrumbs` class here directly, because we do not want it to be included in\n    // bundles, if it is not used by the SDK.\n    // This all sadly is a bit ugly, but we currently don't have a \"pre-send\" hook on the integrations so we do it this\n    // way for now.\n    const breadcrumbIntegration = this.getIntegrationById(BREADCRUMB_INTEGRATION_ID) as Breadcrumbs | undefined;\n    // We check for definedness of `addSentryBreadcrumb` in case users provided their own integration with id\n    // \"Breadcrumbs\" that does not have this function.\n    if (breadcrumbIntegration && breadcrumbIntegration.addSentryBreadcrumb) {\n      breadcrumbIntegration.addSentryBreadcrumb(event);\n    }\n\n    super.sendEvent(event, hint);\n  }\n\n  /**\n   * Sends user feedback to Sentry.\n   */\n  public captureUserFeedback(feedback: UserFeedback): void {\n    if (!this._isEnabled()) {\n      __DEBUG_BUILD__ && logger.warn('SDK not enabled, will not capture user feedback.');\n      return;\n    }\n\n    const envelope = createUserFeedbackEnvelope(feedback, {\n      metadata: this.getSdkMetadata(),\n      dsn: this.getDsn(),\n      tunnel: this.getOptions().tunnel,\n    });\n    void this._sendEnvelope(envelope);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  protected _prepareEvent(event: Event, hint: EventHint, scope?: Scope): PromiseLike<Event | null> {\n    event.platform = event.platform || 'javascript';\n    return super._prepareEvent(event, hint, scope);\n  }\n\n  /**\n   * Sends client reports as an envelope.\n   */\n  private _flushOutcomes(): void {\n    const outcomes = this._clearOutcomes();\n\n    if (outcomes.length === 0) {\n      __DEBUG_BUILD__ && logger.log('No outcomes to send');\n      return;\n    }\n\n    if (!this._dsn) {\n      __DEBUG_BUILD__ && logger.log('No dsn provided, will not send outcomes');\n      return;\n    }\n\n    __DEBUG_BUILD__ && logger.log('Sending outcomes:', outcomes);\n\n    const envelope = createClientReportEnvelope(outcomes, this._options.tunnel && dsnToString(this._dsn));\n    void this._sendEnvelope(envelope);\n  }\n}\n","import type { DsnComponents, EventEnvelope, SdkMetadata, UserFeedback, UserFeedbackItem } from '@sentry/types';\nimport { createEnvelope, dsnToString } from '@sentry/utils';\n\n/**\n * Creates an envelope from a user feedback.\n */\nexport function createUserFeedbackEnvelope(\n  feedback: UserFeedback,\n  {\n    metadata,\n    tunnel,\n    dsn,\n  }: {\n    metadata: SdkMetadata | undefined;\n    tunnel: string | undefined;\n    dsn: DsnComponents | undefined;\n  },\n): EventEnvelope {\n  const headers: EventEnvelope[0] = {\n    event_id: feedback.event_id,\n    sent_at: new Date().toISOString(),\n    ...(metadata &&\n      metadata.sdk && {\n        sdk: {\n          name: metadata.sdk.name,\n          version: metadata.sdk.version,\n        },\n      }),\n    ...(!!tunnel && !!dsn && { dsn: dsnToString(dsn) }),\n  };\n  const item = createUserFeedbackEnvelopeItem(feedback);\n\n  return createEnvelope(headers, [item]);\n}\n\nfunction createUserFeedbackEnvelopeItem(feedback: UserFeedback): UserFeedbackItem {\n  const feedbackHeaders: UserFeedbackItem[0] = {\n    type: 'user_report',\n  };\n  return [feedbackHeaders, feedback];\n}\n","import type { ClientReport, ClientReportEnvelope, ClientReportItem } from '@sentry/types';\n\nimport { createEnvelope } from './envelope';\nimport { dateTimestampInSeconds } from './time';\n\n/**\n * Creates client report envelope\n * @param discarded_events An array of discard events\n * @param dsn A DSN that can be set on the header. Optional.\n */\nexport function createClientReportEnvelope(\n  discarded_events: ClientReport['discarded_events'],\n  dsn?: string,\n  timestamp?: number,\n): ClientReportEnvelope {\n  const clientReportItem: ClientReportItem = [\n    { type: 'client_report' },\n    {\n      timestamp: timestamp || dateTimestampInSeconds(),\n      discarded_events,\n    },\n  ];\n  return createEnvelope<ClientReportEnvelope>(dsn ? { dsn } : {}, [clientReportItem]);\n}\n","import type { TransportMakeRequestResponse } from '@sentry/types';\n\n// Intentionally keeping the key broad, as we don't know for sure what rate limit headers get returned from backend\nexport type RateLimits = Record<string, number>;\n\nexport const DEFAULT_RETRY_AFTER = 60 * 1000; // 60 seconds\n\n/**\n * Extracts Retry-After value from the request header or returns default value\n * @param header string representation of 'Retry-After' header\n * @param now current unix timestamp\n *\n */\nexport function parseRetryAfterHeader(header: string, now: number = Date.now()): number {\n  const headerDelay = parseInt(`${header}`, 10);\n  if (!isNaN(headerDelay)) {\n    return headerDelay * 1000;\n  }\n\n  const headerDate = Date.parse(`${header}`);\n  if (!isNaN(headerDate)) {\n    return headerDate - now;\n  }\n\n  return DEFAULT_RETRY_AFTER;\n}\n\n/**\n * Gets the time that the given category is disabled until for rate limiting.\n * In case no category-specific limit is set but a general rate limit across all categories is active,\n * that time is returned.\n *\n * @return the time in ms that the category is disabled until or 0 if there's no active rate limit.\n */\nexport function disabledUntil(limits: RateLimits, category: string): number {\n  return limits[category] || limits.all || 0;\n}\n\n/**\n * Checks if a category is rate limited\n */\nexport function isRateLimited(limits: RateLimits, category: string, now: number = Date.now()): boolean {\n  return disabledUntil(limits, category) > now;\n}\n\n/**\n * Update ratelimits from incoming headers.\n *\n * @return the updated RateLimits object.\n */\nexport function updateRateLimits(\n  limits: RateLimits,\n  { statusCode, headers }: TransportMakeRequestResponse,\n  now: number = Date.now(),\n): RateLimits {\n  const updatedRateLimits: RateLimits = {\n    ...limits,\n  };\n\n  // \"The name is case-insensitive.\"\n  // https://developer.mozilla.org/en-US/docs/Web/API/Headers/get\n  const rateLimitHeader = headers && headers['x-sentry-rate-limits'];\n  const retryAfterHeader = headers && headers['retry-after'];\n\n  if (rateLimitHeader) {\n    /**\n     * rate limit headers are of the form\n     *     <header>,<header>,..\n     * where each <header> is of the form\n     *     <retry_after>: <categories>: <scope>: <reason_code>\n     * where\n     *     <retry_after> is a delay in seconds\n     *     <categories> is the event type(s) (error, transaction, etc) being rate limited and is of the form\n     *         <category>;<category>;...\n     *     <scope> is what's being limited (org, project, or key) - ignored by SDK\n     *     <reason_code> is an arbitrary string like \"org_quota\" - ignored by SDK\n     */\n    for (const limit of rateLimitHeader.trim().split(',')) {\n      const [retryAfter, categories] = limit.split(':', 2);\n      const headerDelay = parseInt(retryAfter, 10);\n      const delay = (!isNaN(headerDelay) ? headerDelay : 60) * 1000; // 60sec default\n      if (!categories) {\n        updatedRateLimits.all = now + delay;\n      } else {\n        for (const category of categories.split(';')) {\n          updatedRateLimits[category] = now + delay;\n        }\n      }\n    }\n  } else if (retryAfterHeader) {\n    updatedRateLimits.all = now + parseRetryAfterHeader(retryAfterHeader, now);\n  } else if (statusCode === 429) {\n    updatedRateLimits.all = now + 60 * 1000;\n  }\n\n  return updatedRateLimits;\n}\n","import type {\n  Envelope,\n  EnvelopeItem,\n  EnvelopeItemType,\n  Event,\n  EventDropReason,\n  EventItem,\n  InternalBaseTransportOptions,\n  Transport,\n  TransportMakeRequestResponse,\n  TransportRequestExecutor,\n} from '@sentry/types';\nimport type { PromiseBuffer, RateLimits } from '@sentry/utils';\nimport {\n  createEnvelope,\n  envelopeItemTypeToDataCategory,\n  forEachEnvelopeItem,\n  isRateLimited,\n  logger,\n  makePromiseBuffer,\n  resolvedSyncPromise,\n  SentryError,\n  serializeEnvelope,\n  updateRateLimits,\n} from '@sentry/utils';\n\nexport const DEFAULT_TRANSPORT_BUFFER_SIZE = 30;\n\n/**\n * Creates an instance of a Sentry `Transport`\n *\n * @param options\n * @param makeRequest\n */\nexport function createTransport(\n  options: InternalBaseTransportOptions,\n  makeRequest: TransportRequestExecutor,\n  buffer: PromiseBuffer<void | TransportMakeRequestResponse> = makePromiseBuffer(\n    options.bufferSize || DEFAULT_TRANSPORT_BUFFER_SIZE,\n  ),\n): Transport {\n  let rateLimits: RateLimits = {};\n  const flush = (timeout?: number): PromiseLike<boolean> => buffer.drain(timeout);\n\n  function send(envelope: Envelope): PromiseLike<void | TransportMakeRequestResponse> {\n    const filteredEnvelopeItems: EnvelopeItem[] = [];\n\n    // Drop rate limited items from envelope\n    forEachEnvelopeItem(envelope, (item, type) => {\n      const envelopeItemDataCategory = envelopeItemTypeToDataCategory(type);\n      if (isRateLimited(rateLimits, envelopeItemDataCategory)) {\n        const event: Event | undefined = getEventForEnvelopeItem(item, type);\n        options.recordDroppedEvent('ratelimit_backoff', envelopeItemDataCategory, event);\n      } else {\n        filteredEnvelopeItems.push(item);\n      }\n    });\n\n    // Skip sending if envelope is empty after filtering out rate limited events\n    if (filteredEnvelopeItems.length === 0) {\n      return resolvedSyncPromise();\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const filteredEnvelope: Envelope = createEnvelope(envelope[0], filteredEnvelopeItems as any);\n\n    // Creates client report for each item in an envelope\n    const recordEnvelopeLoss = (reason: EventDropReason): void => {\n      forEachEnvelopeItem(filteredEnvelope, (item, type) => {\n        const event: Event | undefined = getEventForEnvelopeItem(item, type);\n        options.recordDroppedEvent(reason, envelopeItemTypeToDataCategory(type), event);\n      });\n    };\n\n    const requestTask = (): PromiseLike<void | TransportMakeRequestResponse> =>\n      makeRequest({ body: serializeEnvelope(filteredEnvelope, options.textEncoder) }).then(\n        response => {\n          // We don't want to throw on NOK responses, but we want to at least log them\n          if (response.statusCode !== undefined && (response.statusCode < 200 || response.statusCode >= 300)) {\n            __DEBUG_BUILD__ && logger.warn(`Sentry responded with status code ${response.statusCode} to sent event.`);\n          }\n\n          rateLimits = updateRateLimits(rateLimits, response);\n          return response;\n        },\n        error => {\n          recordEnvelopeLoss('network_error');\n          throw error;\n        },\n      );\n\n    return buffer.add(requestTask).then(\n      result => result,\n      error => {\n        if (error instanceof SentryError) {\n          __DEBUG_BUILD__ && logger.error('Skipped sending event because buffer is full.');\n          recordEnvelopeLoss('queue_overflow');\n          return resolvedSyncPromise();\n        } else {\n          throw error;\n        }\n      },\n    );\n  }\n\n  // We use this to identifify if the transport is the base transport\n  // TODO (v8): Remove this again as we'll no longer need it\n  send.__sentry__baseTransport__ = true;\n\n  return {\n    send,\n    flush,\n  };\n}\n\nfunction getEventForEnvelopeItem(item: Envelope[1][number], type: EnvelopeItemType): Event | undefined {\n  if (type !== 'event' && type !== 'transaction') {\n    return undefined;\n  }\n\n  return Array.isArray(item) ? (item as EventItem)[1] : undefined;\n}\n","import { SentryError } from './error';\nimport { rejectedSyncPromise, resolvedSyncPromise, SyncPromise } from './syncpromise';\n\nexport interface PromiseBuffer<T> {\n  // exposes the internal array so tests can assert on the state of it.\n  // XXX: this really should not be public api.\n  $: Array<PromiseLike<T>>;\n  add(taskProducer: () => PromiseLike<T>): PromiseLike<T>;\n  drain(timeout?: number): PromiseLike<boolean>;\n}\n\n/**\n * Creates an new PromiseBuffer object with the specified limit\n * @param limit max number of promises that can be stored in the buffer\n */\nexport function makePromiseBuffer<T>(limit?: number): PromiseBuffer<T> {\n  const buffer: Array<PromiseLike<T>> = [];\n\n  function isReady(): boolean {\n    return limit === undefined || buffer.length < limit;\n  }\n\n  /**\n   * Remove a promise from the queue.\n   *\n   * @param task Can be any PromiseLike<T>\n   * @returns Removed promise.\n   */\n  function remove(task: PromiseLike<T>): PromiseLike<T> {\n    return buffer.splice(buffer.indexOf(task), 1)[0];\n  }\n\n  /**\n   * Add a promise (representing an in-flight action) to the queue, and set it to remove itself on fulfillment.\n   *\n   * @param taskProducer A function producing any PromiseLike<T>; In previous versions this used to be `task:\n   *        PromiseLike<T>`, but under that model, Promises were instantly created on the call-site and their executor\n   *        functions therefore ran immediately. Thus, even if the buffer was full, the action still happened. By\n   *        requiring the promise to be wrapped in a function, we can defer promise creation until after the buffer\n   *        limit check.\n   * @returns The original promise.\n   */\n  function add(taskProducer: () => PromiseLike<T>): PromiseLike<T> {\n    if (!isReady()) {\n      return rejectedSyncPromise(new SentryError('Not adding Promise because buffer limit was reached.'));\n    }\n\n    // start the task and add its promise to the queue\n    const task = taskProducer();\n    if (buffer.indexOf(task) === -1) {\n      buffer.push(task);\n    }\n    void task\n      .then(() => remove(task))\n      // Use `then(null, rejectionHandler)` rather than `catch(rejectionHandler)` so that we can use `PromiseLike`\n      // rather than `Promise`. `PromiseLike` doesn't have a `.catch` method, making its polyfill smaller. (ES5 didn't\n      // have promises, so TS has to polyfill when down-compiling.)\n      .then(null, () =>\n        remove(task).then(null, () => {\n          // We have to add another catch here because `remove()` starts a new promise chain.\n        }),\n      );\n    return task;\n  }\n\n  /**\n   * Wait for all promises in the queue to resolve or for timeout to expire, whichever comes first.\n   *\n   * @param timeout The time, in ms, after which to resolve to `false` if the queue is still non-empty. Passing `0` (or\n   * not passing anything) will make the promise wait as long as it takes for the queue to drain before resolving to\n   * `true`.\n   * @returns A promise which will resolve to `true` if the queue is already empty or drains before the timeout, and\n   * `false` otherwise\n   */\n  function drain(timeout?: number): PromiseLike<boolean> {\n    return new SyncPromise<boolean>((resolve, reject) => {\n      let counter = buffer.length;\n\n      if (!counter) {\n        return resolve(true);\n      }\n\n      // wait for `timeout` ms and then resolve to `false` (if not cancelled first)\n      const capturedSetTimeout = setTimeout(() => {\n        if (timeout && timeout > 0) {\n          resolve(false);\n        }\n      }, timeout);\n\n      // if all promises resolve in time, cancel the timer and resolve to `true`\n      buffer.forEach(item => {\n        void resolvedSyncPromise(item).then(() => {\n          if (!--counter) {\n            clearTimeout(capturedSetTimeout);\n            resolve(true);\n          }\n        }, reject);\n      });\n    });\n  }\n\n  return {\n    $: buffer,\n    add,\n    drain,\n  };\n}\n","import { isNativeFetch, logger } from '@sentry/utils';\n\nimport { WINDOW } from '../helpers';\n\nlet cachedFetchImpl: FetchImpl | undefined = undefined;\n\nexport type FetchImpl = typeof fetch;\n\n/**\n * A special usecase for incorrectly wrapped Fetch APIs in conjunction with ad-blockers.\n * Whenever someone wraps the Fetch API and returns the wrong promise chain,\n * this chain becomes orphaned and there is no possible way to capture it's rejections\n * other than allowing it bubble up to this very handler. eg.\n *\n * const f = window.fetch;\n * window.fetch = function () {\n *   const p = f.apply(this, arguments);\n *\n *   p.then(function() {\n *     console.log('hi.');\n *   });\n *\n *   return p;\n * }\n *\n * `p.then(function () { ... })` is producing a completely separate promise chain,\n * however, what's returned is `p` - the result of original `fetch` call.\n *\n * This mean, that whenever we use the Fetch API to send our own requests, _and_\n * some ad-blocker blocks it, this orphaned chain will _always_ reject,\n * effectively causing another event to be captured.\n * This makes a whole process become an infinite loop, which we need to somehow\n * deal with, and break it in one way or another.\n *\n * To deal with this issue, we are making sure that we _always_ use the real\n * browser Fetch API, instead of relying on what `window.fetch` exposes.\n * The only downside to this would be missing our own requests as breadcrumbs,\n * but because we are already not doing this, it should be just fine.\n *\n * Possible failed fetch error messages per-browser:\n *\n * Chrome:  Failed to fetch\n * Edge:    Failed to Fetch\n * Firefox: NetworkError when attempting to fetch resource\n * Safari:  resource blocked by content blocker\n */\nexport function getNativeFetchImplementation(): FetchImpl {\n  if (cachedFetchImpl) {\n    return cachedFetchImpl;\n  }\n\n  /* eslint-disable @typescript-eslint/unbound-method */\n\n  // Fast path to avoid DOM I/O\n  if (isNativeFetch(WINDOW.fetch)) {\n    return (cachedFetchImpl = WINDOW.fetch.bind(WINDOW));\n  }\n\n  const document = WINDOW.document;\n  let fetchImpl = WINDOW.fetch;\n  // eslint-disable-next-line deprecation/deprecation\n  if (document && typeof document.createElement === 'function') {\n    try {\n      const sandbox = document.createElement('iframe');\n      sandbox.hidden = true;\n      document.head.appendChild(sandbox);\n      const contentWindow = sandbox.contentWindow;\n      if (contentWindow && contentWindow.fetch) {\n        fetchImpl = contentWindow.fetch;\n      }\n      document.head.removeChild(sandbox);\n    } catch (e) {\n      __DEBUG_BUILD__ &&\n        logger.warn('Could not create sandbox iframe for pure fetch check, bailing to window.fetch: ', e);\n    }\n  }\n\n  return (cachedFetchImpl = fetchImpl.bind(WINDOW));\n  /* eslint-enable @typescript-eslint/unbound-method */\n}\n\n/** Clears cached fetch impl */\nexport function clearCachedFetchImplementation(): void {\n  cachedFetchImpl = undefined;\n}\n","import { createTransport } from '@sentry/core';\nimport type { Transport, TransportMakeRequestResponse, TransportRequest } from '@sentry/types';\nimport { rejectedSyncPromise } from '@sentry/utils';\n\nimport type { BrowserTransportOptions } from './types';\nimport type { FetchImpl } from './utils';\nimport { clearCachedFetchImplementation, getNativeFetchImplementation } from './utils';\n\n/**\n * Creates a Transport that uses the Fetch API to send events to Sentry.\n */\nexport function makeFetchTransport(\n  options: BrowserTransportOptions,\n  nativeFetch: FetchImpl = getNativeFetchImplementation(),\n): Transport {\n  let pendingBodySize = 0;\n  let pendingCount = 0;\n\n  function makeRequest(request: TransportRequest): PromiseLike<TransportMakeRequestResponse> {\n    const requestSize = request.body.length;\n    pendingBodySize += requestSize;\n    pendingCount++;\n\n    const requestOptions: RequestInit = {\n      body: request.body,\n      method: 'POST',\n      referrerPolicy: 'origin',\n      headers: options.headers,\n      // Outgoing requests are usually cancelled when navigating to a different page, causing a \"TypeError: Failed to\n      // fetch\" error and sending a \"network_error\" client-outcome - in Chrome, the request status shows \"(cancelled)\".\n      // The `keepalive` flag keeps outgoing requests alive, even when switching pages. We want this since we're\n      // frequently sending events right before the user is switching pages (eg. whenfinishing navigation transactions).\n      // Gotchas:\n      // - `keepalive` isn't supported by Firefox\n      // - As per spec (https://fetch.spec.whatwg.org/#http-network-or-cache-fetch):\n      //   If the sum of contentLength and inflightKeepaliveBytes is greater than 64 kibibytes, then return a network error.\n      //   We will therefore only activate the flag when we're below that limit.\n      // There is also a limit of requests that can be open at the same time, so we also limit this to 15\n      // See https://github.com/getsentry/sentry-javascript/pull/7553 for details\n      keepalive: pendingBodySize <= 60_000 && pendingCount < 15,\n      ...options.fetchOptions,\n    };\n\n    try {\n      return nativeFetch(options.url, requestOptions).then(response => {\n        pendingBodySize -= requestSize;\n        pendingCount--;\n        return {\n          statusCode: response.status,\n          headers: {\n            'x-sentry-rate-limits': response.headers.get('X-Sentry-Rate-Limits'),\n            'retry-after': response.headers.get('Retry-After'),\n          },\n        };\n      });\n    } catch (e) {\n      clearCachedFetchImplementation();\n      pendingBodySize -= requestSize;\n      pendingCount--;\n      return rejectedSyncPromise(e);\n    }\n  }\n\n  return createTransport(options, makeRequest);\n}\n","// This was originally forked from https://github.com/csnover/TraceKit, and was largely\n// re - written as part of raven - js.\n//\n// This code was later copied to the JavaScript mono - repo and further modified and\n// refactored over the years.\n\n// Copyright (c) 2013 Onur Can Cakmak onur.cakmak@gmail.com and all TraceKit contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this\n// software and associated documentation files(the 'Software'), to deal in the Software\n// without restriction, including without limitation the rights to use, copy, modify,\n// merge, publish, distribute, sublicense, and / or sell copies of the Software, and to\n// permit persons to whom the Software is furnished to do so, subject to the following\n// conditions:\n//\n// The above copyright notice and this permission notice shall be included in all copies\n// or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\n// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\n// PARTICULAR PURPOSE AND NONINFRINGEMENT.IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF\n// CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE\n// OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nimport type { StackFrame, StackLineParser, StackLineParserFn } from '@sentry/types';\nimport { createStackParser } from '@sentry/utils';\n\n// global reference to slice\nconst UNKNOWN_FUNCTION = '?';\n\nconst OPERA10_PRIORITY = 10;\nconst OPERA11_PRIORITY = 20;\nconst CHROME_PRIORITY = 30;\nconst WINJS_PRIORITY = 40;\nconst GECKO_PRIORITY = 50;\n\nfunction createFrame(filename: string, func: string, lineno?: number, colno?: number): StackFrame {\n  const frame: StackFrame = {\n    filename,\n    function: func,\n    in_app: true, // All browser frames are considered in_app\n  };\n\n  if (lineno !== undefined) {\n    frame.lineno = lineno;\n  }\n\n  if (colno !== undefined) {\n    frame.colno = colno;\n  }\n\n  return frame;\n}\n\n// Chromium based browsers: Chrome, Brave, new Opera, new Edge\nconst chromeRegex =\n  /^\\s*at (?:(.+?\\)(?: \\[.+\\])?|.*?) ?\\((?:address at )?)?(?:async )?((?:<anonymous>|[-a-z]+:|.*bundle|\\/)?.*?)(?::(\\d+))?(?::(\\d+))?\\)?\\s*$/i;\nconst chromeEvalRegex = /\\((\\S*)(?::(\\d+))(?::(\\d+))\\)/;\n\nconst chrome: StackLineParserFn = line => {\n  const parts = chromeRegex.exec(line);\n\n  if (parts) {\n    const isEval = parts[2] && parts[2].indexOf('eval') === 0; // start of line\n\n    if (isEval) {\n      const subMatch = chromeEvalRegex.exec(parts[2]);\n\n      if (subMatch) {\n        // throw out eval line/column and use top-most line/column number\n        parts[2] = subMatch[1]; // url\n        parts[3] = subMatch[2]; // line\n        parts[4] = subMatch[3]; // column\n      }\n    }\n\n    // Kamil: One more hack won't hurt us right? Understanding and adding more rules on top of these regexps right now\n    // would be way too time consuming. (TODO: Rewrite whole RegExp to be more readable)\n    const [func, filename] = extractSafariExtensionDetails(parts[1] || UNKNOWN_FUNCTION, parts[2]);\n\n    return createFrame(filename, func, parts[3] ? +parts[3] : undefined, parts[4] ? +parts[4] : undefined);\n  }\n\n  return;\n};\n\nexport const chromeStackLineParser: StackLineParser = [CHROME_PRIORITY, chrome];\n\n// gecko regex: `(?:bundle|\\d+\\.js)`: `bundle` is for react native, `\\d+\\.js` also but specifically for ram bundles because it\n// generates filenames without a prefix like `file://` the filenames in the stacktrace are just 42.js\n// We need this specific case for now because we want no other regex to match.\nconst geckoREgex =\n  /^\\s*(.*?)(?:\\((.*?)\\))?(?:^|@)?((?:[-a-z]+)?:\\/.*?|\\[native code\\]|[^@]*(?:bundle|\\d+\\.js)|\\/[\\w\\-. /=]+)(?::(\\d+))?(?::(\\d+))?\\s*$/i;\nconst geckoEvalRegex = /(\\S+) line (\\d+)(?: > eval line \\d+)* > eval/i;\n\nconst gecko: StackLineParserFn = line => {\n  const parts = geckoREgex.exec(line);\n\n  if (parts) {\n    const isEval = parts[3] && parts[3].indexOf(' > eval') > -1;\n    if (isEval) {\n      const subMatch = geckoEvalRegex.exec(parts[3]);\n\n      if (subMatch) {\n        // throw out eval line/column and use top-most line number\n        parts[1] = parts[1] || 'eval';\n        parts[3] = subMatch[1];\n        parts[4] = subMatch[2];\n        parts[5] = ''; // no column when eval\n      }\n    }\n\n    let filename = parts[3];\n    let func = parts[1] || UNKNOWN_FUNCTION;\n    [func, filename] = extractSafariExtensionDetails(func, filename);\n\n    return createFrame(filename, func, parts[4] ? +parts[4] : undefined, parts[5] ? +parts[5] : undefined);\n  }\n\n  return;\n};\n\nexport const geckoStackLineParser: StackLineParser = [GECKO_PRIORITY, gecko];\n\nconst winjsRegex = /^\\s*at (?:((?:\\[object object\\])?.+) )?\\(?((?:[-a-z]+):.*?):(\\d+)(?::(\\d+))?\\)?\\s*$/i;\n\nconst winjs: StackLineParserFn = line => {\n  const parts = winjsRegex.exec(line);\n\n  return parts\n    ? createFrame(parts[2], parts[1] || UNKNOWN_FUNCTION, +parts[3], parts[4] ? +parts[4] : undefined)\n    : undefined;\n};\n\nexport const winjsStackLineParser: StackLineParser = [WINJS_PRIORITY, winjs];\n\nconst opera10Regex = / line (\\d+).*script (?:in )?(\\S+)(?:: in function (\\S+))?$/i;\n\nconst opera10: StackLineParserFn = line => {\n  const parts = opera10Regex.exec(line);\n  return parts ? createFrame(parts[2], parts[3] || UNKNOWN_FUNCTION, +parts[1]) : undefined;\n};\n\nexport const opera10StackLineParser: StackLineParser = [OPERA10_PRIORITY, opera10];\n\nconst opera11Regex =\n  / line (\\d+), column (\\d+)\\s*(?:in (?:<anonymous function: ([^>]+)>|([^)]+))\\(.*\\))? in (.*):\\s*$/i;\n\nconst opera11: StackLineParserFn = line => {\n  const parts = opera11Regex.exec(line);\n  return parts ? createFrame(parts[5], parts[3] || parts[4] || UNKNOWN_FUNCTION, +parts[1], +parts[2]) : undefined;\n};\n\nexport const opera11StackLineParser: StackLineParser = [OPERA11_PRIORITY, opera11];\n\nexport const defaultStackLineParsers = [chromeStackLineParser, geckoStackLineParser, winjsStackLineParser];\n\nexport const defaultStackParser = createStackParser(...defaultStackLineParsers);\n\n/**\n * Safari web extensions, starting version unknown, can produce \"frames-only\" stacktraces.\n * What it means, is that instead of format like:\n *\n * Error: wat\n *   at function@url:row:col\n *   at function@url:row:col\n *   at function@url:row:col\n *\n * it produces something like:\n *\n *   function@url:row:col\n *   function@url:row:col\n *   function@url:row:col\n *\n * Because of that, it won't be captured by `chrome` RegExp and will fall into `Gecko` branch.\n * This function is extracted so that we can use it in both places without duplicating the logic.\n * Unfortunately \"just\" changing RegExp is too complicated now and making it pass all tests\n * and fix this case seems like an impossible, or at least way too time-consuming task.\n */\nconst extractSafariExtensionDetails = (func: string, filename: string): [string, string] => {\n  const isSafariExtension = func.indexOf('safari-extension') !== -1;\n  const isSafariWebExtension = func.indexOf('safari-web-extension') !== -1;\n\n  return isSafariExtension || isSafariWebExtension\n    ? [\n        func.indexOf('@') !== -1 ? func.split('@')[0] : UNKNOWN_FUNCTION,\n        isSafariExtension ? `safari-extension:${filename}` : `safari-web-extension:${filename}`,\n      ]\n    : [func, filename];\n};\n","import type { Event, EventProcessor, Exception, Hub, Integration, StackFrame } from '@sentry/types';\nimport { logger } from '@sentry/utils';\n\n/** Deduplication filter */\nexport class Dedupe implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'Dedupe';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = Dedupe.id;\n\n  /**\n   * @inheritDoc\n   */\n  private _previousEvent?: Event;\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(addGlobalEventProcessor: (callback: EventProcessor) => void, getCurrentHub: () => Hub): void {\n    const eventProcessor: EventProcessor = currentEvent => {\n      // We want to ignore any non-error type events, e.g. transactions or replays\n      // These should never be deduped, and also not be compared against as _previousEvent.\n      if (currentEvent.type) {\n        return currentEvent;\n      }\n\n      const self = getCurrentHub().getIntegration(Dedupe);\n      if (self) {\n        // Juuust in case something goes wrong\n        try {\n          if (_shouldDropEvent(currentEvent, self._previousEvent)) {\n            __DEBUG_BUILD__ && logger.warn('Event dropped due to being a duplicate of previously captured event.');\n            return null;\n          }\n        } catch (_oO) {\n          return (self._previousEvent = currentEvent);\n        }\n\n        return (self._previousEvent = currentEvent);\n      }\n      return currentEvent;\n    };\n\n    eventProcessor.id = this.name;\n    addGlobalEventProcessor(eventProcessor);\n  }\n}\n\n/** JSDoc */\nfunction _shouldDropEvent(currentEvent: Event, previousEvent?: Event): boolean {\n  if (!previousEvent) {\n    return false;\n  }\n\n  if (_isSameMessageEvent(currentEvent, previousEvent)) {\n    return true;\n  }\n\n  if (_isSameExceptionEvent(currentEvent, previousEvent)) {\n    return true;\n  }\n\n  return false;\n}\n\n/** JSDoc */\nfunction _isSameMessageEvent(currentEvent: Event, previousEvent: Event): boolean {\n  const currentMessage = currentEvent.message;\n  const previousMessage = previousEvent.message;\n\n  // If neither event has a message property, they were both exceptions, so bail out\n  if (!currentMessage && !previousMessage) {\n    return false;\n  }\n\n  // If only one event has a stacktrace, but not the other one, they are not the same\n  if ((currentMessage && !previousMessage) || (!currentMessage && previousMessage)) {\n    return false;\n  }\n\n  if (currentMessage !== previousMessage) {\n    return false;\n  }\n\n  if (!_isSameFingerprint(currentEvent, previousEvent)) {\n    return false;\n  }\n\n  if (!_isSameStacktrace(currentEvent, previousEvent)) {\n    return false;\n  }\n\n  return true;\n}\n\n/** JSDoc */\nfunction _isSameExceptionEvent(currentEvent: Event, previousEvent: Event): boolean {\n  const previousException = _getExceptionFromEvent(previousEvent);\n  const currentException = _getExceptionFromEvent(currentEvent);\n\n  if (!previousException || !currentException) {\n    return false;\n  }\n\n  if (previousException.type !== currentException.type || previousException.value !== currentException.value) {\n    return false;\n  }\n\n  if (!_isSameFingerprint(currentEvent, previousEvent)) {\n    return false;\n  }\n\n  if (!_isSameStacktrace(currentEvent, previousEvent)) {\n    return false;\n  }\n\n  return true;\n}\n\n/** JSDoc */\nfunction _isSameStacktrace(currentEvent: Event, previousEvent: Event): boolean {\n  let currentFrames = _getFramesFromEvent(currentEvent);\n  let previousFrames = _getFramesFromEvent(previousEvent);\n\n  // If neither event has a stacktrace, they are assumed to be the same\n  if (!currentFrames && !previousFrames) {\n    return true;\n  }\n\n  // If only one event has a stacktrace, but not the other one, they are not the same\n  if ((currentFrames && !previousFrames) || (!currentFrames && previousFrames)) {\n    return false;\n  }\n\n  currentFrames = currentFrames as StackFrame[];\n  previousFrames = previousFrames as StackFrame[];\n\n  // If number of frames differ, they are not the same\n  if (previousFrames.length !== currentFrames.length) {\n    return false;\n  }\n\n  // Otherwise, compare the two\n  for (let i = 0; i < previousFrames.length; i++) {\n    const frameA = previousFrames[i];\n    const frameB = currentFrames[i];\n\n    if (\n      frameA.filename !== frameB.filename ||\n      frameA.lineno !== frameB.lineno ||\n      frameA.colno !== frameB.colno ||\n      frameA.function !== frameB.function\n    ) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n/** JSDoc */\nfunction _isSameFingerprint(currentEvent: Event, previousEvent: Event): boolean {\n  let currentFingerprint = currentEvent.fingerprint;\n  let previousFingerprint = previousEvent.fingerprint;\n\n  // If neither event has a fingerprint, they are assumed to be the same\n  if (!currentFingerprint && !previousFingerprint) {\n    return true;\n  }\n\n  // If only one event has a fingerprint, but not the other one, they are not the same\n  if ((currentFingerprint && !previousFingerprint) || (!currentFingerprint && previousFingerprint)) {\n    return false;\n  }\n\n  currentFingerprint = currentFingerprint as string[];\n  previousFingerprint = previousFingerprint as string[];\n\n  // Otherwise, compare the two\n  try {\n    return !!(currentFingerprint.join('') === previousFingerprint.join(''));\n  } catch (_oO) {\n    return false;\n  }\n}\n\n/** JSDoc */\nfunction _getExceptionFromEvent(event: Event): Exception | undefined {\n  return event.exception && event.exception.values && event.exception.values[0];\n}\n\n/** JSDoc */\nfunction _getFramesFromEvent(event: Event): StackFrame[] | undefined {\n  const exception = event.exception;\n\n  if (exception) {\n    try {\n      // @ts-ignore Object could be undefined\n      return exception.values[0].stacktrace.frames;\n    } catch (_oO) {\n      return undefined;\n    }\n  }\n  return undefined;\n}\n","import type { Hub } from '@sentry/core';\nimport {\n  getCurrentHub,\n  getIntegrationsToSetup,\n  getReportDialogEndpoint,\n  initAndBind,\n  Integrations as CoreIntegrations,\n} from '@sentry/core';\nimport type { UserFeedback } from '@sentry/types';\nimport {\n  addInstrumentationHandler,\n  logger,\n  resolvedSyncPromise,\n  stackParserFromStackParserOptions,\n  supportsFetch,\n} from '@sentry/utils';\n\nimport type { BrowserClientOptions, BrowserOptions } from './client';\nimport { BrowserClient } from './client';\nimport type { ReportDialogOptions } from './helpers';\nimport { WINDOW, wrap as internalWrap } from './helpers';\nimport { Breadcrumbs, Dedupe, GlobalHandlers, HttpContext, LinkedErrors, TryCatch } from './integrations';\nimport { defaultStackParser } from './stack-parsers';\nimport { makeFetchTransport, makeXHRTransport } from './transports';\n\nexport const defaultIntegrations = [\n  new CoreIntegrations.InboundFilters(),\n  new CoreIntegrations.FunctionToString(),\n  new TryCatch(),\n  new Breadcrumbs(),\n  new GlobalHandlers(),\n  new LinkedErrors(),\n  new Dedupe(),\n  new HttpContext(),\n];\n\n/**\n * A magic string that build tooling can leverage in order to inject a release value into the SDK.\n */\ndeclare const __SENTRY_RELEASE__: string | undefined;\n\n/**\n * The Sentry Browser SDK Client.\n *\n * To use this SDK, call the {@link init} function as early as possible when\n * loading the web page. To set context information or send manual events, use\n * the provided methods.\n *\n * @example\n *\n * ```\n *\n * import { init } from '@sentry/browser';\n *\n * init({\n *   dsn: '__DSN__',\n *   // ...\n * });\n * ```\n *\n * @example\n * ```\n *\n * import { configureScope } from '@sentry/browser';\n * configureScope((scope: Scope) => {\n *   scope.setExtra({ battery: 0.7 });\n *   scope.setTag({ user_mode: 'admin' });\n *   scope.setUser({ id: '4711' });\n * });\n * ```\n *\n * @example\n * ```\n *\n * import { addBreadcrumb } from '@sentry/browser';\n * addBreadcrumb({\n *   message: 'My Breadcrumb',\n *   // ...\n * });\n * ```\n *\n * @example\n *\n * ```\n *\n * import * as Sentry from '@sentry/browser';\n * Sentry.captureMessage('Hello, world!');\n * Sentry.captureException(new Error('Good bye'));\n * Sentry.captureEvent({\n *   message: 'Manual',\n *   stacktrace: [\n *     // ...\n *   ],\n * });\n * ```\n *\n * @see {@link BrowserOptions} for documentation on configuration options.\n */\nexport function init(options: BrowserOptions = {}): void {\n  if (options.defaultIntegrations === undefined) {\n    options.defaultIntegrations = defaultIntegrations;\n  }\n  if (options.release === undefined) {\n    // This allows build tooling to find-and-replace __SENTRY_RELEASE__ to inject a release value\n    if (typeof __SENTRY_RELEASE__ === 'string') {\n      options.release = __SENTRY_RELEASE__;\n    }\n\n    // This supports the variable that sentry-webpack-plugin injects\n    if (WINDOW.SENTRY_RELEASE && WINDOW.SENTRY_RELEASE.id) {\n      options.release = WINDOW.SENTRY_RELEASE.id;\n    }\n  }\n  if (options.autoSessionTracking === undefined) {\n    options.autoSessionTracking = true;\n  }\n  if (options.sendClientReports === undefined) {\n    options.sendClientReports = true;\n  }\n\n  const clientOptions: BrowserClientOptions = {\n    ...options,\n    stackParser: stackParserFromStackParserOptions(options.stackParser || defaultStackParser),\n    integrations: getIntegrationsToSetup(options),\n    transport: options.transport || (supportsFetch() ? makeFetchTransport : makeXHRTransport),\n  };\n\n  initAndBind(BrowserClient, clientOptions);\n\n  if (options.autoSessionTracking) {\n    startSessionTracking();\n  }\n}\n\n/**\n * Present the user with a report dialog.\n *\n * @param options Everything is optional, we try to fetch all info need from the global scope.\n */\nexport function showReportDialog(options: ReportDialogOptions = {}, hub: Hub = getCurrentHub()): void {\n  // doesn't work without a document (React Native)\n  if (!WINDOW.document) {\n    __DEBUG_BUILD__ && logger.error('Global document not defined in showReportDialog call');\n    return;\n  }\n\n  const { client, scope } = hub.getStackTop();\n  const dsn = options.dsn || (client && client.getDsn());\n  if (!dsn) {\n    __DEBUG_BUILD__ && logger.error('DSN not configured for showReportDialog call');\n    return;\n  }\n\n  if (scope) {\n    options.user = {\n      ...scope.getUser(),\n      ...options.user,\n    };\n  }\n\n  if (!options.eventId) {\n    options.eventId = hub.lastEventId();\n  }\n\n  const script = WINDOW.document.createElement('script');\n  script.async = true;\n  script.src = getReportDialogEndpoint(dsn, options);\n\n  if (options.onLoad) {\n    script.onload = options.onLoad;\n  }\n\n  const injectionPoint = WINDOW.document.head || WINDOW.document.body;\n  if (injectionPoint) {\n    injectionPoint.appendChild(script);\n  } else {\n    __DEBUG_BUILD__ && logger.error('Not injecting report dialog. No injection point found in HTML');\n  }\n}\n\n/**\n * This is the getter for lastEventId.\n *\n * @returns The last event id of a captured event.\n */\nexport function lastEventId(): string | undefined {\n  return getCurrentHub().lastEventId();\n}\n\n/**\n * This function is here to be API compatible with the loader.\n * @hidden\n */\nexport function forceLoad(): void {\n  // Noop\n}\n\n/**\n * This function is here to be API compatible with the loader.\n * @hidden\n */\nexport function onLoad(callback: () => void): void {\n  callback();\n}\n\n/**\n * Call `flush()` on the current client, if there is one. See {@link Client.flush}.\n *\n * @param timeout Maximum time in ms the client should wait to flush its event queue. Omitting this parameter will cause\n * the client to wait until all events are sent before resolving the promise.\n * @returns A promise which resolves to `true` if the queue successfully drains before the timeout, or `false` if it\n * doesn't (or if there's no client defined).\n */\nexport function flush(timeout?: number): PromiseLike<boolean> {\n  const client = getCurrentHub().getClient<BrowserClient>();\n  if (client) {\n    return client.flush(timeout);\n  }\n  __DEBUG_BUILD__ && logger.warn('Cannot flush events. No client defined.');\n  return resolvedSyncPromise(false);\n}\n\n/**\n * Call `close()` on the current client, if there is one. See {@link Client.close}.\n *\n * @param timeout Maximum time in ms the client should wait to flush its event queue before shutting down. Omitting this\n * parameter will cause the client to wait until all events are sent before disabling itself.\n * @returns A promise which resolves to `true` if the queue successfully drains before the timeout, or `false` if it\n * doesn't (or if there's no client defined).\n */\nexport function close(timeout?: number): PromiseLike<boolean> {\n  const client = getCurrentHub().getClient<BrowserClient>();\n  if (client) {\n    return client.close(timeout);\n  }\n  __DEBUG_BUILD__ && logger.warn('Cannot flush events and disable SDK. No client defined.');\n  return resolvedSyncPromise(false);\n}\n\n/**\n * Wrap code within a try/catch block so the SDK is able to capture errors.\n *\n * @param fn A function to wrap.\n *\n * @returns The result of wrapped function call.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function wrap(fn: (...args: any) => any): any {\n  return internalWrap(fn)();\n}\n\nfunction startSessionOnHub(hub: Hub): void {\n  hub.startSession({ ignoreDuration: true });\n  hub.captureSession();\n}\n\n/**\n * Enable automatic Session Tracking for the initial page load.\n */\nfunction startSessionTracking(): void {\n  if (typeof WINDOW.document === 'undefined') {\n    __DEBUG_BUILD__ &&\n      logger.warn('Session tracking in non-browser environment with @sentry/browser is not supported.');\n    return;\n  }\n\n  const hub = getCurrentHub();\n\n  // The only way for this to be false is for there to be a version mismatch between @sentry/browser (>= 6.0.0) and\n  // @sentry/hub (< 5.27.0). In the simple case, there won't ever be such a mismatch, because the two packages are\n  // pinned at the same version in package.json, but there are edge cases where it's possible. See\n  // https://github.com/getsentry/sentry-javascript/issues/3207 and\n  // https://github.com/getsentry/sentry-javascript/issues/3234 and\n  // https://github.com/getsentry/sentry-javascript/issues/3278.\n  if (!hub.captureSession) {\n    return;\n  }\n\n  // The session duration for browser sessions does not track a meaningful\n  // concept that can be used as a metric.\n  // Automatically captured sessions are akin to page views, and thus we\n  // discard their duration.\n  startSessionOnHub(hub);\n\n  // We want to create a session for every navigation as well\n  addInstrumentationHandler('history', ({ from, to }) => {\n    // Don't create an additional session for the initial route or if the location did not change\n    if (!(from === undefined || from === to)) {\n      startSessionOnHub(getCurrentHub());\n    }\n  });\n}\n\n/**\n * Captures user feedback and sends it to Sentry.\n */\nexport function captureUserFeedback(feedback: UserFeedback): void {\n  const client = getCurrentHub().getClient<BrowserClient>();\n  if (client) {\n    client.captureUserFeedback(feedback);\n  }\n}\n","import type { EventProcessor, Hub, Integration } from '@sentry/types';\nimport { CONSOLE_LEVELS, fill, GLOBAL_OBJ, safeJoin, severityLevelFromString } from '@sentry/utils';\n\n/** Send Console API calls as Sentry Events */\nexport class CaptureConsole implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'CaptureConsole';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = CaptureConsole.id;\n\n  /**\n   * @inheritDoc\n   */\n  private readonly _levels: readonly string[] = CONSOLE_LEVELS;\n\n  /**\n   * @inheritDoc\n   */\n  public constructor(options: { levels?: string[] } = {}) {\n    if (options.levels) {\n      this._levels = options.levels;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(_: (callback: EventProcessor) => void, getCurrentHub: () => Hub): void {\n    if (!('console' in GLOBAL_OBJ)) {\n      return;\n    }\n\n    this._levels.forEach((level: string) => {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-explicit-any\n      if (!(level in (GLOBAL_OBJ as any).console)) {\n        return;\n      }\n\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-member-access\n      fill((GLOBAL_OBJ as any).console, level, (originalConsoleMethod: () => any) => (...args: any[]): void => {\n        const hub = getCurrentHub();\n\n        if (hub.getIntegration(CaptureConsole)) {\n          hub.withScope(scope => {\n            scope.setLevel(severityLevelFromString(level));\n            scope.setExtra('arguments', args);\n            scope.addEventProcessor(event => {\n              event.logger = 'console';\n              return event;\n            });\n\n            let message = safeJoin(args, ' ');\n            if (level === 'assert') {\n              if (args[0] === false) {\n                message = `Assertion failed: ${safeJoin(args.slice(1), ' ') || 'console.assert'}`;\n                scope.setExtra('arguments', args.slice(1));\n                hub.captureMessage(message);\n              }\n            } else if (level === 'error' && args[0] instanceof Error) {\n              hub.captureException(args[0]);\n            } else {\n              hub.captureMessage(message);\n            }\n          });\n        }\n\n        // this fails for some browsers. :(\n        if (originalConsoleMethod) {\n          originalConsoleMethod.apply(GLOBAL_OBJ.console, args);\n        }\n      });\n    });\n  }\n}\n","import app from 'flarum/forum/app';\n\nimport {\n  BrowserClient,\n  defaultStackParser,\n  getCurrentHub,\n  makeFetchTransport,\n  showReportDialog,\n  Breadcrumbs,\n  GlobalHandlers,\n  InboundFilters,\n  FunctionToString,\n  LinkedErrors,\n  HttpContext,\n  TryCatch,\n  BrowserTracing,\n  Replay,\n} from '@sentry/browser';\n\nimport { CaptureConsole } from '@sentry/integrations';\n\nconst integrations = [\n  new InboundFilters(),\n  new FunctionToString(),\n  new TryCatch(),\n  new GlobalHandlers({\n    onerror: true,\n    onunhandledrejection: true,\n  }),\n  new Breadcrumbs({\n    console: true,\n    dom: true,\n    fetch: true,\n    history: true,\n    sentry: true,\n    xhr: true,\n  }),\n  new LinkedErrors({\n    key: 'cause',\n    limit: 5,\n  }),\n  new HttpContext(),\n];\n\nif (__SENTRY_TRACING__) {\n  integrations.push(new BrowserTracing());\n}\n\nif (__SENTRY_SESSION_REPLAY__) {\n  integrations.push(new Replay());\n}\n\nconst createClient = (config) =>\n  new BrowserClient({\n    dsn: config.dsn,\n\n    transport: makeFetchTransport,\n    stackParser: defaultStackParser,\n\n    beforeSend: (event) => {\n      event.logger = 'javascript';\n\n      if (config.scrubEmails && event.user?.email) {\n        delete event.user.email;\n      }\n\n      if (config.showFeedback && event.exception) {\n        showReportDialog({ eventId: event.event_id, user: Sentry.getUserData('name') });\n      }\n\n      return event;\n    },\n\n    tracesSampleRate: config.tracesSampleRate,\n    replaysSessionSampleRate: config.replaysSessionSampleRate,\n    replaysOnErrorSampleRate: config.replaysOnErrorSampleRate,\n\n    integrations: [...integrations, config.captureConsole && new CaptureConsole()].filter(Boolean),\n  });\n\nwindow.Sentry = { createClient, getCurrentHub, showReportDialog };\n\nwindow.Sentry.getUserData = (nameAttr = 'username') => {\n  /** @type {Sentry.User} */\n  let userData = {};\n\n  // Depending on when the error occurs, `app` might not be defined\n  if (app) {\n    const user = app.session?.user;\n\n    if (app.session && user && user.id() != 0) {\n      userData = {\n        ip_address: '{{auto}}',\n        id: user.id(),\n        [nameAttr]: user.username(),\n      };\n\n      if (!app.data['fof-sentry.scrub-emails']) {\n        userData.email = user.email();\n      }\n    } else if (app.data.session && app.data.session.userId != 0) {\n      userData = {\n        id: app.data.session.userId,\n      };\n    }\n  }\n\n  return userData;\n};\n\napp.initializers.add('fof/sentry', () => {\n  getCurrentHub().setUser(Sentry.getUserData());\n});\n"],"names":["isBrowserBundle","__SENTRY_BROWSER_BUNDLE__","getSDKSource","isNodeEnv","Object","prototype","toString","call","process","dynamicRequire","mod","request","require","WINDOW","getGlobalObject","dateTimestampSource","nowSeconds","Date","now","platformPerformance","module","performance","_","getNodePerformance","timeOrigin","getBrowserPerformance","timestampSource","undefined","dateTimestampInSeconds","bind","timestampInSeconds","browserPerformanceTimeOrigin","threshold","performanceNow","dateNow","timeOriginDelta","Math","abs","timeOriginIsReliable","navigationStart","timing","navigationStartDelta","isGlobalObj","obj","GLOBAL_OBJ","globalThis","window","self","global","getGlobalSingleton","name","creator","gbl","__SENTRY__","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","id","loaded","__webpack_modules__","n","getter","__esModule","d","a","definition","key","o","defineProperty","enumerable","get","g","this","Function","e","hmd","create","children","set","Error","prop","hasOwnProperty","r","Symbol","toStringTag","value","flarum","core","compat","objectToString","isError","wat","isInstanceOf","isBuiltin","className","isErrorEvent","isDOMError","isString","isPrimitive","isPlainObject","isEvent","Event","isThenable","Boolean","then","isNaN","base","_e","truncate","str","max","length","slice","safeJoin","input","delimiter","Array","isArray","output","i","push","String","join","stringMatchesSomePattern","testString","patterns","requireExactStringMatch","some","pattern","test","includes","isMatchingPattern","DEFAULT_IGNORE_ERRORS","DEFAULT_IGNORE_TRANSACTIONS","InboundFilters","__initStatic","_proto","_options","__init","setupOnce","addGlobalEventProcessor","getCurrentHub","eventProcess","event","hub","getIntegration","client","getClient","clientOptions","getOptions","options","internalOptions","allowUrls","concat","denyUrls","ignoreErrors","disableErrorDefaults","ignoreTransactions","disableTransactionDefaults","ignoreInternal","_mergeOptions","exception","values","type","_isSentryError","message","_ref","_ref$type","_ref$value","oO","_getPossibleEventMessages","_isIgnoredError","transaction","_isIgnoredTransaction","url","_getEventFilterUrl","_isDeniedUrl","_isAllowedUrl","_shouldDropEvent","frames","stacktrace","frame","filename","_getLastValidUrl","_extends","assign","target","arguments","source","apply","originalFunctionToString","DEFAULT_MAX_STRING_LENGTH","htmlTreeAsString","elem","nextStr","currentElem","out","height","len","keyAttrs","maxStringLength","_htmlElementAsString","separator","parentNode","reverse","_oO","el","classes","attr","tagName","toLowerCase","keyAttrPairs","filter","keyAttr","getAttribute","map","forEach","keyAttrPair","split","allowedAttrs","fill","replacementFactory","original","wrapped","markFunctionWrapped","_Oo","addNonEnumerableProperty","writable","configurable","proto","getOriginalFunction","func","__sentry_original__","convertToPlainObject","stack","getOwnProperties","newObj","serializeEventTarget","currentTarget","CustomEvent","detail","Element","extractedProps","property","extractExceptionKeysForMessage","maxLength","keys","sort","includedKeys","serialized","dropUndefinedKeys","inputValue","_dropUndefinedKeys","Map","memoizationMap","memoVal","returnValue","_i","_Object$keys","item","FunctionToString","context","_len","args","_key","WEBPACK_ERROR_REGEXP","defaultFunctionName","getFunctionName","fn","uuid4","crypto","msCrypto","randomUUID","replace","getRandomByte","getRandomValues","Uint8Array","random","c","getFirstException","getEventDescription","eventId","event_id","firstException","addExceptionTypeValue","addExceptionMechanism","newMechanism","currentMechanism","mechanism","handled","mergedData","data","checkOrSetAlreadyCaught","__sentry_captured__","err","logger","CONSOLE_LEVELS","enable","disable","States","DEFAULT_ENVIRONMENT","resolvedSyncPromise","SyncPromise","resolve","rejectedSyncPromise","reason","reject","executor","__init2","__init3","__init4","__init5","__init6","_resolve","_reject","_state","PENDING","_handlers","onfulfilled","onrejected","_this","result","_executeHandlers","val","onfinally","_this2","isRejected","_this3","_setResult","RESOLVED","_this4","REJECTED","_this5","state","_value","_this6","cachedHandlers","handler","updateSession","session","user","ipAddress","ip_address","did","email","username","timestamp","ignoreDuration","sid","init","started","duration","release","environment","userAgent","errors","status","Scope","_notifyingListeners","_scopeListeners","_eventProcessors","_breadcrumbs","_attachments","_user","_tags","_extra","_contexts","_sdkProcessingMetadata","clone","scope","newScope","_level","_span","_session","_transactionName","_fingerprint","_requestSession","addScopeListener","callback","addEventProcessor","setUser","_notifyScopeListeners","getUser","getRequestSession","setRequestSession","requestSession","setTags","tags","setTag","_extends2","setExtras","extras","setExtra","extra","_extends3","setFingerprint","fingerprint","setLevel","level","setTransactionName","setContext","setSpan","span","getSpan","getTransaction","setSession","getSession","update","captureContext","updatedScope","contexts","clear","addBreadcrumb","breadcrumb","maxBreadcrumbs","maxCrumbs","mergedBreadcrumb","getLastBreadcrumb","clearBreadcrumbs","addAttachment","attachment","getAttachments","clearAttachments","applyToEvent","hint","trace","getTraceContext","sdkProcessingMetadata","dynamicSamplingContext","getDynamicSamplingContext","transactionName","_applyFingerprint","breadcrumbs","_notifyEventProcessors","getGlobalEventProcessors","setSDKProcessingMetadata","newData","processors","index","processor","final","maybeArray","API_VERSION","Hub","_version","_stack","bindClient","isOlderThan","version","getStackTop","setupIntegrations","pushScope","getScope","getStack","popScope","pop","withScope","captureException","_lastEventId","syntheticException","_withClient","originalException","captureMessage","captureEvent","lastEventId","_this$getStackTop","_ref$beforeBreadcrumb","beforeBreadcrumb","_ref$maxBreadcrumbs","finalBreadcrumb","originalConsole","console","wrappedLevels","originalWrappedFunc","consoleSandbox","emit","configureScope","_this$getStackTop2","run","oldHub","makeMain","integration","startTransaction","customSamplingContext","_callExtensionMethod","traceHeaders","captureSession","endSession","_sendSessionUpdate","closeSession","startSession","_this$getStackTop3","_ref2","_ref2$environment","navigator","startingTime","toJSON","toISOString","attrs","user_agent","sessionToJSON","makeSession","currentSession","shouldSendDefaultPii","sendDefaultPii","_this$getStackTop4","_this$getStackTop5","method","sentry","getMainCarrier","extensions","registry","getHubFromCarrier","setHubOnCarrier","acs","carrier","getGlobalHub","ignoreOnError","shouldIgnoreOnError","wrap","before","wrapper","__sentry_wrapped__","sentryWrapped","wrappedArguments","arg","ex","setTimeout","getOwnPropertyDescriptor","DEFAULT_EVENT_TARGET","TryCatch","XMLHttpRequest","eventTarget","requestAnimationFrame","setInterval","_wrapTimeFunction","_wrapRAF","_wrapXHR","eventTargetOption","_wrapEventTarget","originalCallback","originalSend","xhr","wrapOptions","originalFunction","_len2","_key2","globalObject","eventName","handleEvent","originalRemoveEventListener","wrappedEventHandler","originalEventHandler","isNativeFetch","lastHref","SENTRY_XHR_DATA_KEY","handlers","instrumented","instrument","originalConsoleMethod","triggerHandlers","triggerDOMHandler","globalDOMEventHandler","makeDOMEventHandler","document","addEventListener","originalAddEventListener","listener","__sentry_instrumentation_handlers__","handlerForType","refCount","instrumentDOM","xhrproto","originalOpen","_len3","_key3","xhrInfo","toUpperCase","request_headers","match","__sentry_own_request__","onreadystatechangeHandler","readyState","status_code","endTimestamp","startTimestamp","onreadystatechange","_len4","readyStateArgs","_key4","_len5","setRequestHeaderArgs","_key5","header","sentryXhrData","_len6","_key6","body","instrumentXHR","Headers","Request","Response","supportsFetch","fetch","doc","createElement","sandbox","hidden","head","appendChild","contentWindow","removeChild","supportsNativeFetch","originalFetch","_parseFetchArgs","fetchArgs","getUrlFromResource","hasProp","parseFetchArgs","handlerData","fetchData","response","error","chrome","isChromePackagedApp","app","runtime","hasHistoryApi","history","pushState","replaceState","oldOnPopState","onpopstate","to","location","href","from","_len7","_key7","historyReplacementFunction","originalHistoryFunction","_len8","_key8","instrumentHistory","_oldOnErrorHandler","onerror","msg","line","column","__SENTRY_LOADER__","__SENTRY_INSTRUMENTED__","_oldOnUnhandledRejectionHandler","onunhandledrejection","addInstrumentationHandler","_step","_iterator","_createForOfIteratorHelperLoose","done","resource","debounceTimerID","lastCapturedEvent","debounceDuration","globalListener","isContentEditable","shouldSkipDOMEvent","previous","current","shouldShortcircuitPreviousDebounce","clearTimeout","normalize","depth","maxProperties","visit","ERROR","normalizeToSize","object","maxSize","normalized","encodeURI","utf8Length","JSON","stringify","memo","hasWeakSet","inner","WeakSet","has","add","splice","_memo","memoize","unmemoize","stringified","_events","objName","getPrototypeOf","constructor","getConstructorName","stringifyValue","startsWith","remainingDepth","valueWithToJSON","numAdded","visitable","visitKey","visitValue","exceptionFromError","stackParser","parseStackFrames","extractMessage","eventFromError","popSize","framesToPop","reactMinifiedRegexp","getPopSize","eventFromUnknownInput","attachStacktrace","isUnhandledRejection","domException","eventFromString","code","normalizeDepth","__serialized__","eventFromPlainObject","synthetic","GlobalHandlers","_installFunc","_installGlobalOnErrorHandler","_installGlobalOnUnhandledRejectionHandler","stackTraceLimit","installFunc","_getHubAndOptions","getHubAndOptions","groups","_enhanceEventWithInitialFrame","_eventFromIncompleteOnError","addMechanismAndCapture","_getHubAndOptions2","ev","ev0","ev0s","ev0sf","colno","parseInt","lineno","getLocationHref","in_app","validSeverityLevels","severityLevelFromString","parseUrl","query","fragment","host","path","protocol","search","hash","relative","BREADCRUMB_INTEGRATION_ID","Breadcrumbs","dom","_consoleBreadcrumb","serializeAttribute","_isEvent","category","_xhrBreadcrumb","_fetchBreadcrumb","_historyBreadcrumb","addSentryBreadcrumb","parsedLoc","parsedFrom","parsedTo","LinkedErrors","_limit","limit","parser","linkedErrors","_walkErrorTree","_handler","HttpContext","referrer","headers","Referer","_assertThisInitialized","ReferenceError","_setPrototypeOf","p","setPrototypeOf","__proto__","_inheritsLoose","subClass","superClass","SpanRecorder","maxlen","_maxlen","spans","spanRecorder","_typeof","iterator","_defineProperties","props","descriptor","prim","toPrimitive","res","TypeError","Transaction","_Span","Constructor","protoProps","transactionContext","_hub","_name","metadata","spanMetadata","_trimEnd","trimEnd","incomingDynamicSamplingContext","_frozenDynamicSamplingContext","_measurements","setName","initSpanRecorder","setMeasurement","unit","setMetadata","newMetadata","finish","sampled","finishedSpans","s","reduce","prev","start_timestamp","transaction_info","measurements","recordDroppedEvent","toContext","updateWithContext","public_key","getDsn","publicKey","maybeSampleRate","sampleRate","sample_rate","user_segment","segment","dsc","trace_id","traceId","setHub","newName","_proto2","Span","spanContext","__init7","spanId","parentSpanId","op","description","instrumenter","substring","startChild","childSpan","setData","setStatus","setHttpStatus","httpStatus","spanStatus","spanStatusfromHttpCode","isSuccess","toTraceparent","sampledString","parent_span_id","span_id","TRACING_DEFAULTS","idleTimeout","finalTimeout","heartbeatInterval","IDLE_TRANSACTION_FINISH_REASONS","IdleTransactionSpanRecorder","_SpanRecorder","_pushActivity","_popActivity","transactionSpanId","IdleTransaction","_Transaction","_idleHub","_idleTimeout","_finalTimeout","_heartbeatInterval","_onScope","_restartIdleTimeout","_finished","_finishReason","activities","_heartbeatCounter","_idleTimeoutCanceledPermanently","_beforeFinishCallbacks","registerBeforeFinishCallback","_pingHeartbeat","cancelIdleTimeout","_temp","restartOnChildSpanChange","_idleTimeoutID","setFinishReason","_beat","heartbeatString","_prevHeartbeatString","_this7","hasTracingEnabled","maybeOptions","enableTracing","getActiveTransaction","maybeHub","errorsInstrumented","errorCallback","activeTransaction","sample","samplingContext","Number","tracesSampler","parentSampled","tracesSampleRate","rate","_startTransaction","_experiments","maxSpans","startIdleTransaction","onScope","tag","TRACEPARENT_REGEXP","RegExp","BAGGAGE_HEADER_NAME","SENTRY_BAGGAGE_KEY_PREFIX","SENTRY_BAGGAGE_KEY_PREFIX_REGEX","MAX_BAGGAGE_STRING_LENGTH","dynamicSamplingContextToSentryBaggageHeader","entries","baggageHeader","_ref4","currentIndex","objectKey","objectValue","baggageEntry","encodeURIComponent","newBaggageHeader","objectToBaggageHeader","acc","dscKey","dscValue","baggageHeaderToObject","keyOrValue","decodeURIComponent","trim","_ref3","bindReporter","metric","reportAllChanges","prevValue","delta","forceReport","getNavigationEntry","__WEB_VITALS_POLYFILL__","getEntriesByType","navigation","navigationEntry","entryType","startTime","getNavigationEntryFromPerformanceTiming","getActivationStart","navEntry","activationStart","initMetric","navigationType","prerendering","rating","floor","observe","opts","PerformanceObserver","supportedEntryTypes","po","list","getEntries","buffered","onHidden","cb","once","onHiddenOrPageHide","visibilityState","removeEventListener","firstHiddenTime","getVisibilityWatcher","Infinity","timeStamp","reportedMetricIDs","isMeasurementValue","isFinite","_startChild","ctx","excluded","sourceKeys","indexOf","_objectWithoutPropertiesLoose","_excluded","msToSec","time","getBrowserPerformanceAPI","_lcpEntry","_clsEntry","_performanceCursor","startTrackingWebVitals","onReport","report","visibilityWatcher","handleEntry","handleEntries","mark","entry","processingStart","takeRecords","disconnect","clsCallback","sessionValue","sessionEntries","hadRecentInput","firstSessionEntry","lastSessionEntry","stopListening","onCLS","lcpCallback","lastEntry","capture","onLCP","_addPerformanceNavigationTiming","eventEnd","end","start","DEFAULT_TRACE_PROPAGATION_TARGETS","defaultRequestInstrumentationOptions","traceFetch","traceXHR","tracingOrigins","tracePropagationTargets","DEFAULT_BROWSER_TRACING_OPTIONS","markBackgroundTransactions","routingInstrumentation","customStartTransaction","startTransactionOnPageLoad","startTransactionOnLocationChange","startingUrl","pathname","enableLongTask","BrowserTracing","_collectWebVitals","enableInteractions","_step2","_iterator2","durationThreshold","_getCurrentHub","_this$options","instrumentRouting","shouldCreateSpanForRequest","_createRouteTransaction","onStartRouteTransaction","_registerInteractionListener","_traceFetch$traceXHR$","shouldCreateSpan","shouldAttachHeadersWithTargets","shouldAttachHeaders","__span","contentLength","contentLengthNum","currentScope","currentSpan","_handlerData$fetchDat","sentryBaggageHeader","sentryTraceHeader","newHeaders","append","existingBaggageHeader","baggage","newBaggageHeaders","addTracingHeadersToFetchRequest","fetchCallback","__sentry_xhr_span_id__","setRequestHeader","xhrCallback","instrumentOutgoingRequests","_this$options2","beforeNavigate","isPageloadTransaction","sentryTraceMetaTagValue","getMetaContent","baggageMetaTagValue","traceParentData","traceparent","matches","extractTraceparentData","baggageObject","curr","baggageHeaderToDynamicSamplingContext","expandedContext","modifiedContext","finalContext","_latestRouteName","_latestRouteSource","idleTransaction","responseStartTimestamp","requestStartTimestamp","performanceEntries","requestStart","responseEnd","responseStart","_addRequest","_addNavigationSpans","measureStartTimestamp","measureEndTimestamp","_addMeasureSpans","firstHidden","shouldRecord","resourceName","origin","initiatorType","transferSize","encodedBodySize","decodedBodySize","renderBlockingStatus","_addResourceSpans","connection","effectiveType","rtt","deviceMemory","hardwareConcurrency","_trackNavigator","oldValue","measurementTimestamp","normalizedValue","fidMark","cls","measurementName","element","size","sources","node","_tagMetricInfo","addPerformanceEntries","inflightInteractionTransaction","registerInteractionTransaction","_this3$options","currentTransaction","metaName","selector","metaTag","querySelector","SDK_VERSION","DSN_REGEX","dsnToString","dsn","withPassword","pass","port","projectId","dsnFromComponents","components","makeDsn","exec","_match$slice","_match$slice$","_match$slice$2","projectMatch","dsnFromString","createEnvelope","items","forEachEnvelopeItem","envelope","envelopeItem","encodeUTF8","textEncoder","TextEncoder","encode","serializeEnvelope","envHeaders","parts","next","itemHeaders","payload","stringifiedPayload","buffers","_step3","totalLength","buf","merged","offset","_iterator3","buffer","concatBuffers","createAttachmentEnvelopeItem","content_type","contentType","attachment_type","attachmentType","ITEM_TYPE_TO_DATA_CATEGORY_MAP","sessions","client_report","user_report","profile","replay_event","replay_recording","check_in","envelopeItemTypeToDataCategory","getSdkMetadataForEnvelopeHeader","metadataOrEvent","sdk","_metadataOrEvent$sdk","_getPrototypeOf","_construct","Parent","Class","Reflect","construct","sham","Proxy","valueOf","isNativeReflectConstruct","instance","_wrapNativeSuper","_cache","Wrapper","SentryError","_Error","logLevel","SENTRY_API_VERSION","getBaseApiEndpoint","getEnvelopeEndpointWithUrlEncodedAuth","tunnelOrOptions","tunnel","sdkInfo","_metadata","_getIngestEndpoint","sentry_key","sentry_version","sentry_client","_encodedAuth","installedIntegrations","setupIntegration","integrationIndex","debugIdStackParserCache","WeakMap","BaseClient","_dsn","_transport","transport","transportOptions","_integrations","_integrationsInitialized","_numProcessing","_outcomes","_hooks","_process","eventFromException","_captureEvent","promisedEvent","eventFromMessage","_isEnabled","sendSession","getSdkMetadata","getTransport","flush","timeout","_isClientDoneProcessing","clientFinished","transportFlushed","close","enabled","integrations","getIntegrationById","integrationId","addIntegration","sendEvent","newItem","env","eventType","packages","enhanceEventWithSdkInfo","envelopeHeaders","sent_at","createEventEnvelopeHeaders","createEventEnvelope","attachments","promise","_sendEnvelope","sendResponse","createSessionEnvelope","_event","sendClientReports","on","hook","rest","_updateSessionFromEvent","crashed","errored","exceptions","sessionNonTerminal","ticked","interval","clearInterval","_prepareEvent","_options$normalizeDep","_options$normalizeMax","normalizeMaxBreadth","prepared","dist","_options$maxValueLeng","maxValueLength","applyClientOptions","integrationNames","applyIntegrationsMetadata","debugIdStackFramesCache","debugIdMap","_sentryDebugIds","cachedDebugIdStackFrameCache","filenameDebugIdMap","debugIdStackTrace","parsedStack","cachedParsedStack","stackFrame","debug_id","applyDebugIds","finalScope","evt","abs_path","debug_meta","images","code_file","applyDebugMeta","maxBreadth","b","normalizeEvent","prepareEvent","_processEvent","finalEvent","isTransaction","isTransactionEvent","beforeSendLabel","dataCategory","__sentry__","beforeSend","beforeSendTransaction","processBeforeSend","beforeSendResult","invalidValueError","_validateBeforeSendResult","processedEvent","transactionInfo","send","_clearOutcomes","outcomes","_key$split","quantity","BrowserClient","_BaseClient","sdkSource","SENTRY_SDK_SOURCE","_flushOutcomes","breadcrumbIntegration","captureUserFeedback","feedback","createUserFeedbackEnvelopeItem","createUserFeedbackEnvelope","platform","discarded_events","DEFAULT_RETRY_AFTER","DEFAULT_TRANSPORT_BUFFER_SIZE","createTransport","makeRequest","remove","task","$","taskProducer","drain","counter","capturedSetTimeout","makePromiseBuffer","bufferSize","rateLimits","filteredEnvelopeItems","limits","envelopeItemDataCategory","all","disabledUntil","getEventForEnvelopeItem","filteredEnvelope","recordEnvelopeLoss","statusCode","updatedRateLimits","rateLimitHeader","retryAfterHeader","_limit$split","retryAfter","categories","headerDelay","delay","headerDate","parse","parseRetryAfterHeader","updateRateLimits","__sentry__baseTransport__","cachedFetchImpl","makeFetchTransport","nativeFetch","fetchImpl","getNativeFetchImplementation","pendingBodySize","pendingCount","requestSize","requestOptions","referrerPolicy","keepalive","fetchOptions","UNKNOWN_FUNCTION","createFrame","chromeRegex","chromeEvalRegex","geckoREgex","geckoEvalRegex","winjsRegex","defaultStackParser","parsers","sortedParsers","skipFirst","lines","cleanedLine","localStack","lastFrameFunction","firstFrameFunction","stripSentryFramesAndReverse","subMatch","_extractSafariExtensi","extractSafariExtensionDetails","_extractSafariExtensi2","isSafariExtension","isSafariWebExtension","Dedupe","eventProcessor","currentEvent","previousEvent","currentMessage","previousMessage","_isSameFingerprint","_isSameStacktrace","_isSameMessageEvent","previousException","_getExceptionFromEvent","currentException","_isSameExceptionEvent","_previousEvent","currentFrames","_getFramesFromEvent","previousFrames","frameA","frameB","currentFingerprint","previousFingerprint","showReportDialog","_hub$getStackTop","script","async","src","dsnLike","dialogOptions","endpoint","encodedOptions","getReportDialogEndpoint","onLoad","onload","injectionPoint","Integrations","CaptureConsole","levels","_levels","Sentry","createClient","config","_event$user","scrubEmails","showFeedback","getUserData","replaysSessionSampleRate","replaysOnErrorSampleRate","captureConsole","nameAttr","userData","_app$session","_userData","userId"],"sourceRoot":""}