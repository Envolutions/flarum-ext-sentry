{"version":3,"file":"forum.js","mappings":"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","sources":["webpack://@fof/sentry/../../src/env.ts","webpack://@fof/sentry/../../src/node.ts","webpack://@fof/sentry/../../src/time.ts","webpack://@fof/sentry/../../src/worldwide.ts","webpack://@fof/sentry/webpack/bootstrap","webpack://@fof/sentry/webpack/runtime/compat get default export","webpack://@fof/sentry/webpack/runtime/define property getters","webpack://@fof/sentry/webpack/runtime/global","webpack://@fof/sentry/webpack/runtime/harmony module decorator","webpack://@fof/sentry/webpack/runtime/hasOwnProperty shorthand","webpack://@fof/sentry/webpack/runtime/make namespace object","webpack://@fof/sentry/external root \"flarum.core.compat['forum/app']\"","webpack://@fof/sentry/../../src/is.ts","webpack://@fof/sentry/../../src/string.ts","webpack://@fof/sentry/../../../src/integrations/inboundfilters.ts","webpack://@fof/sentry/./node_modules/@babel/runtime/helpers/esm/extends.js","webpack://@fof/sentry/../../../src/integrations/functiontostring.ts","webpack://@fof/sentry/../../src/browser.ts","webpack://@fof/sentry/../../src/object.ts","webpack://@fof/sentry/../../src/stacktrace.ts","webpack://@fof/sentry/../../src/misc.ts","webpack://@fof/sentry/../../src/logger.ts","webpack://@fof/sentry/../../src/constants.ts","webpack://@fof/sentry/../../src/syncpromise.ts","webpack://@fof/sentry/../../src/session.ts","webpack://@fof/sentry/../../src/scope.ts","webpack://@fof/sentry/../../src/hub.ts","webpack://@fof/sentry/../../../src/helpers.ts","webpack://@fof/sentry/../../src/exports.ts","webpack://@fof/sentry/../../../../src/integrations/trycatch.ts","webpack://@fof/sentry/../../src/supports.ts","webpack://@fof/sentry/../../../src/vendor/supportsHistory.ts","webpack://@fof/sentry/../../src/instrument.ts","webpack://@fof/sentry/../../src/normalize.ts","webpack://@fof/sentry/../../src/memo.ts","webpack://@fof/sentry/../../../src/eventbuilder.ts","webpack://@fof/sentry/../../../../src/integrations/globalhandlers.ts","webpack://@fof/sentry/../../src/severity.ts","webpack://@fof/sentry/../../src/url.ts","webpack://@fof/sentry/../../../../src/integrations/breadcrumbs.ts","webpack://@fof/sentry/../../../../src/integrations/linkederrors.ts","webpack://@fof/sentry/../../../../src/integrations/httpcontext.ts","webpack://@fof/sentry/./node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js","webpack://@fof/sentry/./node_modules/@babel/runtime/helpers/esm/inheritsLoose.js","webpack://@fof/sentry/../../src/version.ts","webpack://@fof/sentry/../../src/dsn.ts","webpack://@fof/sentry/../../src/envelope.ts","webpack://@fof/sentry/./node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js","webpack://@fof/sentry/./node_modules/@babel/runtime/helpers/esm/construct.js","webpack://@fof/sentry/./node_modules/@babel/runtime/helpers/esm/isNativeReflectConstruct.js","webpack://@fof/sentry/./node_modules/@babel/runtime/helpers/esm/wrapNativeSuper.js","webpack://@fof/sentry/./node_modules/@babel/runtime/helpers/esm/isNativeFunction.js","webpack://@fof/sentry/../../src/error.ts","webpack://@fof/sentry/./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js","webpack://@fof/sentry/../../src/api.ts","webpack://@fof/sentry/../../src/integration.ts","webpack://@fof/sentry/../../../src/utils/prepareEvent.ts","webpack://@fof/sentry/../../src/baseclient.ts","webpack://@fof/sentry/../../../src/client.ts","webpack://@fof/sentry/../../../src/userfeedback.ts","webpack://@fof/sentry/../../src/clientreport.ts","webpack://@fof/sentry/../../src/ratelimit.ts","webpack://@fof/sentry/../../../src/transports/base.ts","webpack://@fof/sentry/../../src/promisebuffer.ts","webpack://@fof/sentry/../../../../src/transports/utils.ts","webpack://@fof/sentry/../../../../src/transports/fetch.ts","webpack://@fof/sentry/../../../src/stack-parsers.ts","webpack://@fof/sentry/../../../../src/integrations/dedupe.ts","webpack://@fof/sentry/../../../src/sdk.ts","webpack://@fof/sentry/../../../src/captureconsole.ts","webpack://@fof/sentry/./src/forum/index.js"],"sourcesContent":["/*\n * This module exists for optimizations in the build process through rollup and terser.  We define some global\n * constants, which can be overridden during build. By guarding certain pieces of code with functions that return these\n * constants, we can control whether or not they appear in the final bundle. (Any code guarded by a false condition will\n * never run, and will hence be dropped during treeshaking.) The two primary uses for this are stripping out calls to\n * `logger` and preventing node-related code from appearing in browser bundles.\n *\n * Attention:\n * This file should not be used to define constants/flags that are intended to be used for tree-shaking conducted by\n * users. These flags should live in their respective packages, as we identified user tooling (specifically webpack)\n * having issues tree-shaking these constants across package boundaries.\n * An example for this is the __SENTRY_DEBUG__ constant. It is declared in each package individually because we want\n * users to be able to shake away expressions that it guards.\n */\n\ndeclare const __SENTRY_BROWSER_BUNDLE__: boolean | undefined;\n\nexport type SdkSource = 'npm' | 'cdn' | 'loader';\n\n/**\n * Figures out if we're building a browser bundle.\n *\n * @returns true if this is a browser bundle build.\n */\nexport function isBrowserBundle(): boolean {\n  return typeof __SENTRY_BROWSER_BUNDLE__ !== 'undefined' && !!__SENTRY_BROWSER_BUNDLE__;\n}\n\n/**\n * Get source of SDK.\n */\nexport function getSDKSource(): SdkSource {\n  // @ts-ignore __SENTRY_SDK_SOURCE__ is injected by rollup during build process\n  return __SENTRY_SDK_SOURCE__;\n}\n","/**\n * NOTE: In order to avoid circular dependencies, if you add a function to this module and it needs to print something,\n * you must either a) use `console.log` rather than the logger, or b) put your function elsewhere.\n */\n\nimport { isBrowserBundle } from './env';\n\n/**\n * Checks whether we're in the Node.js or Browser environment\n *\n * @returns Answer to given question\n */\nexport function isNodeEnv(): boolean {\n  // explicitly check for browser bundles as those can be optimized statically\n  // by terser/rollup.\n  return (\n    !isBrowserBundle() &&\n    Object.prototype.toString.call(typeof process !== 'undefined' ? process : 0) === '[object process]'\n  );\n}\n\n/**\n * Requires a module which is protected against bundler minification.\n *\n * @param request The module path to resolve\n */\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types, @typescript-eslint/no-explicit-any\nexport function dynamicRequire(mod: any, request: string): any {\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n  return mod.require(request);\n}\n\n/**\n * Helper for dynamically loading module that should work with linked dependencies.\n * The problem is that we _should_ be using `require(require.resolve(moduleName, { paths: [cwd()] }))`\n * However it's _not possible_ to do that with Webpack, as it has to know all the dependencies during\n * build time. `require.resolve` is also not available in any other way, so we cannot create,\n * a fake helper like we do with `dynamicRequire`.\n *\n * We always prefer to use local package, thus the value is not returned early from each `try/catch` block.\n * That is to mimic the behavior of `require.resolve` exactly.\n *\n * @param moduleName module name to require\n * @returns possibly required module\n */\nexport function loadModule<T>(moduleName: string): T | undefined {\n  let mod: T | undefined;\n\n  try {\n    mod = dynamicRequire(module, moduleName);\n  } catch (e) {\n    // no-empty\n  }\n\n  try {\n    const { cwd } = dynamicRequire(module, 'process');\n    mod = dynamicRequire(module, `${cwd()}/node_modules/${moduleName}`) as T;\n  } catch (e) {\n    // no-empty\n  }\n\n  return mod;\n}\n","import { dynamicRequire, isNodeEnv } from './node';\nimport { getGlobalObject } from './worldwide';\n\n// eslint-disable-next-line deprecation/deprecation\nconst WINDOW = getGlobalObject<Window>();\n\n/**\n * An object that can return the current timestamp in seconds since the UNIX epoch.\n */\ninterface TimestampSource {\n  nowSeconds(): number;\n}\n\n/**\n * A TimestampSource implementation for environments that do not support the Performance Web API natively.\n *\n * Note that this TimestampSource does not use a monotonic clock. A call to `nowSeconds` may return a timestamp earlier\n * than a previously returned value. We do not try to emulate a monotonic behavior in order to facilitate debugging. It\n * is more obvious to explain \"why does my span have negative duration\" than \"why my spans have zero duration\".\n */\nconst dateTimestampSource: TimestampSource = {\n  nowSeconds: () => Date.now() / 1000,\n};\n\n/**\n * A partial definition of the [Performance Web API]{@link https://developer.mozilla.org/en-US/docs/Web/API/Performance}\n * for accessing a high-resolution monotonic clock.\n */\ninterface Performance {\n  /**\n   * The millisecond timestamp at which measurement began, measured in Unix time.\n   */\n  timeOrigin: number;\n  /**\n   * Returns the current millisecond timestamp, where 0 represents the start of measurement.\n   */\n  now(): number;\n}\n\n/**\n * Returns a wrapper around the native Performance API browser implementation, or undefined for browsers that do not\n * support the API.\n *\n * Wrapping the native API works around differences in behavior from different browsers.\n */\nfunction getBrowserPerformance(): Performance | undefined {\n  const { performance } = WINDOW;\n  if (!performance || !performance.now) {\n    return undefined;\n  }\n\n  // Replace performance.timeOrigin with our own timeOrigin based on Date.now().\n  //\n  // This is a partial workaround for browsers reporting performance.timeOrigin such that performance.timeOrigin +\n  // performance.now() gives a date arbitrarily in the past.\n  //\n  // Additionally, computing timeOrigin in this way fills the gap for browsers where performance.timeOrigin is\n  // undefined.\n  //\n  // The assumption that performance.timeOrigin + performance.now() ~= Date.now() is flawed, but we depend on it to\n  // interact with data coming out of performance entries.\n  //\n  // Note that despite recommendations against it in the spec, browsers implement the Performance API with a clock that\n  // might stop when the computer is asleep (and perhaps under other circumstances). Such behavior causes\n  // performance.timeOrigin + performance.now() to have an arbitrary skew over Date.now(). In laptop computers, we have\n  // observed skews that can be as long as days, weeks or months.\n  //\n  // See https://github.com/getsentry/sentry-javascript/issues/2590.\n  //\n  // BUG: despite our best intentions, this workaround has its limitations. It mostly addresses timings of pageload\n  // transactions, but ignores the skew built up over time that can aversely affect timestamps of navigation\n  // transactions of long-lived web pages.\n  const timeOrigin = Date.now() - performance.now();\n\n  return {\n    now: () => performance.now(),\n    timeOrigin,\n  };\n}\n\n/**\n * Returns the native Performance API implementation from Node.js. Returns undefined in old Node.js versions that don't\n * implement the API.\n */\nfunction getNodePerformance(): Performance | undefined {\n  try {\n    const perfHooks = dynamicRequire(module, 'perf_hooks') as { performance: Performance };\n    return perfHooks.performance;\n  } catch (_) {\n    return undefined;\n  }\n}\n\n/**\n * The Performance API implementation for the current platform, if available.\n */\nconst platformPerformance: Performance | undefined = isNodeEnv() ? getNodePerformance() : getBrowserPerformance();\n\nconst timestampSource: TimestampSource =\n  platformPerformance === undefined\n    ? dateTimestampSource\n    : {\n        nowSeconds: () => (platformPerformance.timeOrigin + platformPerformance.now()) / 1000,\n      };\n\n/**\n * Returns a timestamp in seconds since the UNIX epoch using the Date API.\n */\nexport const dateTimestampInSeconds: () => number = dateTimestampSource.nowSeconds.bind(dateTimestampSource);\n\n/**\n * Returns a timestamp in seconds since the UNIX epoch using either the Performance or Date APIs, depending on the\n * availability of the Performance API.\n *\n * See `usingPerformanceAPI` to test whether the Performance API is used.\n *\n * BUG: Note that because of how browsers implement the Performance API, the clock might stop when the computer is\n * asleep. This creates a skew between `dateTimestampInSeconds` and `timestampInSeconds`. The\n * skew can grow to arbitrary amounts like days, weeks or months.\n * See https://github.com/getsentry/sentry-javascript/issues/2590.\n */\nexport const timestampInSeconds: () => number = timestampSource.nowSeconds.bind(timestampSource);\n\n/**\n * Re-exported with an old name for backwards-compatibility.\n * TODO (v8): Remove this\n *\n * @deprecated Use `timestampInSeconds` instead.\n */\nexport const timestampWithMs = timestampInSeconds;\n\n/**\n * A boolean that is true when timestampInSeconds uses the Performance API to produce monotonic timestamps.\n */\nexport const usingPerformanceAPI = platformPerformance !== undefined;\n\n/**\n * Internal helper to store what is the source of browserPerformanceTimeOrigin below. For debugging only.\n */\nexport let _browserPerformanceTimeOriginMode: string;\n\n/**\n * The number of milliseconds since the UNIX epoch. This value is only usable in a browser, and only when the\n * performance API is available.\n */\nexport const browserPerformanceTimeOrigin = ((): number | undefined => {\n  // Unfortunately browsers may report an inaccurate time origin data, through either performance.timeOrigin or\n  // performance.timing.navigationStart, which results in poor results in performance data. We only treat time origin\n  // data as reliable if they are within a reasonable threshold of the current time.\n\n  const { performance } = WINDOW;\n  if (!performance || !performance.now) {\n    _browserPerformanceTimeOriginMode = 'none';\n    return undefined;\n  }\n\n  const threshold = 3600 * 1000;\n  const performanceNow = performance.now();\n  const dateNow = Date.now();\n\n  // if timeOrigin isn't available set delta to threshold so it isn't used\n  const timeOriginDelta = performance.timeOrigin\n    ? Math.abs(performance.timeOrigin + performanceNow - dateNow)\n    : threshold;\n  const timeOriginIsReliable = timeOriginDelta < threshold;\n\n  // While performance.timing.navigationStart is deprecated in favor of performance.timeOrigin, performance.timeOrigin\n  // is not as widely supported. Namely, performance.timeOrigin is undefined in Safari as of writing.\n  // Also as of writing, performance.timing is not available in Web Workers in mainstream browsers, so it is not always\n  // a valid fallback. In the absence of an initial time provided by the browser, fallback to the current time from the\n  // Date API.\n  // eslint-disable-next-line deprecation/deprecation\n  const navigationStart = performance.timing && performance.timing.navigationStart;\n  const hasNavigationStart = typeof navigationStart === 'number';\n  // if navigationStart isn't available set delta to threshold so it isn't used\n  const navigationStartDelta = hasNavigationStart ? Math.abs(navigationStart + performanceNow - dateNow) : threshold;\n  const navigationStartIsReliable = navigationStartDelta < threshold;\n\n  if (timeOriginIsReliable || navigationStartIsReliable) {\n    // Use the more reliable time origin\n    if (timeOriginDelta <= navigationStartDelta) {\n      _browserPerformanceTimeOriginMode = 'timeOrigin';\n      return performance.timeOrigin;\n    } else {\n      _browserPerformanceTimeOriginMode = 'navigationStart';\n      return navigationStart;\n    }\n  }\n\n  // Either both timeOrigin and navigationStart are skewed or neither is available, fallback to Date.\n  _browserPerformanceTimeOriginMode = 'dateNow';\n  return dateNow;\n})();\n","/**\n * NOTE: In order to avoid circular dependencies, if you add a function to this module and it needs to print something,\n * you must either a) use `console.log` rather than the logger, or b) put your function elsewhere.\n *\n * Note: This file was originally called `global.ts`, but was changed to unblock users which might be doing\n * string replaces with bundlers like Vite for `global` (would break imports that rely on importing from utils/src/global).\n *\n * Why worldwide?\n *\n * Why not?\n */\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport type { Integration } from '@sentry/types';\n\nimport type { SdkSource } from './env';\n\n/** Internal global with common properties and Sentry extensions  */\nexport interface InternalGlobal {\n  navigator?: { userAgent?: string };\n  console: Console;\n  Sentry?: {\n    Integrations?: Integration[];\n  };\n  onerror?: {\n    (msg: unknown, url: unknown, line: unknown, column: unknown, error: unknown): boolean;\n    __SENTRY_INSTRUMENTED__?: true;\n    __SENTRY_LOADER__?: true;\n  };\n  onunhandledrejection?: {\n    (event: unknown): boolean;\n    __SENTRY_INSTRUMENTED__?: true;\n    __SENTRY_LOADER__?: true;\n  };\n  SENTRY_ENVIRONMENT?: string;\n  SENTRY_DSN?: string;\n  SENTRY_RELEASE?: {\n    id?: string;\n  };\n  SENTRY_SDK_SOURCE?: SdkSource;\n  /**\n   * Debug IDs are indirectly injected by Sentry CLI or bundler plugins to directly reference a particular source map\n   * for resolving of a source file. The injected code will place an entry into the record for each loaded bundle/JS\n   * file.\n   */\n  _sentryDebugIds?: Record<string, string>;\n  __SENTRY__: {\n    globalEventProcessors: any;\n    hub: any;\n    logger: any;\n    extensions?: {\n      /** Extension methods for the hub, which are bound to the current Hub instance */\n      // eslint-disable-next-line @typescript-eslint/ban-types\n      [key: string]: Function;\n    };\n  };\n}\n\n// The code below for 'isGlobalObj' and 'GLOBAL_OBJ' was copied from core-js before modification\n// https://github.com/zloirock/core-js/blob/1b944df55282cdc99c90db5f49eb0b6eda2cc0a3/packages/core-js/internals/global.js\n// core-js has the following licence:\n//\n// Copyright (c) 2014-2022 Denis Pushkarev\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n/** Returns 'obj' if it's the global object, otherwise returns undefined */\nfunction isGlobalObj(obj: { Math?: Math }): any | undefined {\n  return obj && obj.Math == Math ? obj : undefined;\n}\n\n/** Get's the global object for the current JavaScript runtime */\nexport const GLOBAL_OBJ: InternalGlobal =\n  (typeof globalThis == 'object' && isGlobalObj(globalThis)) ||\n  // eslint-disable-next-line no-restricted-globals\n  (typeof window == 'object' && isGlobalObj(window)) ||\n  (typeof self == 'object' && isGlobalObj(self)) ||\n  (typeof global == 'object' && isGlobalObj(global)) ||\n  (function (this: any) {\n    return this;\n  })() ||\n  {};\n\n/**\n * @deprecated Use GLOBAL_OBJ instead or WINDOW from @sentry/browser. This will be removed in v8\n */\nexport function getGlobalObject<T>(): T & InternalGlobal {\n  return GLOBAL_OBJ as T & InternalGlobal;\n}\n\n/**\n * Returns a global singleton contained in the global `__SENTRY__` object.\n *\n * If the singleton doesn't already exist in `__SENTRY__`, it will be created using the given factory\n * function and added to the `__SENTRY__` object.\n *\n * @param name name of the global singleton on __SENTRY__\n * @param creator creator Factory function to create the singleton if it doesn't already exist on `__SENTRY__`\n * @param obj (Optional) The global object on which to look for `__SENTRY__`, if not `GLOBAL_OBJ`'s return value\n * @returns the singleton\n */\nexport function getGlobalSingleton<T>(name: keyof InternalGlobal['__SENTRY__'], creator: () => T, obj?: unknown): T {\n  const gbl = (obj || GLOBAL_OBJ) as InternalGlobal;\n  const __SENTRY__ = (gbl.__SENTRY__ = gbl.__SENTRY__ || {});\n  const singleton = __SENTRY__[name] || (__SENTRY__[name] = creator());\n  return singleton;\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\tloaded: false,\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Flag the module as loaded\n\tmodule.loaded = true;\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.hmd = (module) => {\n\tmodule = Object.create(module);\n\tif (!module.children) module.children = [];\n\tObject.defineProperty(module, 'exports', {\n\t\tenumerable: true,\n\t\tset: () => {\n\t\t\tthrow new Error('ES Modules may not assign module.exports or exports.*, Use ESM export syntax, instead: ' + module.id);\n\t\t}\n\t});\n\treturn module;\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/app'];","/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\n\nimport type { PolymorphicEvent, Primitive } from '@sentry/types';\n\n// eslint-disable-next-line @typescript-eslint/unbound-method\nconst objectToString = Object.prototype.toString;\n\n/**\n * Checks whether given value's type is one of a few Error or Error-like\n * {@link isError}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isError(wat: unknown): wat is Error {\n  switch (objectToString.call(wat)) {\n    case '[object Error]':\n    case '[object Exception]':\n    case '[object DOMException]':\n      return true;\n    default:\n      return isInstanceOf(wat, Error);\n  }\n}\n/**\n * Checks whether given value is an instance of the given built-in class.\n *\n * @param wat The value to be checked\n * @param className\n * @returns A boolean representing the result.\n */\nfunction isBuiltin(wat: unknown, className: string): boolean {\n  return objectToString.call(wat) === `[object ${className}]`;\n}\n\n/**\n * Checks whether given value's type is ErrorEvent\n * {@link isErrorEvent}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isErrorEvent(wat: unknown): boolean {\n  return isBuiltin(wat, 'ErrorEvent');\n}\n\n/**\n * Checks whether given value's type is DOMError\n * {@link isDOMError}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isDOMError(wat: unknown): boolean {\n  return isBuiltin(wat, 'DOMError');\n}\n\n/**\n * Checks whether given value's type is DOMException\n * {@link isDOMException}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isDOMException(wat: unknown): boolean {\n  return isBuiltin(wat, 'DOMException');\n}\n\n/**\n * Checks whether given value's type is a string\n * {@link isString}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isString(wat: unknown): wat is string {\n  return isBuiltin(wat, 'String');\n}\n\n/**\n * Checks whether given value is a primitive (undefined, null, number, boolean, string, bigint, symbol)\n * {@link isPrimitive}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isPrimitive(wat: unknown): wat is Primitive {\n  return wat === null || (typeof wat !== 'object' && typeof wat !== 'function');\n}\n\n/**\n * Checks whether given value's type is an object literal\n * {@link isPlainObject}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isPlainObject(wat: unknown): wat is Record<string, unknown> {\n  return isBuiltin(wat, 'Object');\n}\n\n/**\n * Checks whether given value's type is an Event instance\n * {@link isEvent}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isEvent(wat: unknown): wat is PolymorphicEvent {\n  return typeof Event !== 'undefined' && isInstanceOf(wat, Event);\n}\n\n/**\n * Checks whether given value's type is an Element instance\n * {@link isElement}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isElement(wat: unknown): boolean {\n  return typeof Element !== 'undefined' && isInstanceOf(wat, Element);\n}\n\n/**\n * Checks whether given value's type is an regexp\n * {@link isRegExp}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isRegExp(wat: unknown): wat is RegExp {\n  return isBuiltin(wat, 'RegExp');\n}\n\n/**\n * Checks whether given value has a then function.\n * @param wat A value to be checked.\n */\nexport function isThenable(wat: any): wat is PromiseLike<any> {\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n  return Boolean(wat && wat.then && typeof wat.then === 'function');\n}\n\n/**\n * Checks whether given value's type is a SyntheticEvent\n * {@link isSyntheticEvent}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isSyntheticEvent(wat: unknown): boolean {\n  return isPlainObject(wat) && 'nativeEvent' in wat && 'preventDefault' in wat && 'stopPropagation' in wat;\n}\n\n/**\n * Checks whether given value is NaN\n * {@link isNaN}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isNaN(wat: unknown): boolean {\n  return typeof wat === 'number' && wat !== wat;\n}\n\n/**\n * Checks whether given value's type is an instance of provided constructor.\n * {@link isInstanceOf}.\n *\n * @param wat A value to be checked.\n * @param base A constructor to be used in a check.\n * @returns A boolean representing the result.\n */\nexport function isInstanceOf(wat: any, base: any): boolean {\n  try {\n    return wat instanceof base;\n  } catch (_e) {\n    return false;\n  }\n}\n","import { isRegExp, isString } from './is';\n\nexport { escapeStringForRegex } from './vendor/escapeStringForRegex';\n\n/**\n * Truncates given string to the maximum characters count\n *\n * @param str An object that contains serializable values\n * @param max Maximum number of characters in truncated string (0 = unlimited)\n * @returns string Encoded\n */\nexport function truncate(str: string, max: number = 0): string {\n  if (typeof str !== 'string' || max === 0) {\n    return str;\n  }\n  return str.length <= max ? str : `${str.slice(0, max)}...`;\n}\n\n/**\n * This is basically just `trim_line` from\n * https://github.com/getsentry/sentry/blob/master/src/sentry/lang/javascript/processor.py#L67\n *\n * @param str An object that contains serializable values\n * @param max Maximum number of characters in truncated string\n * @returns string Encoded\n */\nexport function snipLine(line: string, colno: number): string {\n  let newLine = line;\n  const lineLength = newLine.length;\n  if (lineLength <= 150) {\n    return newLine;\n  }\n  if (colno > lineLength) {\n    // eslint-disable-next-line no-param-reassign\n    colno = lineLength;\n  }\n\n  let start = Math.max(colno - 60, 0);\n  if (start < 5) {\n    start = 0;\n  }\n\n  let end = Math.min(start + 140, lineLength);\n  if (end > lineLength - 5) {\n    end = lineLength;\n  }\n  if (end === lineLength) {\n    start = Math.max(end - 140, 0);\n  }\n\n  newLine = newLine.slice(start, end);\n  if (start > 0) {\n    newLine = `'{snip} ${newLine}`;\n  }\n  if (end < lineLength) {\n    newLine += ' {snip}';\n  }\n\n  return newLine;\n}\n\n/**\n * Join values in array\n * @param input array of values to be joined together\n * @param delimiter string to be placed in-between values\n * @returns Joined values\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function safeJoin(input: any[], delimiter?: string): string {\n  if (!Array.isArray(input)) {\n    return '';\n  }\n\n  const output = [];\n  // eslint-disable-next-line @typescript-eslint/prefer-for-of\n  for (let i = 0; i < input.length; i++) {\n    const value = input[i];\n    try {\n      output.push(String(value));\n    } catch (e) {\n      output.push('[value cannot be serialized]');\n    }\n  }\n\n  return output.join(delimiter);\n}\n\n/**\n * Checks if the given value matches a regex or string\n *\n * @param value The string to test\n * @param pattern Either a regex or a string against which `value` will be matched\n * @param requireExactStringMatch If true, `value` must match `pattern` exactly. If false, `value` will match\n * `pattern` if it contains `pattern`. Only applies to string-type patterns.\n */\nexport function isMatchingPattern(\n  value: string,\n  pattern: RegExp | string,\n  requireExactStringMatch: boolean = false,\n): boolean {\n  if (!isString(value)) {\n    return false;\n  }\n\n  if (isRegExp(pattern)) {\n    return pattern.test(value);\n  }\n  if (isString(pattern)) {\n    return requireExactStringMatch ? value === pattern : value.includes(pattern);\n  }\n\n  return false;\n}\n\n/**\n * Test the given string against an array of strings and regexes. By default, string matching is done on a\n * substring-inclusion basis rather than a strict equality basis\n *\n * @param testString The string to test\n * @param patterns The patterns against which to test the string\n * @param requireExactStringMatch If true, `testString` must match one of the given string patterns exactly in order to\n * count. If false, `testString` will match a string pattern if it contains that pattern.\n * @returns\n */\nexport function stringMatchesSomePattern(\n  testString: string,\n  patterns: Array<string | RegExp> = [],\n  requireExactStringMatch: boolean = false,\n): boolean {\n  return patterns.some(pattern => isMatchingPattern(testString, pattern, requireExactStringMatch));\n}\n","import type { Event, EventProcessor, Hub, Integration, StackFrame } from '@sentry/types';\nimport { getEventDescription, logger, stringMatchesSomePattern } from '@sentry/utils';\n\n// \"Script error.\" is hard coded into browsers for errors that it can't read.\n// this is the result of a script being pulled in from an external domain and CORS.\nconst DEFAULT_IGNORE_ERRORS = [/^Script error\\.?$/, /^Javascript error: Script error\\.? on line 0$/];\n\nconst DEFAULT_IGNORE_TRANSACTIONS = [\n  /^.*healthcheck.*$/,\n  /^.*healthy.*$/,\n  /^.*live.*$/,\n  /^.*ready.*$/,\n  /^.*heartbeat.*$/,\n  /^.*\\/health$/,\n  /^.*\\/healthz$/,\n];\n\n/** Options for the InboundFilters integration */\nexport interface InboundFiltersOptions {\n  allowUrls: Array<string | RegExp>;\n  denyUrls: Array<string | RegExp>;\n  ignoreErrors: Array<string | RegExp>;\n  ignoreTransactions: Array<string | RegExp>;\n  ignoreInternal: boolean;\n  disableErrorDefaults: boolean;\n  disableTransactionDefaults: boolean;\n}\n\n/** Inbound filters configurable by the user */\nexport class InboundFilters implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'InboundFilters';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = InboundFilters.id;\n\n  public constructor(private readonly _options: Partial<InboundFiltersOptions> = {}) {}\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(addGlobalEventProcessor: (processor: EventProcessor) => void, getCurrentHub: () => Hub): void {\n    const eventProcess: EventProcessor = (event: Event) => {\n      const hub = getCurrentHub();\n      if (hub) {\n        const self = hub.getIntegration(InboundFilters);\n        if (self) {\n          const client = hub.getClient();\n          const clientOptions = client ? client.getOptions() : {};\n          const options = _mergeOptions(self._options, clientOptions);\n          return _shouldDropEvent(event, options) ? null : event;\n        }\n      }\n      return event;\n    };\n\n    eventProcess.id = this.name;\n    addGlobalEventProcessor(eventProcess);\n  }\n}\n\n/** JSDoc */\nexport function _mergeOptions(\n  internalOptions: Partial<InboundFiltersOptions> = {},\n  clientOptions: Partial<InboundFiltersOptions> = {},\n): Partial<InboundFiltersOptions> {\n  return {\n    allowUrls: [...(internalOptions.allowUrls || []), ...(clientOptions.allowUrls || [])],\n    denyUrls: [...(internalOptions.denyUrls || []), ...(clientOptions.denyUrls || [])],\n    ignoreErrors: [\n      ...(internalOptions.ignoreErrors || []),\n      ...(clientOptions.ignoreErrors || []),\n      ...(internalOptions.disableErrorDefaults ? [] : DEFAULT_IGNORE_ERRORS),\n    ],\n    ignoreTransactions: [\n      ...(internalOptions.ignoreTransactions || []),\n      ...(clientOptions.ignoreTransactions || []),\n      ...(internalOptions.disableTransactionDefaults ? [] : DEFAULT_IGNORE_TRANSACTIONS),\n    ],\n    ignoreInternal: internalOptions.ignoreInternal !== undefined ? internalOptions.ignoreInternal : true,\n  };\n}\n\n/** JSDoc */\nexport function _shouldDropEvent(event: Event, options: Partial<InboundFiltersOptions>): boolean {\n  if (options.ignoreInternal && _isSentryError(event)) {\n    __DEBUG_BUILD__ &&\n      logger.warn(`Event dropped due to being internal Sentry Error.\\nEvent: ${getEventDescription(event)}`);\n    return true;\n  }\n  if (_isIgnoredError(event, options.ignoreErrors)) {\n    __DEBUG_BUILD__ &&\n      logger.warn(\n        `Event dropped due to being matched by \\`ignoreErrors\\` option.\\nEvent: ${getEventDescription(event)}`,\n      );\n    return true;\n  }\n  if (_isIgnoredTransaction(event, options.ignoreTransactions)) {\n    __DEBUG_BUILD__ &&\n      logger.warn(\n        `Event dropped due to being matched by \\`ignoreTransactions\\` option.\\nEvent: ${getEventDescription(event)}`,\n      );\n    return true;\n  }\n  if (_isDeniedUrl(event, options.denyUrls)) {\n    __DEBUG_BUILD__ &&\n      logger.warn(\n        `Event dropped due to being matched by \\`denyUrls\\` option.\\nEvent: ${getEventDescription(\n          event,\n        )}.\\nUrl: ${_getEventFilterUrl(event)}`,\n      );\n    return true;\n  }\n  if (!_isAllowedUrl(event, options.allowUrls)) {\n    __DEBUG_BUILD__ &&\n      logger.warn(\n        `Event dropped due to not being matched by \\`allowUrls\\` option.\\nEvent: ${getEventDescription(\n          event,\n        )}.\\nUrl: ${_getEventFilterUrl(event)}`,\n      );\n    return true;\n  }\n  return false;\n}\n\nfunction _isIgnoredError(event: Event, ignoreErrors?: Array<string | RegExp>): boolean {\n  // If event.type, this is not an error\n  if (event.type || !ignoreErrors || !ignoreErrors.length) {\n    return false;\n  }\n\n  return _getPossibleEventMessages(event).some(message => stringMatchesSomePattern(message, ignoreErrors));\n}\n\nfunction _isIgnoredTransaction(event: Event, ignoreTransactions?: Array<string | RegExp>): boolean {\n  if (event.type !== 'transaction' || !ignoreTransactions || !ignoreTransactions.length) {\n    return false;\n  }\n\n  const name = event.transaction;\n  return name ? stringMatchesSomePattern(name, ignoreTransactions) : false;\n}\n\nfunction _isDeniedUrl(event: Event, denyUrls?: Array<string | RegExp>): boolean {\n  // TODO: Use Glob instead?\n  if (!denyUrls || !denyUrls.length) {\n    return false;\n  }\n  const url = _getEventFilterUrl(event);\n  return !url ? false : stringMatchesSomePattern(url, denyUrls);\n}\n\nfunction _isAllowedUrl(event: Event, allowUrls?: Array<string | RegExp>): boolean {\n  // TODO: Use Glob instead?\n  if (!allowUrls || !allowUrls.length) {\n    return true;\n  }\n  const url = _getEventFilterUrl(event);\n  return !url ? true : stringMatchesSomePattern(url, allowUrls);\n}\n\nfunction _getPossibleEventMessages(event: Event): string[] {\n  if (event.message) {\n    return [event.message];\n  }\n  if (event.exception) {\n    const { values } = event.exception;\n    try {\n      const { type = '', value = '' } = (values && values[values.length - 1]) || {};\n      return [`${value}`, `${type}: ${value}`];\n    } catch (oO) {\n      __DEBUG_BUILD__ && logger.error(`Cannot extract message for event ${getEventDescription(event)}`);\n      return [];\n    }\n  }\n  return [];\n}\n\nfunction _isSentryError(event: Event): boolean {\n  try {\n    // @ts-ignore can't be a sentry error if undefined\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    return event.exception.values[0].type === 'SentryError';\n  } catch (e) {\n    // ignore\n  }\n  return false;\n}\n\nfunction _getLastValidUrl(frames: StackFrame[] = []): string | null {\n  for (let i = frames.length - 1; i >= 0; i--) {\n    const frame = frames[i];\n\n    if (frame && frame.filename !== '<anonymous>' && frame.filename !== '[native code]') {\n      return frame.filename || null;\n    }\n  }\n\n  return null;\n}\n\nfunction _getEventFilterUrl(event: Event): string | null {\n  try {\n    let frames;\n    try {\n      // @ts-ignore we only care about frames if the whole thing here is defined\n      frames = event.exception.values[0].stacktrace.frames;\n    } catch (e) {\n      // ignore\n    }\n    return frames ? _getLastValidUrl(frames) : null;\n  } catch (oO) {\n    __DEBUG_BUILD__ && logger.error(`Cannot extract url for event ${getEventDescription(event)}`);\n    return null;\n  }\n}\n","export default function _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}","import type { Integration, WrappedFunction } from '@sentry/types';\nimport { getOriginalFunction } from '@sentry/utils';\n\nlet originalFunctionToString: () => void;\n\n/** Patch toString calls to return proper name for wrapped functions */\nexport class FunctionToString implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'FunctionToString';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = FunctionToString.id;\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(): void {\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    originalFunctionToString = Function.prototype.toString;\n\n    // intrinsics (like Function.prototype) might be immutable in some environments\n    // e.g. Node with --frozen-intrinsics, XS (an embedded JavaScript engine) or SES (a JavaScript proposal)\n    try {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      Function.prototype.toString = function (this: WrappedFunction, ...args: any[]): string {\n        const context = getOriginalFunction(this) || this;\n        return originalFunctionToString.apply(context, args);\n      };\n    } catch {\n      // ignore errors here, just don't patch this\n    }\n  }\n}\n","import { isString } from './is';\nimport { getGlobalObject } from './worldwide';\n\n// eslint-disable-next-line deprecation/deprecation\nconst WINDOW = getGlobalObject<Window>();\n\nconst DEFAULT_MAX_STRING_LENGTH = 80;\n\n/**\n * Given a child DOM element, returns a query-selector statement describing that\n * and its ancestors\n * e.g. [HTMLElement] => body > div > input#foo.btn[name=baz]\n * @returns generated DOM path\n */\nexport function htmlTreeAsString(\n  elem: unknown,\n  options: string[] | { keyAttrs?: string[]; maxStringLength?: number } = {},\n): string {\n  type SimpleNode = {\n    parentNode: SimpleNode;\n  } | null;\n\n  // try/catch both:\n  // - accessing event.target (see getsentry/raven-js#838, #768)\n  // - `htmlTreeAsString` because it's complex, and just accessing the DOM incorrectly\n  // - can throw an exception in some circumstances.\n  try {\n    let currentElem = elem as SimpleNode;\n    const MAX_TRAVERSE_HEIGHT = 5;\n    const out = [];\n    let height = 0;\n    let len = 0;\n    const separator = ' > ';\n    const sepLength = separator.length;\n    let nextStr;\n    const keyAttrs = Array.isArray(options) ? options : options.keyAttrs;\n    const maxStringLength = (!Array.isArray(options) && options.maxStringLength) || DEFAULT_MAX_STRING_LENGTH;\n\n    while (currentElem && height++ < MAX_TRAVERSE_HEIGHT) {\n      nextStr = _htmlElementAsString(currentElem, keyAttrs);\n      // bail out if\n      // - nextStr is the 'html' element\n      // - the length of the string that would be created exceeds maxStringLength\n      //   (ignore this limit if we are on the first iteration)\n      if (nextStr === 'html' || (height > 1 && len + out.length * sepLength + nextStr.length >= maxStringLength)) {\n        break;\n      }\n\n      out.push(nextStr);\n\n      len += nextStr.length;\n      currentElem = currentElem.parentNode;\n    }\n\n    return out.reverse().join(separator);\n  } catch (_oO) {\n    return '<unknown>';\n  }\n}\n\n/**\n * Returns a simple, query-selector representation of a DOM element\n * e.g. [HTMLElement] => input#foo.btn[name=baz]\n * @returns generated DOM path\n */\nfunction _htmlElementAsString(el: unknown, keyAttrs?: string[]): string {\n  const elem = el as {\n    tagName?: string;\n    id?: string;\n    className?: string;\n    getAttribute(key: string): string;\n  };\n\n  const out = [];\n  let className;\n  let classes;\n  let key;\n  let attr;\n  let i;\n\n  if (!elem || !elem.tagName) {\n    return '';\n  }\n\n  out.push(elem.tagName.toLowerCase());\n\n  // Pairs of attribute keys defined in `serializeAttribute` and their values on element.\n  const keyAttrPairs =\n    keyAttrs && keyAttrs.length\n      ? keyAttrs.filter(keyAttr => elem.getAttribute(keyAttr)).map(keyAttr => [keyAttr, elem.getAttribute(keyAttr)])\n      : null;\n\n  if (keyAttrPairs && keyAttrPairs.length) {\n    keyAttrPairs.forEach(keyAttrPair => {\n      out.push(`[${keyAttrPair[0]}=\"${keyAttrPair[1]}\"]`);\n    });\n  } else {\n    if (elem.id) {\n      out.push(`#${elem.id}`);\n    }\n\n    // eslint-disable-next-line prefer-const\n    className = elem.className;\n    if (className && isString(className)) {\n      classes = className.split(/\\s+/);\n      for (i = 0; i < classes.length; i++) {\n        out.push(`.${classes[i]}`);\n      }\n    }\n  }\n  const allowedAttrs = ['aria-label', 'type', 'name', 'title', 'alt'];\n  for (i = 0; i < allowedAttrs.length; i++) {\n    key = allowedAttrs[i];\n    attr = elem.getAttribute(key);\n    if (attr) {\n      out.push(`[${key}=\"${attr}\"]`);\n    }\n  }\n  return out.join('');\n}\n\n/**\n * A safe form of location.href\n */\nexport function getLocationHref(): string {\n  try {\n    return WINDOW.document.location.href;\n  } catch (oO) {\n    return '';\n  }\n}\n\n/**\n * Gets a DOM element by using document.querySelector.\n *\n * This wrapper will first check for the existance of the function before\n * actually calling it so that we don't have to take care of this check,\n * every time we want to access the DOM.\n *\n * Reason: DOM/querySelector is not available in all environments.\n *\n * We have to cast to any because utils can be consumed by a variety of environments,\n * and we don't want to break TS users. If you know what element will be selected by\n * `document.querySelector`, specify it as part of the generic call. For example,\n * `const element = getDomElement<Element>('selector');`\n *\n * @param selector the selector string passed on to document.querySelector\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function getDomElement<E = any>(selector: string): E | null {\n  if (WINDOW.document && WINDOW.document.querySelector) {\n    return WINDOW.document.querySelector(selector) as unknown as E;\n  }\n  return null;\n}\n","/* eslint-disable max-lines */\n/* eslint-disable @typescript-eslint/no-explicit-any */\nimport type { WrappedFunction } from '@sentry/types';\n\nimport { htmlTreeAsString } from './browser';\nimport { isElement, isError, isEvent, isInstanceOf, isPlainObject, isPrimitive } from './is';\nimport { truncate } from './string';\n\n/**\n * Replace a method in an object with a wrapped version of itself.\n *\n * @param source An object that contains a method to be wrapped.\n * @param name The name of the method to be wrapped.\n * @param replacementFactory A higher-order function that takes the original version of the given method and returns a\n * wrapped version. Note: The function returned by `replacementFactory` needs to be a non-arrow function, in order to\n * preserve the correct value of `this`, and the original method must be called using `origMethod.call(this, <other\n * args>)` or `origMethod.apply(this, [<other args>])` (rather than being called directly), again to preserve `this`.\n * @returns void\n */\nexport function fill(source: { [key: string]: any }, name: string, replacementFactory: (...args: any[]) => any): void {\n  if (!(name in source)) {\n    return;\n  }\n\n  const original = source[name] as () => any;\n  const wrapped = replacementFactory(original) as WrappedFunction;\n\n  // Make sure it's a function first, as we need to attach an empty prototype for `defineProperties` to work\n  // otherwise it'll throw \"TypeError: Object.defineProperties called on non-object\"\n  if (typeof wrapped === 'function') {\n    try {\n      markFunctionWrapped(wrapped, original);\n    } catch (_Oo) {\n      // This can throw if multiple fill happens on a global object like XMLHttpRequest\n      // Fixes https://github.com/getsentry/sentry-javascript/issues/2043\n    }\n  }\n\n  source[name] = wrapped;\n}\n\n/**\n * Defines a non-enumerable property on the given object.\n *\n * @param obj The object on which to set the property\n * @param name The name of the property to be set\n * @param value The value to which to set the property\n */\nexport function addNonEnumerableProperty(obj: { [key: string]: unknown }, name: string, value: unknown): void {\n  Object.defineProperty(obj, name, {\n    // enumerable: false, // the default, so we can save on bundle size by not explicitly setting it\n    value: value,\n    writable: true,\n    configurable: true,\n  });\n}\n\n/**\n * Remembers the original function on the wrapped function and\n * patches up the prototype.\n *\n * @param wrapped the wrapper function\n * @param original the original function that gets wrapped\n */\nexport function markFunctionWrapped(wrapped: WrappedFunction, original: WrappedFunction): void {\n  const proto = original.prototype || {};\n  wrapped.prototype = original.prototype = proto;\n  addNonEnumerableProperty(wrapped, '__sentry_original__', original);\n}\n\n/**\n * This extracts the original function if available.  See\n * `markFunctionWrapped` for more information.\n *\n * @param func the function to unwrap\n * @returns the unwrapped version of the function if available.\n */\nexport function getOriginalFunction(func: WrappedFunction): WrappedFunction | undefined {\n  return func.__sentry_original__;\n}\n\n/**\n * Encodes given object into url-friendly format\n *\n * @param object An object that contains serializable values\n * @returns string Encoded\n */\nexport function urlEncode(object: { [key: string]: any }): string {\n  return Object.keys(object)\n    .map(key => `${encodeURIComponent(key)}=${encodeURIComponent(object[key])}`)\n    .join('&');\n}\n\n/**\n * Transforms any `Error` or `Event` into a plain object with all of their enumerable properties, and some of their\n * non-enumerable properties attached.\n *\n * @param value Initial source that we have to transform in order for it to be usable by the serializer\n * @returns An Event or Error turned into an object - or the value argurment itself, when value is neither an Event nor\n *  an Error.\n */\nexport function convertToPlainObject<V>(value: V):\n  | {\n      [ownProps: string]: unknown;\n      type: string;\n      target: string;\n      currentTarget: string;\n      detail?: unknown;\n    }\n  | {\n      [ownProps: string]: unknown;\n      message: string;\n      name: string;\n      stack?: string;\n    }\n  | V {\n  if (isError(value)) {\n    return {\n      message: value.message,\n      name: value.name,\n      stack: value.stack,\n      ...getOwnProperties(value),\n    };\n  } else if (isEvent(value)) {\n    const newObj: {\n      [ownProps: string]: unknown;\n      type: string;\n      target: string;\n      currentTarget: string;\n      detail?: unknown;\n    } = {\n      type: value.type,\n      target: serializeEventTarget(value.target),\n      currentTarget: serializeEventTarget(value.currentTarget),\n      ...getOwnProperties(value),\n    };\n\n    if (typeof CustomEvent !== 'undefined' && isInstanceOf(value, CustomEvent)) {\n      newObj.detail = value.detail;\n    }\n\n    return newObj;\n  } else {\n    return value;\n  }\n}\n\n/** Creates a string representation of the target of an `Event` object */\nfunction serializeEventTarget(target: unknown): string {\n  try {\n    return isElement(target) ? htmlTreeAsString(target) : Object.prototype.toString.call(target);\n  } catch (_oO) {\n    return '<unknown>';\n  }\n}\n\n/** Filters out all but an object's own properties */\nfunction getOwnProperties(obj: unknown): { [key: string]: unknown } {\n  if (typeof obj === 'object' && obj !== null) {\n    const extractedProps: { [key: string]: unknown } = {};\n    for (const property in obj) {\n      if (Object.prototype.hasOwnProperty.call(obj, property)) {\n        extractedProps[property] = (obj as Record<string, unknown>)[property];\n      }\n    }\n    return extractedProps;\n  } else {\n    return {};\n  }\n}\n\n/**\n * Given any captured exception, extract its keys and create a sorted\n * and truncated list that will be used inside the event message.\n * eg. `Non-error exception captured with keys: foo, bar, baz`\n */\nexport function extractExceptionKeysForMessage(exception: Record<string, unknown>, maxLength: number = 40): string {\n  const keys = Object.keys(convertToPlainObject(exception));\n  keys.sort();\n\n  if (!keys.length) {\n    return '[object has no keys]';\n  }\n\n  if (keys[0].length >= maxLength) {\n    return truncate(keys[0], maxLength);\n  }\n\n  for (let includedKeys = keys.length; includedKeys > 0; includedKeys--) {\n    const serialized = keys.slice(0, includedKeys).join(', ');\n    if (serialized.length > maxLength) {\n      continue;\n    }\n    if (includedKeys === keys.length) {\n      return serialized;\n    }\n    return truncate(serialized, maxLength);\n  }\n\n  return '';\n}\n\n/**\n * Given any object, return a new object having removed all fields whose value was `undefined`.\n * Works recursively on objects and arrays.\n *\n * Attention: This function keeps circular references in the returned object.\n */\nexport function dropUndefinedKeys<T>(inputValue: T): T {\n  // This map keeps track of what already visited nodes map to.\n  // Our Set - based memoBuilder doesn't work here because we want to the output object to have the same circular\n  // references as the input object.\n  const memoizationMap = new Map<unknown, unknown>();\n\n  // This function just proxies `_dropUndefinedKeys` to keep the `memoBuilder` out of this function's API\n  return _dropUndefinedKeys(inputValue, memoizationMap);\n}\n\nfunction _dropUndefinedKeys<T>(inputValue: T, memoizationMap: Map<unknown, unknown>): T {\n  if (isPlainObject(inputValue)) {\n    // If this node has already been visited due to a circular reference, return the object it was mapped to in the new object\n    const memoVal = memoizationMap.get(inputValue);\n    if (memoVal !== undefined) {\n      return memoVal as T;\n    }\n\n    const returnValue: { [key: string]: any } = {};\n    // Store the mapping of this value in case we visit it again, in case of circular data\n    memoizationMap.set(inputValue, returnValue);\n\n    for (const key of Object.keys(inputValue)) {\n      if (typeof inputValue[key] !== 'undefined') {\n        returnValue[key] = _dropUndefinedKeys(inputValue[key], memoizationMap);\n      }\n    }\n\n    return returnValue as T;\n  }\n\n  if (Array.isArray(inputValue)) {\n    // If this node has already been visited due to a circular reference, return the array it was mapped to in the new object\n    const memoVal = memoizationMap.get(inputValue);\n    if (memoVal !== undefined) {\n      return memoVal as T;\n    }\n\n    const returnValue: unknown[] = [];\n    // Store the mapping of this value in case we visit it again, in case of circular data\n    memoizationMap.set(inputValue, returnValue);\n\n    inputValue.forEach((item: unknown) => {\n      returnValue.push(_dropUndefinedKeys(item, memoizationMap));\n    });\n\n    return returnValue as unknown as T;\n  }\n\n  return inputValue;\n}\n\n/**\n * Ensure that something is an object.\n *\n * Turns `undefined` and `null` into `String`s and all other primitives into instances of their respective wrapper\n * classes (String, Boolean, Number, etc.). Acts as the identity function on non-primitives.\n *\n * @param wat The subject of the objectification\n * @returns A version of `wat` which can safely be used with `Object` class methods\n */\nexport function objectify(wat: unknown): typeof Object {\n  let objectified;\n  switch (true) {\n    case wat === undefined || wat === null:\n      objectified = new String(wat);\n      break;\n\n    // Though symbols and bigints do have wrapper classes (`Symbol` and `BigInt`, respectively), for whatever reason\n    // those classes don't have constructors which can be used with the `new` keyword. We therefore need to cast each as\n    // an object in order to wrap it.\n    case typeof wat === 'symbol' || typeof wat === 'bigint':\n      objectified = Object(wat);\n      break;\n\n    // this will catch the remaining primitives: `String`, `Number`, and `Boolean`\n    case isPrimitive(wat):\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      objectified = new (wat as any).constructor(wat);\n      break;\n\n    // by process of elimination, at this point we know that `wat` must already be an object\n    default:\n      objectified = wat;\n      break;\n  }\n  return objectified;\n}\n","import type { StackFrame, StackLineParser, StackParser } from '@sentry/types';\n\nimport type { GetModuleFn } from './node-stack-trace';\nimport { node } from './node-stack-trace';\n\nconst STACKTRACE_FRAME_LIMIT = 50;\n// Used to sanitize webpack (error: *) wrapped stack errors\nconst WEBPACK_ERROR_REGEXP = /\\(error: (.*)\\)/;\n\n/**\n * Creates a stack parser with the supplied line parsers\n *\n * StackFrames are returned in the correct order for Sentry Exception\n * frames and with Sentry SDK internal frames removed from the top and bottom\n *\n */\nexport function createStackParser(...parsers: StackLineParser[]): StackParser {\n  const sortedParsers = parsers.sort((a, b) => a[0] - b[0]).map(p => p[1]);\n\n  return (stack: string, skipFirst: number = 0): StackFrame[] => {\n    const frames: StackFrame[] = [];\n    const lines = stack.split('\\n');\n\n    for (let i = skipFirst; i < lines.length; i++) {\n      const line = lines[i];\n      // Ignore lines over 1kb as they are unlikely to be stack frames.\n      // Many of the regular expressions use backtracking which results in run time that increases exponentially with\n      // input size. Huge strings can result in hangs/Denial of Service:\n      // https://github.com/getsentry/sentry-javascript/issues/2286\n      if (line.length > 1024) {\n        continue;\n      }\n\n      // https://github.com/getsentry/sentry-javascript/issues/5459\n      // Remove webpack (error: *) wrappers\n      const cleanedLine = WEBPACK_ERROR_REGEXP.test(line) ? line.replace(WEBPACK_ERROR_REGEXP, '$1') : line;\n\n      // https://github.com/getsentry/sentry-javascript/issues/7813\n      // Skip Error: lines\n      if (cleanedLine.match(/\\S*Error: /)) {\n        continue;\n      }\n\n      for (const parser of sortedParsers) {\n        const frame = parser(cleanedLine);\n\n        if (frame) {\n          frames.push(frame);\n          break;\n        }\n      }\n\n      if (frames.length >= STACKTRACE_FRAME_LIMIT) {\n        break;\n      }\n    }\n\n    return stripSentryFramesAndReverse(frames);\n  };\n}\n\n/**\n * Gets a stack parser implementation from Options.stackParser\n * @see Options\n *\n * If options contains an array of line parsers, it is converted into a parser\n */\nexport function stackParserFromStackParserOptions(stackParser: StackParser | StackLineParser[]): StackParser {\n  if (Array.isArray(stackParser)) {\n    return createStackParser(...stackParser);\n  }\n  return stackParser;\n}\n\n/**\n * Removes Sentry frames from the top and bottom of the stack if present and enforces a limit of max number of frames.\n * Assumes stack input is ordered from top to bottom and returns the reverse representation so call site of the\n * function that caused the crash is the last frame in the array.\n * @hidden\n */\nexport function stripSentryFramesAndReverse(stack: ReadonlyArray<StackFrame>): StackFrame[] {\n  if (!stack.length) {\n    return [];\n  }\n\n  const localStack = stack.slice(0, STACKTRACE_FRAME_LIMIT);\n\n  const lastFrameFunction = localStack[localStack.length - 1].function;\n  // If stack starts with one of our API calls, remove it (starts, meaning it's the top of the stack - aka last call)\n  if (lastFrameFunction && /sentryWrapped/.test(lastFrameFunction)) {\n    localStack.pop();\n  }\n\n  // Reversing in the middle of the procedure allows us to just pop the values off the stack\n  localStack.reverse();\n\n  const firstFrameFunction = localStack[localStack.length - 1].function;\n  // If stack ends with one of our internal API calls, remove it (ends, meaning it's the bottom of the stack - aka top-most call)\n  if (firstFrameFunction && /captureMessage|captureException/.test(firstFrameFunction)) {\n    localStack.pop();\n  }\n\n  return localStack.map(frame => ({\n    ...frame,\n    filename: frame.filename || localStack[localStack.length - 1].filename,\n    function: frame.function || '?',\n  }));\n}\n\nconst defaultFunctionName = '<anonymous>';\n\n/**\n * Safely extract function name from itself\n */\nexport function getFunctionName(fn: unknown): string {\n  try {\n    if (!fn || typeof fn !== 'function') {\n      return defaultFunctionName;\n    }\n    return fn.name || defaultFunctionName;\n  } catch (e) {\n    // Just accessing custom props in some Selenium environments\n    // can cause a \"Permission denied\" exception (see raven-js#495).\n    return defaultFunctionName;\n  }\n}\n\n/**\n * Node.js stack line parser\n *\n * This is in @sentry/utils so it can be used from the Electron SDK in the browser for when `nodeIntegration == true`.\n * This allows it to be used without referencing or importing any node specific code which causes bundlers to complain\n */\nexport function nodeStackLineParser(getModule?: GetModuleFn): StackLineParser {\n  return [90, node(getModule)];\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport type { Event, Exception, Mechanism, StackFrame } from '@sentry/types';\n\nimport { addNonEnumerableProperty } from './object';\nimport { snipLine } from './string';\nimport { GLOBAL_OBJ } from './worldwide';\n\ninterface CryptoInternal {\n  getRandomValues(array: Uint8Array): Uint8Array;\n  randomUUID?(): string;\n}\n\n/** An interface for common properties on global */\ninterface CryptoGlobal {\n  msCrypto?: CryptoInternal;\n  crypto?: CryptoInternal;\n}\n\n/**\n * UUID4 generator\n *\n * @returns string Generated UUID4.\n */\nexport function uuid4(): string {\n  const gbl = GLOBAL_OBJ as typeof GLOBAL_OBJ & CryptoGlobal;\n  const crypto = gbl.crypto || gbl.msCrypto;\n\n  if (crypto && crypto.randomUUID) {\n    return crypto.randomUUID().replace(/-/g, '');\n  }\n\n  const getRandomByte =\n    crypto && crypto.getRandomValues ? () => crypto.getRandomValues(new Uint8Array(1))[0] : () => Math.random() * 16;\n\n  // http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/2117523#2117523\n  // Concatenating the following numbers as strings results in '10000000100040008000100000000000'\n  return (([1e7] as unknown as string) + 1e3 + 4e3 + 8e3 + 1e11).replace(/[018]/g, c =>\n    // eslint-disable-next-line no-bitwise\n    ((c as unknown as number) ^ ((getRandomByte() & 15) >> ((c as unknown as number) / 4))).toString(16),\n  );\n}\n\nfunction getFirstException(event: Event): Exception | undefined {\n  return event.exception && event.exception.values ? event.exception.values[0] : undefined;\n}\n\n/**\n * Extracts either message or type+value from an event that can be used for user-facing logs\n * @returns event's description\n */\nexport function getEventDescription(event: Event): string {\n  const { message, event_id: eventId } = event;\n  if (message) {\n    return message;\n  }\n\n  const firstException = getFirstException(event);\n  if (firstException) {\n    if (firstException.type && firstException.value) {\n      return `${firstException.type}: ${firstException.value}`;\n    }\n    return firstException.type || firstException.value || eventId || '<unknown>';\n  }\n  return eventId || '<unknown>';\n}\n\n/**\n * Adds exception values, type and value to an synthetic Exception.\n * @param event The event to modify.\n * @param value Value of the exception.\n * @param type Type of the exception.\n * @hidden\n */\nexport function addExceptionTypeValue(event: Event, value?: string, type?: string): void {\n  const exception = (event.exception = event.exception || {});\n  const values = (exception.values = exception.values || []);\n  const firstException = (values[0] = values[0] || {});\n  if (!firstException.value) {\n    firstException.value = value || '';\n  }\n  if (!firstException.type) {\n    firstException.type = type || 'Error';\n  }\n}\n\n/**\n * Adds exception mechanism data to a given event. Uses defaults if the second parameter is not passed.\n *\n * @param event The event to modify.\n * @param newMechanism Mechanism data to add to the event.\n * @hidden\n */\nexport function addExceptionMechanism(event: Event, newMechanism?: Partial<Mechanism>): void {\n  const firstException = getFirstException(event);\n  if (!firstException) {\n    return;\n  }\n\n  const defaultMechanism = { type: 'generic', handled: true };\n  const currentMechanism = firstException.mechanism;\n  firstException.mechanism = { ...defaultMechanism, ...currentMechanism, ...newMechanism };\n\n  if (newMechanism && 'data' in newMechanism) {\n    const mergedData = { ...(currentMechanism && currentMechanism.data), ...newMechanism.data };\n    firstException.mechanism.data = mergedData;\n  }\n}\n\n// https://semver.org/#is-there-a-suggested-regular-expression-regex-to-check-a-semver-string\nconst SEMVER_REGEXP =\n  /^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$/;\n\n/**\n * Represents Semantic Versioning object\n */\ninterface SemVer {\n  major?: number;\n  minor?: number;\n  patch?: number;\n  prerelease?: string;\n  buildmetadata?: string;\n}\n\n/**\n * Parses input into a SemVer interface\n * @param input string representation of a semver version\n */\nexport function parseSemver(input: string): SemVer {\n  const match = input.match(SEMVER_REGEXP) || [];\n  const major = parseInt(match[1], 10);\n  const minor = parseInt(match[2], 10);\n  const patch = parseInt(match[3], 10);\n  return {\n    buildmetadata: match[5],\n    major: isNaN(major) ? undefined : major,\n    minor: isNaN(minor) ? undefined : minor,\n    patch: isNaN(patch) ? undefined : patch,\n    prerelease: match[4],\n  };\n}\n\n/**\n * This function adds context (pre/post/line) lines to the provided frame\n *\n * @param lines string[] containing all lines\n * @param frame StackFrame that will be mutated\n * @param linesOfContext number of context lines we want to add pre/post\n */\nexport function addContextToFrame(lines: string[], frame: StackFrame, linesOfContext: number = 5): void {\n  // When there is no line number in the frame, attaching context is nonsensical and will even break grouping\n  if (frame.lineno === undefined) {\n    return;\n  }\n\n  const maxLines = lines.length;\n  const sourceLine = Math.max(Math.min(maxLines, frame.lineno - 1), 0);\n\n  frame.pre_context = lines\n    .slice(Math.max(0, sourceLine - linesOfContext), sourceLine)\n    .map((line: string) => snipLine(line, 0));\n\n  frame.context_line = snipLine(lines[Math.min(maxLines - 1, sourceLine)], frame.colno || 0);\n\n  frame.post_context = lines\n    .slice(Math.min(sourceLine + 1, maxLines), sourceLine + 1 + linesOfContext)\n    .map((line: string) => snipLine(line, 0));\n}\n\n/**\n * Checks whether or not we've already captured the given exception (note: not an identical exception - the very object\n * in question), and marks it captured if not.\n *\n * This is useful because it's possible for an error to get captured by more than one mechanism. After we intercept and\n * record an error, we rethrow it (assuming we've intercepted it before it's reached the top-level global handlers), so\n * that we don't interfere with whatever effects the error might have had were the SDK not there. At that point, because\n * the error has been rethrown, it's possible for it to bubble up to some other code we've instrumented. If it's not\n * caught after that, it will bubble all the way up to the global handlers (which of course we also instrument). This\n * function helps us ensure that even if we encounter the same error more than once, we only record it the first time we\n * see it.\n *\n * Note: It will ignore primitives (always return `false` and not mark them as seen), as properties can't be set on\n * them. {@link: Object.objectify} can be used on exceptions to convert any that are primitives into their equivalent\n * object wrapper forms so that this check will always work. However, because we need to flag the exact object which\n * will get rethrown, and because that rethrowing happens outside of the event processing pipeline, the objectification\n * must be done before the exception captured.\n *\n * @param A thrown exception to check or flag as having been seen\n * @returns `true` if the exception has already been captured, `false` if not (with the side effect of marking it seen)\n */\nexport function checkOrSetAlreadyCaught(exception: unknown): boolean {\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n  if (exception && (exception as any).__sentry_captured__) {\n    return true;\n  }\n\n  try {\n    // set it this way rather than by assignment so that it's not ennumerable and therefore isn't recorded by the\n    // `ExtraErrorData` integration\n    addNonEnumerableProperty(exception as { [key: string]: unknown }, '__sentry_captured__', true);\n  } catch (err) {\n    // `exception` is a primitive, so we can't mark it seen\n  }\n\n  return false;\n}\n\n/**\n * Checks whether the given input is already an array, and if it isn't, wraps it in one.\n *\n * @param maybeArray Input to turn into an array, if necessary\n * @returns The input, if already an array, or an array with the input as the only element, if not\n */\nexport function arrayify<T = unknown>(maybeArray: T | T[]): T[] {\n  return Array.isArray(maybeArray) ? maybeArray : [maybeArray];\n}\n","import type { WrappedFunction } from '@sentry/types';\n\nimport { getGlobalSingleton, GLOBAL_OBJ } from './worldwide';\n\n/** Prefix for logging strings */\nconst PREFIX = 'Sentry Logger ';\n\nexport const CONSOLE_LEVELS = ['debug', 'info', 'warn', 'error', 'log', 'assert', 'trace'] as const;\nexport type ConsoleLevel = (typeof CONSOLE_LEVELS)[number];\n\ntype LoggerMethod = (...args: unknown[]) => void;\ntype LoggerConsoleMethods = Record<(typeof CONSOLE_LEVELS)[number], LoggerMethod>;\n\n/** JSDoc */\ninterface Logger extends LoggerConsoleMethods {\n  disable(): void;\n  enable(): void;\n}\n\n/**\n * Temporarily disable sentry console instrumentations.\n *\n * @param callback The function to run against the original `console` messages\n * @returns The results of the callback\n */\nexport function consoleSandbox<T>(callback: () => T): T {\n  if (!('console' in GLOBAL_OBJ)) {\n    return callback();\n  }\n\n  const originalConsole = GLOBAL_OBJ.console as Console & Record<string, unknown>;\n  const wrappedLevels: Partial<LoggerConsoleMethods> = {};\n\n  // Restore all wrapped console methods\n  CONSOLE_LEVELS.forEach(level => {\n    // TODO(v7): Remove this check as it's only needed for Node 6\n    const originalWrappedFunc =\n      originalConsole[level] && (originalConsole[level] as WrappedFunction).__sentry_original__;\n    if (level in originalConsole && originalWrappedFunc) {\n      wrappedLevels[level] = originalConsole[level] as LoggerConsoleMethods[typeof level];\n      originalConsole[level] = originalWrappedFunc as Console[typeof level];\n    }\n  });\n\n  try {\n    return callback();\n  } finally {\n    // Revert restoration to wrapped state\n    Object.keys(wrappedLevels).forEach(level => {\n      originalConsole[level] = wrappedLevels[level as (typeof CONSOLE_LEVELS)[number]];\n    });\n  }\n}\n\nfunction makeLogger(): Logger {\n  let enabled = false;\n  const logger: Partial<Logger> = {\n    enable: () => {\n      enabled = true;\n    },\n    disable: () => {\n      enabled = false;\n    },\n  };\n\n  if (__DEBUG_BUILD__) {\n    CONSOLE_LEVELS.forEach(name => {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      logger[name] = (...args: any[]) => {\n        if (enabled) {\n          consoleSandbox(() => {\n            GLOBAL_OBJ.console[name](`${PREFIX}[${name}]:`, ...args);\n          });\n        }\n      };\n    });\n  } else {\n    CONSOLE_LEVELS.forEach(name => {\n      logger[name] = () => undefined;\n    });\n  }\n\n  return logger as Logger;\n}\n\n// Ensure we only have a single logger instance, even if multiple versions of @sentry/utils are being used\nlet logger: Logger;\nif (__DEBUG_BUILD__) {\n  logger = getGlobalSingleton('logger', makeLogger);\n} else {\n  logger = makeLogger();\n}\n\nexport { logger };\n","export const DEFAULT_ENVIRONMENT = 'production';\n","/* eslint-disable @typescript-eslint/explicit-function-return-type */\n/* eslint-disable @typescript-eslint/typedef */\n/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\n/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { isThenable } from './is';\n\n/** SyncPromise internal states */\nconst enum States {\n  /** Pending */\n  PENDING = 0,\n  /** Resolved / OK */\n  RESOLVED = 1,\n  /** Rejected / Error */\n  REJECTED = 2,\n}\n\n// Overloads so we can call resolvedSyncPromise without arguments and generic argument\nexport function resolvedSyncPromise(): PromiseLike<void>;\nexport function resolvedSyncPromise<T>(value: T | PromiseLike<T>): PromiseLike<T>;\n\n/**\n * Creates a resolved sync promise.\n *\n * @param value the value to resolve the promise with\n * @returns the resolved sync promise\n */\nexport function resolvedSyncPromise<T>(value?: T | PromiseLike<T>): PromiseLike<T> {\n  return new SyncPromise(resolve => {\n    resolve(value);\n  });\n}\n\n/**\n * Creates a rejected sync promise.\n *\n * @param value the value to reject the promise with\n * @returns the rejected sync promise\n */\nexport function rejectedSyncPromise<T = never>(reason?: any): PromiseLike<T> {\n  return new SyncPromise((_, reject) => {\n    reject(reason);\n  });\n}\n\n/**\n * Thenable class that behaves like a Promise and follows it's interface\n * but is not async internally\n */\nclass SyncPromise<T> implements PromiseLike<T> {\n  private _state: States = States.PENDING;\n  private _handlers: Array<[boolean, (value: T) => void, (reason: any) => any]> = [];\n  private _value: any;\n\n  public constructor(\n    executor: (resolve: (value?: T | PromiseLike<T> | null) => void, reject: (reason?: any) => void) => void,\n  ) {\n    try {\n      executor(this._resolve, this._reject);\n    } catch (e) {\n      this._reject(e);\n    }\n  }\n\n  /** JSDoc */\n  public then<TResult1 = T, TResult2 = never>(\n    onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | null,\n    onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | null,\n  ): PromiseLike<TResult1 | TResult2> {\n    return new SyncPromise((resolve, reject) => {\n      this._handlers.push([\n        false,\n        result => {\n          if (!onfulfilled) {\n            // TODO: ¯\\_(ツ)_/¯\n            // TODO: FIXME\n            resolve(result as any);\n          } else {\n            try {\n              resolve(onfulfilled(result));\n            } catch (e) {\n              reject(e);\n            }\n          }\n        },\n        reason => {\n          if (!onrejected) {\n            reject(reason);\n          } else {\n            try {\n              resolve(onrejected(reason));\n            } catch (e) {\n              reject(e);\n            }\n          }\n        },\n      ]);\n      this._executeHandlers();\n    });\n  }\n\n  /** JSDoc */\n  public catch<TResult = never>(\n    onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | null,\n  ): PromiseLike<T | TResult> {\n    return this.then(val => val, onrejected);\n  }\n\n  /** JSDoc */\n  public finally<TResult>(onfinally?: (() => void) | null): PromiseLike<TResult> {\n    return new SyncPromise<TResult>((resolve, reject) => {\n      let val: TResult | any;\n      let isRejected: boolean;\n\n      return this.then(\n        value => {\n          isRejected = false;\n          val = value;\n          if (onfinally) {\n            onfinally();\n          }\n        },\n        reason => {\n          isRejected = true;\n          val = reason;\n          if (onfinally) {\n            onfinally();\n          }\n        },\n      ).then(() => {\n        if (isRejected) {\n          reject(val);\n          return;\n        }\n\n        resolve(val as unknown as any);\n      });\n    });\n  }\n\n  /** JSDoc */\n  private readonly _resolve = (value?: T | PromiseLike<T> | null) => {\n    this._setResult(States.RESOLVED, value);\n  };\n\n  /** JSDoc */\n  private readonly _reject = (reason?: any) => {\n    this._setResult(States.REJECTED, reason);\n  };\n\n  /** JSDoc */\n  private readonly _setResult = (state: States, value?: T | PromiseLike<T> | any) => {\n    if (this._state !== States.PENDING) {\n      return;\n    }\n\n    if (isThenable(value)) {\n      void (value as PromiseLike<T>).then(this._resolve, this._reject);\n      return;\n    }\n\n    this._state = state;\n    this._value = value;\n\n    this._executeHandlers();\n  };\n\n  /** JSDoc */\n  private readonly _executeHandlers = () => {\n    if (this._state === States.PENDING) {\n      return;\n    }\n\n    const cachedHandlers = this._handlers.slice();\n    this._handlers = [];\n\n    cachedHandlers.forEach(handler => {\n      if (handler[0]) {\n        return;\n      }\n\n      if (this._state === States.RESOLVED) {\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        handler[1](this._value as unknown as any);\n      }\n\n      if (this._state === States.REJECTED) {\n        handler[2](this._value);\n      }\n\n      handler[0] = true;\n    });\n  };\n}\n\nexport { SyncPromise };\n","import type { SerializedSession, Session, SessionContext, SessionStatus } from '@sentry/types';\nimport { dropUndefinedKeys, timestampInSeconds, uuid4 } from '@sentry/utils';\n\n/**\n * Creates a new `Session` object by setting certain default parameters. If optional @param context\n * is passed, the passed properties are applied to the session object.\n *\n * @param context (optional) additional properties to be applied to the returned session object\n *\n * @returns a new `Session` object\n */\nexport function makeSession(context?: Omit<SessionContext, 'started' | 'status'>): Session {\n  // Both timestamp and started are in seconds since the UNIX epoch.\n  const startingTime = timestampInSeconds();\n\n  const session: Session = {\n    sid: uuid4(),\n    init: true,\n    timestamp: startingTime,\n    started: startingTime,\n    duration: 0,\n    status: 'ok',\n    errors: 0,\n    ignoreDuration: false,\n    toJSON: () => sessionToJSON(session),\n  };\n\n  if (context) {\n    updateSession(session, context);\n  }\n\n  return session;\n}\n\n/**\n * Updates a session object with the properties passed in the context.\n *\n * Note that this function mutates the passed object and returns void.\n * (Had to do this instead of returning a new and updated session because closing and sending a session\n * makes an update to the session after it was passed to the sending logic.\n * @see BaseClient.captureSession )\n *\n * @param session the `Session` to update\n * @param context the `SessionContext` holding the properties that should be updated in @param session\n */\n// eslint-disable-next-line complexity\nexport function updateSession(session: Session, context: SessionContext = {}): void {\n  if (context.user) {\n    if (!session.ipAddress && context.user.ip_address) {\n      session.ipAddress = context.user.ip_address;\n    }\n\n    if (!session.did && !context.did) {\n      session.did = context.user.id || context.user.email || context.user.username;\n    }\n  }\n\n  session.timestamp = context.timestamp || timestampInSeconds();\n\n  if (context.ignoreDuration) {\n    session.ignoreDuration = context.ignoreDuration;\n  }\n  if (context.sid) {\n    // Good enough uuid validation. — Kamil\n    session.sid = context.sid.length === 32 ? context.sid : uuid4();\n  }\n  if (context.init !== undefined) {\n    session.init = context.init;\n  }\n  if (!session.did && context.did) {\n    session.did = `${context.did}`;\n  }\n  if (typeof context.started === 'number') {\n    session.started = context.started;\n  }\n  if (session.ignoreDuration) {\n    session.duration = undefined;\n  } else if (typeof context.duration === 'number') {\n    session.duration = context.duration;\n  } else {\n    const duration = session.timestamp - session.started;\n    session.duration = duration >= 0 ? duration : 0;\n  }\n  if (context.release) {\n    session.release = context.release;\n  }\n  if (context.environment) {\n    session.environment = context.environment;\n  }\n  if (!session.ipAddress && context.ipAddress) {\n    session.ipAddress = context.ipAddress;\n  }\n  if (!session.userAgent && context.userAgent) {\n    session.userAgent = context.userAgent;\n  }\n  if (typeof context.errors === 'number') {\n    session.errors = context.errors;\n  }\n  if (context.status) {\n    session.status = context.status;\n  }\n}\n\n/**\n * Closes a session by setting its status and updating the session object with it.\n * Internally calls `updateSession` to update the passed session object.\n *\n * Note that this function mutates the passed session (@see updateSession for explanation).\n *\n * @param session the `Session` object to be closed\n * @param status the `SessionStatus` with which the session was closed. If you don't pass a status,\n *               this function will keep the previously set status, unless it was `'ok'` in which case\n *               it is changed to `'exited'`.\n */\nexport function closeSession(session: Session, status?: Exclude<SessionStatus, 'ok'>): void {\n  let context = {};\n  if (status) {\n    context = { status };\n  } else if (session.status === 'ok') {\n    context = { status: 'exited' };\n  }\n\n  updateSession(session, context);\n}\n\n/**\n * Serializes a passed session object to a JSON object with a slightly different structure.\n * This is necessary because the Sentry backend requires a slightly different schema of a session\n * than the one the JS SDKs use internally.\n *\n * @param session the session to be converted\n *\n * @returns a JSON object of the passed session\n */\nfunction sessionToJSON(session: Session): SerializedSession {\n  return dropUndefinedKeys({\n    sid: `${session.sid}`,\n    init: session.init,\n    // Make sure that sec is converted to ms for date constructor\n    started: new Date(session.started * 1000).toISOString(),\n    timestamp: new Date(session.timestamp * 1000).toISOString(),\n    status: session.status,\n    errors: session.errors,\n    did: typeof session.did === 'number' || typeof session.did === 'string' ? `${session.did}` : undefined,\n    duration: session.duration,\n    attrs: {\n      release: session.release,\n      environment: session.environment,\n      ip_address: session.ipAddress,\n      user_agent: session.userAgent,\n    },\n  });\n}\n","/* eslint-disable max-lines */\nimport type {\n  Attachment,\n  Breadcrumb,\n  CaptureContext,\n  Context,\n  Contexts,\n  Event,\n  EventHint,\n  EventProcessor,\n  Extra,\n  Extras,\n  Primitive,\n  RequestSession,\n  Scope as ScopeInterface,\n  ScopeContext,\n  Session,\n  Severity,\n  SeverityLevel,\n  Span,\n  Transaction,\n  User,\n} from '@sentry/types';\nimport {\n  arrayify,\n  dateTimestampInSeconds,\n  getGlobalSingleton,\n  isPlainObject,\n  isThenable,\n  logger,\n  SyncPromise,\n} from '@sentry/utils';\n\nimport { updateSession } from './session';\n\n/**\n * Default value for maximum number of breadcrumbs added to an event.\n */\nconst DEFAULT_MAX_BREADCRUMBS = 100;\n\n/**\n * Holds additional event information. {@link Scope.applyToEvent} will be\n * called by the client before an event will be sent.\n */\nexport class Scope implements ScopeInterface {\n  /** Flag if notifying is happening. */\n  protected _notifyingListeners: boolean;\n\n  /** Callback for client to receive scope changes. */\n  protected _scopeListeners: Array<(scope: Scope) => void>;\n\n  /** Callback list that will be called after {@link applyToEvent}. */\n  protected _eventProcessors: EventProcessor[];\n\n  /** Array of breadcrumbs. */\n  protected _breadcrumbs: Breadcrumb[];\n\n  /** User */\n  protected _user: User;\n\n  /** Tags */\n  protected _tags: { [key: string]: Primitive };\n\n  /** Extra */\n  protected _extra: Extras;\n\n  /** Contexts */\n  protected _contexts: Contexts;\n\n  /** Attachments */\n  protected _attachments: Attachment[];\n\n  /**\n   * A place to stash data which is needed at some point in the SDK's event processing pipeline but which shouldn't get\n   * sent to Sentry\n   */\n  protected _sdkProcessingMetadata: { [key: string]: unknown };\n\n  /** Fingerprint */\n  protected _fingerprint?: string[];\n\n  /** Severity */\n  // eslint-disable-next-line deprecation/deprecation\n  protected _level?: Severity | SeverityLevel;\n\n  /** Transaction Name */\n  protected _transactionName?: string;\n\n  /** Span */\n  protected _span?: Span;\n\n  /** Session */\n  protected _session?: Session;\n\n  /** Request Mode Session Status */\n  protected _requestSession?: RequestSession;\n\n  // NOTE: Any field which gets added here should get added not only to the constructor but also to the `clone` method.\n\n  public constructor() {\n    this._notifyingListeners = false;\n    this._scopeListeners = [];\n    this._eventProcessors = [];\n    this._breadcrumbs = [];\n    this._attachments = [];\n    this._user = {};\n    this._tags = {};\n    this._extra = {};\n    this._contexts = {};\n    this._sdkProcessingMetadata = {};\n  }\n\n  /**\n   * Inherit values from the parent scope.\n   * @param scope to clone.\n   */\n  public static clone(scope?: Scope): Scope {\n    const newScope = new Scope();\n    if (scope) {\n      newScope._breadcrumbs = [...scope._breadcrumbs];\n      newScope._tags = { ...scope._tags };\n      newScope._extra = { ...scope._extra };\n      newScope._contexts = { ...scope._contexts };\n      newScope._user = scope._user;\n      newScope._level = scope._level;\n      newScope._span = scope._span;\n      newScope._session = scope._session;\n      newScope._transactionName = scope._transactionName;\n      newScope._fingerprint = scope._fingerprint;\n      newScope._eventProcessors = [...scope._eventProcessors];\n      newScope._requestSession = scope._requestSession;\n      newScope._attachments = [...scope._attachments];\n      newScope._sdkProcessingMetadata = { ...scope._sdkProcessingMetadata };\n    }\n    return newScope;\n  }\n\n  /**\n   * Add internal on change listener. Used for sub SDKs that need to store the scope.\n   * @hidden\n   */\n  public addScopeListener(callback: (scope: Scope) => void): void {\n    this._scopeListeners.push(callback);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public addEventProcessor(callback: EventProcessor): this {\n    this._eventProcessors.push(callback);\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setUser(user: User | null): this {\n    this._user = user || {};\n    if (this._session) {\n      updateSession(this._session, { user });\n    }\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getUser(): User | undefined {\n    return this._user;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getRequestSession(): RequestSession | undefined {\n    return this._requestSession;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setRequestSession(requestSession?: RequestSession): this {\n    this._requestSession = requestSession;\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setTags(tags: { [key: string]: Primitive }): this {\n    this._tags = {\n      ...this._tags,\n      ...tags,\n    };\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setTag(key: string, value: Primitive): this {\n    this._tags = { ...this._tags, [key]: value };\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setExtras(extras: Extras): this {\n    this._extra = {\n      ...this._extra,\n      ...extras,\n    };\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setExtra(key: string, extra: Extra): this {\n    this._extra = { ...this._extra, [key]: extra };\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setFingerprint(fingerprint: string[]): this {\n    this._fingerprint = fingerprint;\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setLevel(\n    // eslint-disable-next-line deprecation/deprecation\n    level: Severity | SeverityLevel,\n  ): this {\n    this._level = level;\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setTransactionName(name?: string): this {\n    this._transactionName = name;\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setContext(key: string, context: Context | null): this {\n    if (context === null) {\n      // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n      delete this._contexts[key];\n    } else {\n      this._contexts[key] = context;\n    }\n\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setSpan(span?: Span): this {\n    this._span = span;\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getSpan(): Span | undefined {\n    return this._span;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getTransaction(): Transaction | undefined {\n    // Often, this span (if it exists at all) will be a transaction, but it's not guaranteed to be. Regardless, it will\n    // have a pointer to the currently-active transaction.\n    const span = this.getSpan();\n    return span && span.transaction;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setSession(session?: Session): this {\n    if (!session) {\n      delete this._session;\n    } else {\n      this._session = session;\n    }\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getSession(): Session | undefined {\n    return this._session;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public update(captureContext?: CaptureContext): this {\n    if (!captureContext) {\n      return this;\n    }\n\n    if (typeof captureContext === 'function') {\n      const updatedScope = (captureContext as <T>(scope: T) => T)(this);\n      return updatedScope instanceof Scope ? updatedScope : this;\n    }\n\n    if (captureContext instanceof Scope) {\n      this._tags = { ...this._tags, ...captureContext._tags };\n      this._extra = { ...this._extra, ...captureContext._extra };\n      this._contexts = { ...this._contexts, ...captureContext._contexts };\n      if (captureContext._user && Object.keys(captureContext._user).length) {\n        this._user = captureContext._user;\n      }\n      if (captureContext._level) {\n        this._level = captureContext._level;\n      }\n      if (captureContext._fingerprint) {\n        this._fingerprint = captureContext._fingerprint;\n      }\n      if (captureContext._requestSession) {\n        this._requestSession = captureContext._requestSession;\n      }\n    } else if (isPlainObject(captureContext)) {\n      // eslint-disable-next-line no-param-reassign\n      captureContext = captureContext as ScopeContext;\n      this._tags = { ...this._tags, ...captureContext.tags };\n      this._extra = { ...this._extra, ...captureContext.extra };\n      this._contexts = { ...this._contexts, ...captureContext.contexts };\n      if (captureContext.user) {\n        this._user = captureContext.user;\n      }\n      if (captureContext.level) {\n        this._level = captureContext.level;\n      }\n      if (captureContext.fingerprint) {\n        this._fingerprint = captureContext.fingerprint;\n      }\n      if (captureContext.requestSession) {\n        this._requestSession = captureContext.requestSession;\n      }\n    }\n\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public clear(): this {\n    this._breadcrumbs = [];\n    this._tags = {};\n    this._extra = {};\n    this._user = {};\n    this._contexts = {};\n    this._level = undefined;\n    this._transactionName = undefined;\n    this._fingerprint = undefined;\n    this._requestSession = undefined;\n    this._span = undefined;\n    this._session = undefined;\n    this._notifyScopeListeners();\n    this._attachments = [];\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public addBreadcrumb(breadcrumb: Breadcrumb, maxBreadcrumbs?: number): this {\n    const maxCrumbs = typeof maxBreadcrumbs === 'number' ? maxBreadcrumbs : DEFAULT_MAX_BREADCRUMBS;\n\n    // No data has been changed, so don't notify scope listeners\n    if (maxCrumbs <= 0) {\n      return this;\n    }\n\n    const mergedBreadcrumb = {\n      timestamp: dateTimestampInSeconds(),\n      ...breadcrumb,\n    };\n    this._breadcrumbs = [...this._breadcrumbs, mergedBreadcrumb].slice(-maxCrumbs);\n    this._notifyScopeListeners();\n\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getLastBreadcrumb(): Breadcrumb | undefined {\n    return this._breadcrumbs[this._breadcrumbs.length - 1];\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public clearBreadcrumbs(): this {\n    this._breadcrumbs = [];\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public addAttachment(attachment: Attachment): this {\n    this._attachments.push(attachment);\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getAttachments(): Attachment[] {\n    return this._attachments;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public clearAttachments(): this {\n    this._attachments = [];\n    return this;\n  }\n\n  /**\n   * Applies data from the scope to the event and runs all event processors on it.\n   *\n   * @param event Event\n   * @param hint Object containing additional information about the original exception, for use by the event processors.\n   * @hidden\n   */\n  public applyToEvent(event: Event, hint: EventHint = {}): PromiseLike<Event | null> {\n    if (this._extra && Object.keys(this._extra).length) {\n      event.extra = { ...this._extra, ...event.extra };\n    }\n    if (this._tags && Object.keys(this._tags).length) {\n      event.tags = { ...this._tags, ...event.tags };\n    }\n    if (this._user && Object.keys(this._user).length) {\n      event.user = { ...this._user, ...event.user };\n    }\n    if (this._contexts && Object.keys(this._contexts).length) {\n      event.contexts = { ...this._contexts, ...event.contexts };\n    }\n    if (this._level) {\n      event.level = this._level;\n    }\n    if (this._transactionName) {\n      event.transaction = this._transactionName;\n    }\n\n    // We want to set the trace context for normal events only if there isn't already\n    // a trace context on the event. There is a product feature in place where we link\n    // errors with transaction and it relies on that.\n    if (this._span) {\n      event.contexts = { trace: this._span.getTraceContext(), ...event.contexts };\n      const transaction = this._span.transaction;\n      if (transaction) {\n        event.sdkProcessingMetadata = {\n          dynamicSamplingContext: transaction.getDynamicSamplingContext(),\n          ...event.sdkProcessingMetadata,\n        };\n        const transactionName = transaction.name;\n        if (transactionName) {\n          event.tags = { transaction: transactionName, ...event.tags };\n        }\n      }\n    }\n\n    this._applyFingerprint(event);\n\n    event.breadcrumbs = [...(event.breadcrumbs || []), ...this._breadcrumbs];\n    event.breadcrumbs = event.breadcrumbs.length > 0 ? event.breadcrumbs : undefined;\n\n    event.sdkProcessingMetadata = { ...event.sdkProcessingMetadata, ...this._sdkProcessingMetadata };\n\n    return this._notifyEventProcessors([...getGlobalEventProcessors(), ...this._eventProcessors], event, hint);\n  }\n\n  /**\n   * Add data which will be accessible during event processing but won't get sent to Sentry\n   */\n  public setSDKProcessingMetadata(newData: { [key: string]: unknown }): this {\n    this._sdkProcessingMetadata = { ...this._sdkProcessingMetadata, ...newData };\n\n    return this;\n  }\n\n  /**\n   * This will be called after {@link applyToEvent} is finished.\n   */\n  protected _notifyEventProcessors(\n    processors: EventProcessor[],\n    event: Event | null,\n    hint: EventHint,\n    index: number = 0,\n  ): PromiseLike<Event | null> {\n    return new SyncPromise<Event | null>((resolve, reject) => {\n      const processor = processors[index];\n      if (event === null || typeof processor !== 'function') {\n        resolve(event);\n      } else {\n        const result = processor({ ...event }, hint) as Event | null;\n\n        __DEBUG_BUILD__ &&\n          processor.id &&\n          result === null &&\n          logger.log(`Event processor \"${processor.id}\" dropped event`);\n\n        if (isThenable(result)) {\n          void result\n            .then(final => this._notifyEventProcessors(processors, final, hint, index + 1).then(resolve))\n            .then(null, reject);\n        } else {\n          void this._notifyEventProcessors(processors, result, hint, index + 1)\n            .then(resolve)\n            .then(null, reject);\n        }\n      }\n    });\n  }\n\n  /**\n   * This will be called on every set call.\n   */\n  protected _notifyScopeListeners(): void {\n    // We need this check for this._notifyingListeners to be able to work on scope during updates\n    // If this check is not here we'll produce endless recursion when something is done with the scope\n    // during the callback.\n    if (!this._notifyingListeners) {\n      this._notifyingListeners = true;\n      this._scopeListeners.forEach(callback => {\n        callback(this);\n      });\n      this._notifyingListeners = false;\n    }\n  }\n\n  /**\n   * Applies fingerprint from the scope to the event if there's one,\n   * uses message if there's one instead or get rid of empty fingerprint\n   */\n  private _applyFingerprint(event: Event): void {\n    // Make sure it's an array first and we actually have something in place\n    event.fingerprint = event.fingerprint ? arrayify(event.fingerprint) : [];\n\n    // If we have something on the scope, then merge it with event\n    if (this._fingerprint) {\n      event.fingerprint = event.fingerprint.concat(this._fingerprint);\n    }\n\n    // If we have no data at all, remove empty array default\n    if (event.fingerprint && !event.fingerprint.length) {\n      delete event.fingerprint;\n    }\n  }\n}\n\n/**\n * Returns the global event processors.\n */\nfunction getGlobalEventProcessors(): EventProcessor[] {\n  return getGlobalSingleton<EventProcessor[]>('globalEventProcessors', () => []);\n}\n\n/**\n * Add a EventProcessor to be kept globally.\n * @param callback EventProcessor to add\n */\nexport function addGlobalEventProcessor(callback: EventProcessor): void {\n  getGlobalEventProcessors().push(callback);\n}\n","/* eslint-disable max-lines */\nimport type {\n  Breadcrumb,\n  BreadcrumbHint,\n  Client,\n  CustomSamplingContext,\n  Event,\n  EventHint,\n  Extra,\n  Extras,\n  Hub as HubInterface,\n  Integration,\n  IntegrationClass,\n  Primitive,\n  Session,\n  SessionContext,\n  Severity,\n  SeverityLevel,\n  Transaction,\n  TransactionContext,\n  User,\n} from '@sentry/types';\nimport { consoleSandbox, dateTimestampInSeconds, getGlobalSingleton, GLOBAL_OBJ, logger, uuid4 } from '@sentry/utils';\n\nimport { DEFAULT_ENVIRONMENT } from './constants';\nimport { Scope } from './scope';\nimport { closeSession, makeSession, updateSession } from './session';\n\n/**\n * API compatibility version of this hub.\n *\n * WARNING: This number should only be increased when the global interface\n * changes and new methods are introduced.\n *\n * @hidden\n */\nexport const API_VERSION = 4;\n\n/**\n * Default maximum number of breadcrumbs added to an event. Can be overwritten\n * with {@link Options.maxBreadcrumbs}.\n */\nconst DEFAULT_BREADCRUMBS = 100;\n\nexport interface RunWithAsyncContextOptions {\n  /** Whether to reuse an existing async context if one exists. Defaults to false. */\n  reuseExisting?: boolean;\n}\n\n/**\n * @private Private API with no semver guarantees!\n *\n * Strategy used to track async context.\n */\nexport interface AsyncContextStrategy {\n  /**\n   * Gets the current async context. Returns undefined if there is no current async context.\n   */\n  getCurrentHub: () => Hub | undefined;\n  /**\n   * Runs the supplied callback in its own async context.\n   */\n  runWithAsyncContext<T>(callback: () => T, options: RunWithAsyncContextOptions): T;\n}\n\n/**\n * A layer in the process stack.\n * @hidden\n */\nexport interface Layer {\n  client?: Client;\n  scope: Scope;\n}\n\n/**\n * An object that contains a hub and maintains a scope stack.\n * @hidden\n */\nexport interface Carrier {\n  __SENTRY__?: {\n    hub?: Hub;\n    acs?: AsyncContextStrategy;\n    /**\n     * Extra Hub properties injected by various SDKs\n     */\n    integrations?: Integration[];\n    extensions?: {\n      /** Extension methods for the hub, which are bound to the current Hub instance */\n      // eslint-disable-next-line @typescript-eslint/ban-types\n      [key: string]: Function;\n    };\n  };\n}\n\n/**\n * @inheritDoc\n */\nexport class Hub implements HubInterface {\n  /** Is a {@link Layer}[] containing the client and scope */\n  private readonly _stack: Layer[];\n\n  /** Contains the last event id of a captured event.  */\n  private _lastEventId?: string;\n\n  /**\n   * Creates a new instance of the hub, will push one {@link Layer} into the\n   * internal stack on creation.\n   *\n   * @param client bound to the hub.\n   * @param scope bound to the hub.\n   * @param version number, higher number means higher priority.\n   */\n  public constructor(client?: Client, scope: Scope = new Scope(), private readonly _version: number = API_VERSION) {\n    this._stack = [{ scope }];\n    if (client) {\n      this.bindClient(client);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public isOlderThan(version: number): boolean {\n    return this._version < version;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public bindClient(client?: Client): void {\n    const top = this.getStackTop();\n    top.client = client;\n    if (client && client.setupIntegrations) {\n      client.setupIntegrations();\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public pushScope(): Scope {\n    // We want to clone the content of prev scope\n    const scope = Scope.clone(this.getScope());\n    this.getStack().push({\n      client: this.getClient(),\n      scope,\n    });\n    return scope;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public popScope(): boolean {\n    if (this.getStack().length <= 1) return false;\n    return !!this.getStack().pop();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public withScope(callback: (scope: Scope) => void): void {\n    const scope = this.pushScope();\n    try {\n      callback(scope);\n    } finally {\n      this.popScope();\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getClient<C extends Client>(): C | undefined {\n    return this.getStackTop().client as C;\n  }\n\n  /** Returns the scope of the top stack. */\n  public getScope(): Scope {\n    return this.getStackTop().scope;\n  }\n\n  /** Returns the scope stack for domains or the process. */\n  public getStack(): Layer[] {\n    return this._stack;\n  }\n\n  /** Returns the topmost scope layer in the order domain > local > process. */\n  public getStackTop(): Layer {\n    return this._stack[this._stack.length - 1];\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public captureException(exception: unknown, hint?: EventHint): string {\n    const eventId = (this._lastEventId = hint && hint.event_id ? hint.event_id : uuid4());\n    const syntheticException = new Error('Sentry syntheticException');\n    this._withClient((client, scope) => {\n      client.captureException(\n        exception,\n        {\n          originalException: exception,\n          syntheticException,\n          ...hint,\n          event_id: eventId,\n        },\n        scope,\n      );\n    });\n    return eventId;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public captureMessage(\n    message: string,\n    // eslint-disable-next-line deprecation/deprecation\n    level?: Severity | SeverityLevel,\n    hint?: EventHint,\n  ): string {\n    const eventId = (this._lastEventId = hint && hint.event_id ? hint.event_id : uuid4());\n    const syntheticException = new Error(message);\n    this._withClient((client, scope) => {\n      client.captureMessage(\n        message,\n        level,\n        {\n          originalException: message,\n          syntheticException,\n          ...hint,\n          event_id: eventId,\n        },\n        scope,\n      );\n    });\n    return eventId;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public captureEvent(event: Event, hint?: EventHint): string {\n    const eventId = hint && hint.event_id ? hint.event_id : uuid4();\n    if (!event.type) {\n      this._lastEventId = eventId;\n    }\n\n    this._withClient((client, scope) => {\n      client.captureEvent(event, { ...hint, event_id: eventId }, scope);\n    });\n    return eventId;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public lastEventId(): string | undefined {\n    return this._lastEventId;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public addBreadcrumb(breadcrumb: Breadcrumb, hint?: BreadcrumbHint): void {\n    const { scope, client } = this.getStackTop();\n\n    if (!client) return;\n\n    const { beforeBreadcrumb = null, maxBreadcrumbs = DEFAULT_BREADCRUMBS } =\n      (client.getOptions && client.getOptions()) || {};\n\n    if (maxBreadcrumbs <= 0) return;\n\n    const timestamp = dateTimestampInSeconds();\n    const mergedBreadcrumb = { timestamp, ...breadcrumb };\n    const finalBreadcrumb = beforeBreadcrumb\n      ? (consoleSandbox(() => beforeBreadcrumb(mergedBreadcrumb, hint)) as Breadcrumb | null)\n      : mergedBreadcrumb;\n\n    if (finalBreadcrumb === null) return;\n\n    if (client.emit) {\n      client.emit('beforeAddBreadcrumb', finalBreadcrumb, hint);\n    }\n\n    scope.addBreadcrumb(finalBreadcrumb, maxBreadcrumbs);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setUser(user: User | null): void {\n    this.getScope().setUser(user);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setTags(tags: { [key: string]: Primitive }): void {\n    this.getScope().setTags(tags);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setExtras(extras: Extras): void {\n    this.getScope().setExtras(extras);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setTag(key: string, value: Primitive): void {\n    this.getScope().setTag(key, value);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setExtra(key: string, extra: Extra): void {\n    this.getScope().setExtra(key, extra);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  public setContext(name: string, context: { [key: string]: any } | null): void {\n    this.getScope().setContext(name, context);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public configureScope(callback: (scope: Scope) => void): void {\n    const { scope, client } = this.getStackTop();\n    if (client) {\n      callback(scope);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public run(callback: (hub: Hub) => void): void {\n    const oldHub = makeMain(this);\n    try {\n      callback(this);\n    } finally {\n      makeMain(oldHub);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getIntegration<T extends Integration>(integration: IntegrationClass<T>): T | null {\n    const client = this.getClient();\n    if (!client) return null;\n    try {\n      return client.getIntegration(integration);\n    } catch (_oO) {\n      __DEBUG_BUILD__ && logger.warn(`Cannot retrieve integration ${integration.id} from the current Hub`);\n      return null;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public startTransaction(context: TransactionContext, customSamplingContext?: CustomSamplingContext): Transaction {\n    const result = this._callExtensionMethod<Transaction>('startTransaction', context, customSamplingContext);\n\n    if (__DEBUG_BUILD__ && !result) {\n      // eslint-disable-next-line no-console\n      console.warn(`Tracing extension 'startTransaction' has not been added. Call 'addTracingExtensions' before calling 'init':\nSentry.addTracingExtensions();\nSentry.init({...});\n`);\n    }\n\n    return result;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public traceHeaders(): { [key: string]: string } {\n    return this._callExtensionMethod<{ [key: string]: string }>('traceHeaders');\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public captureSession(endSession: boolean = false): void {\n    // both send the update and pull the session from the scope\n    if (endSession) {\n      return this.endSession();\n    }\n\n    // only send the update\n    this._sendSessionUpdate();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public endSession(): void {\n    const layer = this.getStackTop();\n    const scope = layer.scope;\n    const session = scope.getSession();\n    if (session) {\n      closeSession(session);\n    }\n    this._sendSessionUpdate();\n\n    // the session is over; take it off of the scope\n    scope.setSession();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public startSession(context?: SessionContext): Session {\n    const { scope, client } = this.getStackTop();\n    const { release, environment = DEFAULT_ENVIRONMENT } = (client && client.getOptions()) || {};\n\n    // Will fetch userAgent if called from browser sdk\n    const { userAgent } = GLOBAL_OBJ.navigator || {};\n\n    const session = makeSession({\n      release,\n      environment,\n      user: scope.getUser(),\n      ...(userAgent && { userAgent }),\n      ...context,\n    });\n\n    // End existing session if there's one\n    const currentSession = scope.getSession && scope.getSession();\n    if (currentSession && currentSession.status === 'ok') {\n      updateSession(currentSession, { status: 'exited' });\n    }\n    this.endSession();\n\n    // Afterwards we set the new session on the scope\n    scope.setSession(session);\n\n    return session;\n  }\n\n  /**\n   * Returns if default PII should be sent to Sentry and propagated in ourgoing requests\n   * when Tracing is used.\n   */\n  public shouldSendDefaultPii(): boolean {\n    const client = this.getClient();\n    const options = client && client.getOptions();\n    return Boolean(options && options.sendDefaultPii);\n  }\n\n  /**\n   * Sends the current Session on the scope\n   */\n  private _sendSessionUpdate(): void {\n    const { scope, client } = this.getStackTop();\n\n    const session = scope.getSession();\n    if (session && client && client.captureSession) {\n      client.captureSession(session);\n    }\n  }\n\n  /**\n   * Internal helper function to call a method on the top client if it exists.\n   *\n   * @param method The method to call on the client.\n   * @param args Arguments to pass to the client function.\n   */\n  private _withClient(callback: (client: Client, scope: Scope) => void): void {\n    const { scope, client } = this.getStackTop();\n    if (client) {\n      callback(client, scope);\n    }\n  }\n\n  /**\n   * Calls global extension method and binding current instance to the function call\n   */\n  // @ts-ignore Function lacks ending return statement and return type does not include 'undefined'. ts(2366)\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private _callExtensionMethod<T>(method: string, ...args: any[]): T {\n    const carrier = getMainCarrier();\n    const sentry = carrier.__SENTRY__;\n    if (sentry && sentry.extensions && typeof sentry.extensions[method] === 'function') {\n      return sentry.extensions[method].apply(this, args);\n    }\n    __DEBUG_BUILD__ && logger.warn(`Extension method ${method} couldn't be found, doing nothing.`);\n  }\n}\n\n/**\n * Returns the global shim registry.\n *\n * FIXME: This function is problematic, because despite always returning a valid Carrier,\n * it has an optional `__SENTRY__` property, which then in turn requires us to always perform an unnecessary check\n * at the call-site. We always access the carrier through this function, so we can guarantee that `__SENTRY__` is there.\n **/\nexport function getMainCarrier(): Carrier {\n  GLOBAL_OBJ.__SENTRY__ = GLOBAL_OBJ.__SENTRY__ || {\n    extensions: {},\n    hub: undefined,\n  };\n  return GLOBAL_OBJ;\n}\n\n/**\n * Replaces the current main hub with the passed one on the global object\n *\n * @returns The old replaced hub\n */\nexport function makeMain(hub: Hub): Hub {\n  const registry = getMainCarrier();\n  const oldHub = getHubFromCarrier(registry);\n  setHubOnCarrier(registry, hub);\n  return oldHub;\n}\n\n/**\n * Returns the default hub instance.\n *\n * If a hub is already registered in the global carrier but this module\n * contains a more recent version, it replaces the registered version.\n * Otherwise, the currently registered hub will be returned.\n */\nexport function getCurrentHub(): Hub {\n  // Get main carrier (global for every environment)\n  const registry = getMainCarrier();\n\n  if (registry.__SENTRY__ && registry.__SENTRY__.acs) {\n    const hub = registry.__SENTRY__.acs.getCurrentHub();\n\n    if (hub) {\n      return hub;\n    }\n  }\n\n  // Return hub that lives on a global object\n  return getGlobalHub(registry);\n}\n\nfunction getGlobalHub(registry: Carrier = getMainCarrier()): Hub {\n  // If there's no hub, or its an old API, assign a new one\n  if (!hasHubOnCarrier(registry) || getHubFromCarrier(registry).isOlderThan(API_VERSION)) {\n    setHubOnCarrier(registry, new Hub());\n  }\n\n  // Return hub that lives on a global object\n  return getHubFromCarrier(registry);\n}\n\n/**\n * @private Private API with no semver guarantees!\n *\n * If the carrier does not contain a hub, a new hub is created with the global hub client and scope.\n */\nexport function ensureHubOnCarrier(carrier: Carrier, parent: Hub = getGlobalHub()): void {\n  // If there's no hub on current domain, or it's an old API, assign a new one\n  if (!hasHubOnCarrier(carrier) || getHubFromCarrier(carrier).isOlderThan(API_VERSION)) {\n    const globalHubTopStack = parent.getStackTop();\n    setHubOnCarrier(carrier, new Hub(globalHubTopStack.client, Scope.clone(globalHubTopStack.scope)));\n  }\n}\n\n/**\n * @private Private API with no semver guarantees!\n *\n * Sets the global async context strategy\n */\nexport function setAsyncContextStrategy(strategy: AsyncContextStrategy | undefined): void {\n  // Get main carrier (global for every environment)\n  const registry = getMainCarrier();\n  registry.__SENTRY__ = registry.__SENTRY__ || {};\n  registry.__SENTRY__.acs = strategy;\n}\n\n/**\n * Runs the supplied callback in its own async context. Async Context strategies are defined per SDK.\n *\n * @param callback The callback to run in its own async context\n * @param options Options to pass to the async context strategy\n * @returns The result of the callback\n */\nexport function runWithAsyncContext<T>(callback: () => T, options: RunWithAsyncContextOptions = {}): T {\n  const registry = getMainCarrier();\n\n  if (registry.__SENTRY__ && registry.__SENTRY__.acs) {\n    return registry.__SENTRY__.acs.runWithAsyncContext(callback, options);\n  }\n\n  // if there was no strategy, fallback to just calling the callback\n  return callback();\n}\n\n/**\n * This will tell whether a carrier has a hub on it or not\n * @param carrier object\n */\nfunction hasHubOnCarrier(carrier: Carrier): boolean {\n  return !!(carrier && carrier.__SENTRY__ && carrier.__SENTRY__.hub);\n}\n\n/**\n * This will create a new {@link Hub} and add to the passed object on\n * __SENTRY__.hub.\n * @param carrier object\n * @hidden\n */\nexport function getHubFromCarrier(carrier: Carrier): Hub {\n  return getGlobalSingleton<Hub>('hub', () => new Hub(), carrier);\n}\n\n/**\n * This will set passed {@link Hub} on the passed object's __SENTRY__.hub attribute\n * @param carrier object\n * @param hub Hub\n * @returns A boolean indicating success or failure\n */\nexport function setHubOnCarrier(carrier: Carrier, hub: Hub): boolean {\n  if (!carrier) return false;\n  const __SENTRY__ = (carrier.__SENTRY__ = carrier.__SENTRY__ || {});\n  __SENTRY__.hub = hub;\n  return true;\n}\n","import { captureException, withScope } from '@sentry/core';\nimport type { DsnLike, Event as SentryEvent, Mechanism, Scope, WrappedFunction } from '@sentry/types';\nimport {\n  addExceptionMechanism,\n  addExceptionTypeValue,\n  addNonEnumerableProperty,\n  getOriginalFunction,\n  GLOBAL_OBJ,\n  markFunctionWrapped,\n} from '@sentry/utils';\n\nexport const WINDOW = GLOBAL_OBJ as typeof GLOBAL_OBJ & Window;\n\nlet ignoreOnError: number = 0;\n\n/**\n * @hidden\n */\nexport function shouldIgnoreOnError(): boolean {\n  return ignoreOnError > 0;\n}\n\n/**\n * @hidden\n */\nexport function ignoreNextOnError(): void {\n  // onerror should trigger before setTimeout\n  ignoreOnError++;\n  setTimeout(() => {\n    ignoreOnError--;\n  });\n}\n\n/**\n * Instruments the given function and sends an event to Sentry every time the\n * function throws an exception.\n *\n * @param fn A function to wrap. It is generally safe to pass an unbound function, because the returned wrapper always\n * has a correct `this` context.\n * @returns The wrapped function.\n * @hidden\n */\nexport function wrap(\n  fn: WrappedFunction,\n  options: {\n    mechanism?: Mechanism;\n  } = {},\n  before?: WrappedFunction,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n): any {\n  // for future readers what this does is wrap a function and then create\n  // a bi-directional wrapping between them.\n  //\n  // example: wrapped = wrap(original);\n  //  original.__sentry_wrapped__ -> wrapped\n  //  wrapped.__sentry_original__ -> original\n\n  if (typeof fn !== 'function') {\n    return fn;\n  }\n\n  try {\n    // if we're dealing with a function that was previously wrapped, return\n    // the original wrapper.\n    const wrapper = fn.__sentry_wrapped__;\n    if (wrapper) {\n      return wrapper;\n    }\n\n    // We don't wanna wrap it twice\n    if (getOriginalFunction(fn)) {\n      return fn;\n    }\n  } catch (e) {\n    // Just accessing custom props in some Selenium environments\n    // can cause a \"Permission denied\" exception (see raven-js#495).\n    // Bail on wrapping and return the function as-is (defers to window.onerror).\n    return fn;\n  }\n\n  /* eslint-disable prefer-rest-params */\n  // It is important that `sentryWrapped` is not an arrow function to preserve the context of `this`\n  const sentryWrapped: WrappedFunction = function (this: unknown): void {\n    const args = Array.prototype.slice.call(arguments);\n\n    try {\n      if (before && typeof before === 'function') {\n        before.apply(this, arguments);\n      }\n\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-member-access\n      const wrappedArguments = args.map((arg: any) => wrap(arg, options));\n\n      // Attempt to invoke user-land function\n      // NOTE: If you are a Sentry user, and you are seeing this stack frame, it\n      //       means the sentry.javascript SDK caught an error invoking your application code. This\n      //       is expected behavior and NOT indicative of a bug with sentry.javascript.\n      return fn.apply(this, wrappedArguments);\n    } catch (ex) {\n      ignoreNextOnError();\n\n      withScope((scope: Scope) => {\n        scope.addEventProcessor((event: SentryEvent) => {\n          if (options.mechanism) {\n            addExceptionTypeValue(event, undefined, undefined);\n            addExceptionMechanism(event, options.mechanism);\n          }\n\n          event.extra = {\n            ...event.extra,\n            arguments: args,\n          };\n\n          return event;\n        });\n\n        captureException(ex);\n      });\n\n      throw ex;\n    }\n  };\n  /* eslint-enable prefer-rest-params */\n\n  // Accessing some objects may throw\n  // ref: https://github.com/getsentry/sentry-javascript/issues/1168\n  try {\n    for (const property in fn) {\n      if (Object.prototype.hasOwnProperty.call(fn, property)) {\n        sentryWrapped[property] = fn[property];\n      }\n    }\n  } catch (_oO) {} // eslint-disable-line no-empty\n\n  // Signal that this function has been wrapped/filled already\n  // for both debugging and to prevent it to being wrapped/filled twice\n  markFunctionWrapped(sentryWrapped, fn);\n\n  addNonEnumerableProperty(fn, '__sentry_wrapped__', sentryWrapped);\n\n  // Restore original function name (not all browsers allow that)\n  try {\n    const descriptor = Object.getOwnPropertyDescriptor(sentryWrapped, 'name') as PropertyDescriptor;\n    if (descriptor.configurable) {\n      Object.defineProperty(sentryWrapped, 'name', {\n        get(): string {\n          return fn.name;\n        },\n      });\n    }\n    // eslint-disable-next-line no-empty\n  } catch (_oO) {}\n\n  return sentryWrapped;\n}\n\n/**\n * All properties the report dialog supports\n */\nexport interface ReportDialogOptions {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  [key: string]: any;\n  eventId?: string;\n  dsn?: DsnLike;\n  user?: {\n    email?: string;\n    name?: string;\n  };\n  lang?: string;\n  title?: string;\n  subtitle?: string;\n  subtitle2?: string;\n  labelName?: string;\n  labelEmail?: string;\n  labelComments?: string;\n  labelClose?: string;\n  labelSubmit?: string;\n  errorGeneric?: string;\n  errorFormEntry?: string;\n  successMessage?: string;\n  /** Callback after reportDialog showed up */\n  onLoad?(this: void): void;\n}\n","import type {\n  Breadcrumb,\n  CaptureContext,\n  CheckIn,\n  CustomSamplingContext,\n  Event,\n  EventHint,\n  Extra,\n  Extras,\n  MonitorConfig,\n  Primitive,\n  Severity,\n  SeverityLevel,\n  TransactionContext,\n  User,\n} from '@sentry/types';\nimport { logger, uuid4 } from '@sentry/utils';\n\nimport type { Hub } from './hub';\nimport { getCurrentHub } from './hub';\nimport type { Scope } from './scope';\n\n// Note: All functions in this file are typed with a return value of `ReturnType<Hub[HUB_FUNCTION]>`,\n// where HUB_FUNCTION is some method on the Hub class.\n//\n// This is done to make sure the top level SDK methods stay in sync with the hub methods.\n// Although every method here has an explicit return type, some of them (that map to void returns) do not\n// contain `return` keywords. This is done to save on bundle size, as `return` is not minifiable.\n\n/**\n * Captures an exception event and sends it to Sentry.\n *\n * @param exception An exception-like object.\n * @param captureContext Additional scope data to apply to exception event.\n * @returns The generated eventId.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types\nexport function captureException(exception: any, captureContext?: CaptureContext): ReturnType<Hub['captureException']> {\n  return getCurrentHub().captureException(exception, { captureContext });\n}\n\n/**\n * Captures a message event and sends it to Sentry.\n *\n * @param message The message to send to Sentry.\n * @param Severity Define the level of the message.\n * @returns The generated eventId.\n */\nexport function captureMessage(\n  message: string,\n  // eslint-disable-next-line deprecation/deprecation\n  captureContext?: CaptureContext | Severity | SeverityLevel,\n): ReturnType<Hub['captureMessage']> {\n  // This is necessary to provide explicit scopes upgrade, without changing the original\n  // arity of the `captureMessage(message, level)` method.\n  const level = typeof captureContext === 'string' ? captureContext : undefined;\n  const context = typeof captureContext !== 'string' ? { captureContext } : undefined;\n  return getCurrentHub().captureMessage(message, level, context);\n}\n\n/**\n * Captures a manually created event and sends it to Sentry.\n *\n * @param event The event to send to Sentry.\n * @returns The generated eventId.\n */\nexport function captureEvent(event: Event, hint?: EventHint): ReturnType<Hub['captureEvent']> {\n  return getCurrentHub().captureEvent(event, hint);\n}\n\n/**\n * Callback to set context information onto the scope.\n * @param callback Callback function that receives Scope.\n */\nexport function configureScope(callback: (scope: Scope) => void): ReturnType<Hub['configureScope']> {\n  getCurrentHub().configureScope(callback);\n}\n\n/**\n * Records a new breadcrumb which will be attached to future events.\n *\n * Breadcrumbs will be added to subsequent events to provide more context on\n * user's actions prior to an error or crash.\n *\n * @param breadcrumb The breadcrumb to record.\n */\nexport function addBreadcrumb(breadcrumb: Breadcrumb): ReturnType<Hub['addBreadcrumb']> {\n  getCurrentHub().addBreadcrumb(breadcrumb);\n}\n\n/**\n * Sets context data with the given name.\n * @param name of the context\n * @param context Any kind of data. This data will be normalized.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function setContext(name: string, context: { [key: string]: any } | null): ReturnType<Hub['setContext']> {\n  getCurrentHub().setContext(name, context);\n}\n\n/**\n * Set an object that will be merged sent as extra data with the event.\n * @param extras Extras object to merge into current context.\n */\nexport function setExtras(extras: Extras): ReturnType<Hub['setExtras']> {\n  getCurrentHub().setExtras(extras);\n}\n\n/**\n * Set key:value that will be sent as extra data with the event.\n * @param key String of extra\n * @param extra Any kind of data. This data will be normalized.\n */\nexport function setExtra(key: string, extra: Extra): ReturnType<Hub['setExtra']> {\n  getCurrentHub().setExtra(key, extra);\n}\n\n/**\n * Set an object that will be merged sent as tags data with the event.\n * @param tags Tags context object to merge into current context.\n */\nexport function setTags(tags: { [key: string]: Primitive }): ReturnType<Hub['setTags']> {\n  getCurrentHub().setTags(tags);\n}\n\n/**\n * Set key:value that will be sent as tags data with the event.\n *\n * Can also be used to unset a tag, by passing `undefined`.\n *\n * @param key String key of tag\n * @param value Value of tag\n */\nexport function setTag(key: string, value: Primitive): ReturnType<Hub['setTag']> {\n  getCurrentHub().setTag(key, value);\n}\n\n/**\n * Updates user context information for future events.\n *\n * @param user User context object to be set in the current context. Pass `null` to unset the user.\n */\nexport function setUser(user: User | null): ReturnType<Hub['setUser']> {\n  getCurrentHub().setUser(user);\n}\n\n/**\n * Creates a new scope with and executes the given operation within.\n * The scope is automatically removed once the operation\n * finishes or throws.\n *\n * This is essentially a convenience function for:\n *\n *     pushScope();\n *     callback();\n *     popScope();\n *\n * @param callback that will be enclosed into push/popScope.\n */\nexport function withScope(callback: (scope: Scope) => void): ReturnType<Hub['withScope']> {\n  getCurrentHub().withScope(callback);\n}\n\n/**\n * Starts a new `Transaction` and returns it. This is the entry point to manual tracing instrumentation.\n *\n * A tree structure can be built by adding child spans to the transaction, and child spans to other spans. To start a\n * new child span within the transaction or any span, call the respective `.startChild()` method.\n *\n * Every child span must be finished before the transaction is finished, otherwise the unfinished spans are discarded.\n *\n * The transaction must be finished with a call to its `.finish()` method, at which point the transaction with all its\n * finished child spans will be sent to Sentry.\n *\n * NOTE: This function should only be used for *manual* instrumentation. Auto-instrumentation should call\n * `startTransaction` directly on the hub.\n *\n * @param context Properties of the new `Transaction`.\n * @param customSamplingContext Information given to the transaction sampling function (along with context-dependent\n * default values). See {@link Options.tracesSampler}.\n *\n * @returns The transaction which was just started\n */\nexport function startTransaction(\n  context: TransactionContext,\n  customSamplingContext?: CustomSamplingContext,\n): ReturnType<Hub['startTransaction']> {\n  return getCurrentHub().startTransaction({ ...context }, customSamplingContext);\n}\n\n/**\n * Create a cron monitor check in and send it to Sentry.\n *\n * @param checkIn An object that describes a check in.\n * @param upsertMonitorConfig An optional object that describes a monitor config. Use this if you want\n * to create a monitor automatically when sending a check in.\n */\nexport function captureCheckIn(checkIn: CheckIn, upsertMonitorConfig?: MonitorConfig): string {\n  const client = getCurrentHub().getClient();\n  if (!client) {\n    __DEBUG_BUILD__ && logger.warn('Cannot capture check-in. No client defined.');\n  } else if (!client.captureCheckIn) {\n    __DEBUG_BUILD__ && logger.warn('Cannot capture check-in. Client does not support sending check-ins.');\n  } else {\n    return client.captureCheckIn(checkIn, upsertMonitorConfig);\n  }\n\n  return uuid4();\n}\n","import type { Integration, WrappedFunction } from '@sentry/types';\nimport { fill, getFunctionName, getOriginalFunction } from '@sentry/utils';\n\nimport { WINDOW, wrap } from '../helpers';\n\nconst DEFAULT_EVENT_TARGET = [\n  'EventTarget',\n  'Window',\n  'Node',\n  'ApplicationCache',\n  'AudioTrackList',\n  'ChannelMergerNode',\n  'CryptoOperation',\n  'EventSource',\n  'FileReader',\n  'HTMLUnknownElement',\n  'IDBDatabase',\n  'IDBRequest',\n  'IDBTransaction',\n  'KeyOperation',\n  'MediaController',\n  'MessagePort',\n  'ModalWindow',\n  'Notification',\n  'SVGElementInstance',\n  'Screen',\n  'TextTrack',\n  'TextTrackCue',\n  'TextTrackList',\n  'WebSocket',\n  'WebSocketWorker',\n  'Worker',\n  'XMLHttpRequest',\n  'XMLHttpRequestEventTarget',\n  'XMLHttpRequestUpload',\n];\n\ntype XMLHttpRequestProp = 'onload' | 'onerror' | 'onprogress' | 'onreadystatechange';\n\n/** JSDoc */\ninterface TryCatchOptions {\n  setTimeout: boolean;\n  setInterval: boolean;\n  requestAnimationFrame: boolean;\n  XMLHttpRequest: boolean;\n  eventTarget: boolean | string[];\n}\n\n/** Wrap timer functions and event targets to catch errors and provide better meta data */\nexport class TryCatch implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'TryCatch';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = TryCatch.id;\n\n  /** JSDoc */\n  private readonly _options: TryCatchOptions;\n\n  /**\n   * @inheritDoc\n   */\n  public constructor(options?: Partial<TryCatchOptions>) {\n    this._options = {\n      XMLHttpRequest: true,\n      eventTarget: true,\n      requestAnimationFrame: true,\n      setInterval: true,\n      setTimeout: true,\n      ...options,\n    };\n  }\n\n  /**\n   * Wrap timer functions and event targets to catch errors\n   * and provide better metadata.\n   */\n  public setupOnce(): void {\n    if (this._options.setTimeout) {\n      fill(WINDOW, 'setTimeout', _wrapTimeFunction);\n    }\n\n    if (this._options.setInterval) {\n      fill(WINDOW, 'setInterval', _wrapTimeFunction);\n    }\n\n    if (this._options.requestAnimationFrame) {\n      fill(WINDOW, 'requestAnimationFrame', _wrapRAF);\n    }\n\n    if (this._options.XMLHttpRequest && 'XMLHttpRequest' in WINDOW) {\n      fill(XMLHttpRequest.prototype, 'send', _wrapXHR);\n    }\n\n    const eventTargetOption = this._options.eventTarget;\n    if (eventTargetOption) {\n      const eventTarget = Array.isArray(eventTargetOption) ? eventTargetOption : DEFAULT_EVENT_TARGET;\n      eventTarget.forEach(_wrapEventTarget);\n    }\n  }\n}\n\n/** JSDoc */\nfunction _wrapTimeFunction(original: () => void): () => number {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  return function (this: any, ...args: any[]): number {\n    const originalCallback = args[0];\n    args[0] = wrap(originalCallback, {\n      mechanism: {\n        data: { function: getFunctionName(original) },\n        handled: true,\n        type: 'instrument',\n      },\n    });\n    return original.apply(this, args);\n  };\n}\n\n/** JSDoc */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _wrapRAF(original: any): (callback: () => void) => any {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  return function (this: any, callback: () => void): () => void {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    return original.apply(this, [\n      wrap(callback, {\n        mechanism: {\n          data: {\n            function: 'requestAnimationFrame',\n            handler: getFunctionName(original),\n          },\n          handled: true,\n          type: 'instrument',\n        },\n      }),\n    ]);\n  };\n}\n\n/** JSDoc */\nfunction _wrapXHR(originalSend: () => void): () => void {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  return function (this: XMLHttpRequest, ...args: any[]): void {\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    const xhr = this;\n    const xmlHttpRequestProps: XMLHttpRequestProp[] = ['onload', 'onerror', 'onprogress', 'onreadystatechange'];\n\n    xmlHttpRequestProps.forEach(prop => {\n      if (prop in xhr && typeof xhr[prop] === 'function') {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        fill(xhr, prop, function (original: WrappedFunction): () => any {\n          const wrapOptions = {\n            mechanism: {\n              data: {\n                function: prop,\n                handler: getFunctionName(original),\n              },\n              handled: true,\n              type: 'instrument',\n            },\n          };\n\n          // If Instrument integration has been called before TryCatch, get the name of original function\n          const originalFunction = getOriginalFunction(original);\n          if (originalFunction) {\n            wrapOptions.mechanism.data.handler = getFunctionName(originalFunction);\n          }\n\n          // Otherwise wrap directly\n          return wrap(original, wrapOptions);\n        });\n      }\n    });\n\n    return originalSend.apply(this, args);\n  };\n}\n\n/** JSDoc */\nfunction _wrapEventTarget(target: string): void {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const globalObject = WINDOW as { [key: string]: any };\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n  const proto = globalObject[target] && globalObject[target].prototype;\n\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, no-prototype-builtins\n  if (!proto || !proto.hasOwnProperty || !proto.hasOwnProperty('addEventListener')) {\n    return;\n  }\n\n  fill(proto, 'addEventListener', function (original: () => void): (\n    eventName: string,\n    fn: EventListenerObject,\n    options?: boolean | AddEventListenerOptions,\n  ) => void {\n    return function (\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      this: any,\n      eventName: string,\n      fn: EventListenerObject,\n      options?: boolean | AddEventListenerOptions,\n    ): (eventName: string, fn: EventListenerObject, capture?: boolean, secure?: boolean) => void {\n      try {\n        if (typeof fn.handleEvent === 'function') {\n          // ESlint disable explanation:\n          //  First, it is generally safe to call `wrap` with an unbound function. Furthermore, using `.bind()` would\n          //  introduce a bug here, because bind returns a new function that doesn't have our\n          //  flags(like __sentry_original__) attached. `wrap` checks for those flags to avoid unnecessary wrapping.\n          //  Without those flags, every call to addEventListener wraps the function again, causing a memory leak.\n          // eslint-disable-next-line @typescript-eslint/unbound-method\n          fn.handleEvent = wrap(fn.handleEvent, {\n            mechanism: {\n              data: {\n                function: 'handleEvent',\n                handler: getFunctionName(fn),\n                target,\n              },\n              handled: true,\n              type: 'instrument',\n            },\n          });\n        }\n      } catch (err) {\n        // can sometimes get 'Permission denied to access property \"handle Event'\n      }\n\n      return original.apply(this, [\n        eventName,\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        wrap(fn as any as WrappedFunction, {\n          mechanism: {\n            data: {\n              function: 'addEventListener',\n              handler: getFunctionName(fn),\n              target,\n            },\n            handled: true,\n            type: 'instrument',\n          },\n        }),\n        options,\n      ]);\n    };\n  });\n\n  fill(\n    proto,\n    'removeEventListener',\n    function (\n      originalRemoveEventListener: () => void,\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    ): (this: any, eventName: string, fn: EventListenerObject, options?: boolean | EventListenerOptions) => () => void {\n      return function (\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        this: any,\n        eventName: string,\n        fn: EventListenerObject,\n        options?: boolean | EventListenerOptions,\n      ): () => void {\n        /**\n         * There are 2 possible scenarios here:\n         *\n         * 1. Someone passes a callback, which was attached prior to Sentry initialization, or by using unmodified\n         * method, eg. `document.addEventListener.call(el, name, handler). In this case, we treat this function\n         * as a pass-through, and call original `removeEventListener` with it.\n         *\n         * 2. Someone passes a callback, which was attached after Sentry was initialized, which means that it was using\n         * our wrapped version of `addEventListener`, which internally calls `wrap` helper.\n         * This helper \"wraps\" whole callback inside a try/catch statement, and attached appropriate metadata to it,\n         * in order for us to make a distinction between wrapped/non-wrapped functions possible.\n         * If a function was wrapped, it has additional property of `__sentry_wrapped__`, holding the handler.\n         *\n         * When someone adds a handler prior to initialization, and then do it again, but after,\n         * then we have to detach both of them. Otherwise, if we'd detach only wrapped one, it'd be impossible\n         * to get rid of the initial handler and it'd stick there forever.\n         */\n        const wrappedEventHandler = fn as unknown as WrappedFunction;\n        try {\n          const originalEventHandler = wrappedEventHandler && wrappedEventHandler.__sentry_wrapped__;\n          if (originalEventHandler) {\n            originalRemoveEventListener.call(this, eventName, originalEventHandler, options);\n          }\n        } catch (e) {\n          // ignore, accessing __sentry_wrapped__ will throw in some Selenium environments\n        }\n        return originalRemoveEventListener.call(this, eventName, wrappedEventHandler, options);\n      };\n    },\n  );\n}\n","import { logger } from './logger';\nimport { getGlobalObject } from './worldwide';\n\n// eslint-disable-next-line deprecation/deprecation\nconst WINDOW = getGlobalObject<Window>();\n\nexport { supportsHistory } from './vendor/supportsHistory';\n\n/**\n * Tells whether current environment supports ErrorEvent objects\n * {@link supportsErrorEvent}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsErrorEvent(): boolean {\n  try {\n    new ErrorEvent('');\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * Tells whether current environment supports DOMError objects\n * {@link supportsDOMError}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsDOMError(): boolean {\n  try {\n    // Chrome: VM89:1 Uncaught TypeError: Failed to construct 'DOMError':\n    // 1 argument required, but only 0 present.\n    // @ts-ignore It really needs 1 argument, not 0.\n    new DOMError('');\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * Tells whether current environment supports DOMException objects\n * {@link supportsDOMException}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsDOMException(): boolean {\n  try {\n    new DOMException('');\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * Tells whether current environment supports Fetch API\n * {@link supportsFetch}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsFetch(): boolean {\n  if (!('fetch' in WINDOW)) {\n    return false;\n  }\n\n  try {\n    new Headers();\n    new Request('http://www.example.com');\n    new Response();\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n/**\n * isNativeFetch checks if the given function is a native implementation of fetch()\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function isNativeFetch(func: Function): boolean {\n  return func && /^function fetch\\(\\)\\s+\\{\\s+\\[native code\\]\\s+\\}$/.test(func.toString());\n}\n\n/**\n * Tells whether current environment supports Fetch API natively\n * {@link supportsNativeFetch}.\n *\n * @returns true if `window.fetch` is natively implemented, false otherwise\n */\nexport function supportsNativeFetch(): boolean {\n  if (!supportsFetch()) {\n    return false;\n  }\n\n  // Fast path to avoid DOM I/O\n  // eslint-disable-next-line @typescript-eslint/unbound-method\n  if (isNativeFetch(WINDOW.fetch)) {\n    return true;\n  }\n\n  // window.fetch is implemented, but is polyfilled or already wrapped (e.g: by a chrome extension)\n  // so create a \"pure\" iframe to see if that has native fetch\n  let result = false;\n  const doc = WINDOW.document;\n  // eslint-disable-next-line deprecation/deprecation\n  if (doc && typeof (doc.createElement as unknown) === 'function') {\n    try {\n      const sandbox = doc.createElement('iframe');\n      sandbox.hidden = true;\n      doc.head.appendChild(sandbox);\n      if (sandbox.contentWindow && sandbox.contentWindow.fetch) {\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        result = isNativeFetch(sandbox.contentWindow.fetch);\n      }\n      doc.head.removeChild(sandbox);\n    } catch (err) {\n      __DEBUG_BUILD__ &&\n        logger.warn('Could not create sandbox iframe for pure fetch check, bailing to window.fetch: ', err);\n    }\n  }\n\n  return result;\n}\n\n/**\n * Tells whether current environment supports ReportingObserver API\n * {@link supportsReportingObserver}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsReportingObserver(): boolean {\n  return 'ReportingObserver' in WINDOW;\n}\n\n/**\n * Tells whether current environment supports Referrer Policy API\n * {@link supportsReferrerPolicy}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsReferrerPolicy(): boolean {\n  // Despite all stars in the sky saying that Edge supports old draft syntax, aka 'never', 'always', 'origin' and 'default'\n  // (see https://caniuse.com/#feat=referrer-policy),\n  // it doesn't. And it throws an exception instead of ignoring this parameter...\n  // REF: https://github.com/getsentry/raven-js/issues/1233\n\n  if (!supportsFetch()) {\n    return false;\n  }\n\n  try {\n    new Request('_', {\n      referrerPolicy: 'origin' as ReferrerPolicy,\n    });\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n","// Based on https://github.com/angular/angular.js/pull/13945/files\n// The MIT License\n\n// Copyright (c) 2010-2016 Google, Inc. http://angularjs.org\n\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport { getGlobalObject } from '../worldwide';\n\n// eslint-disable-next-line deprecation/deprecation\nconst WINDOW = getGlobalObject<Window>();\n\n/**\n * Tells whether current environment supports History API\n * {@link supportsHistory}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsHistory(): boolean {\n  // NOTE: in Chrome App environment, touching history.pushState, *even inside\n  //       a try/catch block*, will cause Chrome to output an error to console.error\n  // borrowed from: https://github.com/angular/angular.js/pull/13945/files\n  /* eslint-disable @typescript-eslint/no-unsafe-member-access */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const chrome = (WINDOW as any).chrome;\n  const isChromePackagedApp = chrome && chrome.app && chrome.app.runtime;\n  /* eslint-enable @typescript-eslint/no-unsafe-member-access */\n  const hasHistoryApi = 'history' in WINDOW && !!WINDOW.history.pushState && !!WINDOW.history.replaceState;\n\n  return !isChromePackagedApp && hasHistoryApi;\n}\n","/* eslint-disable max-lines */\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/ban-types */\nimport type {\n  HandlerDataFetch,\n  HandlerDataXhr,\n  SentryWrappedXMLHttpRequest,\n  SentryXhrData,\n  WrappedFunction,\n} from '@sentry/types';\n\nimport { isString } from './is';\nimport { CONSOLE_LEVELS, logger } from './logger';\nimport { fill } from './object';\nimport { getFunctionName } from './stacktrace';\nimport { supportsHistory, supportsNativeFetch } from './supports';\nimport { getGlobalObject } from './worldwide';\n\n// eslint-disable-next-line deprecation/deprecation\nconst WINDOW = getGlobalObject<Window>();\n\nexport const SENTRY_XHR_DATA_KEY = '__sentry_xhr_v2__';\n\nexport type InstrumentHandlerType =\n  | 'console'\n  | 'dom'\n  | 'fetch'\n  | 'history'\n  | 'sentry'\n  | 'xhr'\n  | 'error'\n  | 'unhandledrejection';\nexport type InstrumentHandlerCallback = (data: any) => void;\n\n/**\n * Instrument native APIs to call handlers that can be used to create breadcrumbs, APM spans etc.\n *  - Console API\n *  - Fetch API\n *  - XHR API\n *  - History API\n *  - DOM API (click/typing)\n *  - Error API\n *  - UnhandledRejection API\n */\n\nconst handlers: { [key in InstrumentHandlerType]?: InstrumentHandlerCallback[] } = {};\nconst instrumented: { [key in InstrumentHandlerType]?: boolean } = {};\n\n/** Instruments given API */\nfunction instrument(type: InstrumentHandlerType): void {\n  if (instrumented[type]) {\n    return;\n  }\n\n  instrumented[type] = true;\n\n  switch (type) {\n    case 'console':\n      instrumentConsole();\n      break;\n    case 'dom':\n      instrumentDOM();\n      break;\n    case 'xhr':\n      instrumentXHR();\n      break;\n    case 'fetch':\n      instrumentFetch();\n      break;\n    case 'history':\n      instrumentHistory();\n      break;\n    case 'error':\n      instrumentError();\n      break;\n    case 'unhandledrejection':\n      instrumentUnhandledRejection();\n      break;\n    default:\n      __DEBUG_BUILD__ && logger.warn('unknown instrumentation type:', type);\n      return;\n  }\n}\n\n/**\n * Add handler that will be called when given type of instrumentation triggers.\n * Use at your own risk, this might break without changelog notice, only used internally.\n * @hidden\n */\nexport function addInstrumentationHandler(type: InstrumentHandlerType, callback: InstrumentHandlerCallback): void {\n  handlers[type] = handlers[type] || [];\n  (handlers[type] as InstrumentHandlerCallback[]).push(callback);\n  instrument(type);\n}\n\n/** JSDoc */\nfunction triggerHandlers(type: InstrumentHandlerType, data: any): void {\n  if (!type || !handlers[type]) {\n    return;\n  }\n\n  for (const handler of handlers[type] || []) {\n    try {\n      handler(data);\n    } catch (e) {\n      __DEBUG_BUILD__ &&\n        logger.error(\n          `Error while triggering instrumentation handler.\\nType: ${type}\\nName: ${getFunctionName(handler)}\\nError:`,\n          e,\n        );\n    }\n  }\n}\n\n/** JSDoc */\nfunction instrumentConsole(): void {\n  if (!('console' in WINDOW)) {\n    return;\n  }\n\n  CONSOLE_LEVELS.forEach(function (level: string): void {\n    if (!(level in WINDOW.console)) {\n      return;\n    }\n\n    fill(WINDOW.console, level, function (originalConsoleMethod: () => any): Function {\n      return function (...args: any[]): void {\n        triggerHandlers('console', { args, level });\n\n        // this fails for some browsers. :(\n        if (originalConsoleMethod) {\n          originalConsoleMethod.apply(WINDOW.console, args);\n        }\n      };\n    });\n  });\n}\n\n/** JSDoc */\nfunction instrumentFetch(): void {\n  if (!supportsNativeFetch()) {\n    return;\n  }\n\n  fill(WINDOW, 'fetch', function (originalFetch: () => void): () => void {\n    return function (...args: any[]): void {\n      const { method, url } = parseFetchArgs(args);\n\n      const handlerData: HandlerDataFetch = {\n        args,\n        fetchData: {\n          method,\n          url,\n        },\n        startTimestamp: Date.now(),\n      };\n\n      triggerHandlers('fetch', {\n        ...handlerData,\n      });\n\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      return originalFetch.apply(WINDOW, args).then(\n        (response: Response) => {\n          triggerHandlers('fetch', {\n            ...handlerData,\n            endTimestamp: Date.now(),\n            response,\n          });\n          return response;\n        },\n        (error: Error) => {\n          triggerHandlers('fetch', {\n            ...handlerData,\n            endTimestamp: Date.now(),\n            error,\n          });\n          // NOTE: If you are a Sentry user, and you are seeing this stack frame,\n          //       it means the sentry.javascript SDK caught an error invoking your application code.\n          //       This is expected behavior and NOT indicative of a bug with sentry.javascript.\n          throw error;\n        },\n      );\n    };\n  });\n}\n\nfunction hasProp<T extends string>(obj: unknown, prop: T): obj is Record<string, string> {\n  return !!obj && typeof obj === 'object' && !!(obj as Record<string, string>)[prop];\n}\n\ntype FetchResource = string | { toString(): string } | { url: string };\n\nfunction getUrlFromResource(resource: FetchResource): string {\n  if (typeof resource === 'string') {\n    return resource;\n  }\n\n  if (!resource) {\n    return '';\n  }\n\n  if (hasProp(resource, 'url')) {\n    return resource.url;\n  }\n\n  if (resource.toString) {\n    return resource.toString();\n  }\n\n  return '';\n}\n\n/**\n * Parses the fetch arguments to find the used Http method and the url of the request\n */\nexport function parseFetchArgs(fetchArgs: unknown[]): { method: string; url: string } {\n  if (fetchArgs.length === 0) {\n    return { method: 'GET', url: '' };\n  }\n\n  if (fetchArgs.length === 2) {\n    const [url, options] = fetchArgs as [FetchResource, object];\n\n    return {\n      url: getUrlFromResource(url),\n      method: hasProp(options, 'method') ? String(options.method).toUpperCase() : 'GET',\n    };\n  }\n\n  const arg = fetchArgs[0];\n  return {\n    url: getUrlFromResource(arg as FetchResource),\n    method: hasProp(arg, 'method') ? String(arg.method).toUpperCase() : 'GET',\n  };\n}\n\n/** JSDoc */\nfunction instrumentXHR(): void {\n  if (!('XMLHttpRequest' in WINDOW)) {\n    return;\n  }\n\n  const xhrproto = XMLHttpRequest.prototype;\n\n  fill(xhrproto, 'open', function (originalOpen: () => void): () => void {\n    return function (this: XMLHttpRequest & SentryWrappedXMLHttpRequest, ...args: any[]): void {\n      const url = args[1];\n      const xhrInfo: SentryXhrData = (this[SENTRY_XHR_DATA_KEY] = {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        method: isString(args[0]) ? args[0].toUpperCase() : args[0],\n        url: args[1],\n        request_headers: {},\n      });\n\n      // if Sentry key appears in URL, don't capture it as a request\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      if (isString(url) && xhrInfo.method === 'POST' && url.match(/sentry_key/)) {\n        this.__sentry_own_request__ = true;\n      }\n\n      const onreadystatechangeHandler: () => void = () => {\n        // For whatever reason, this is not the same instance here as from the outer method\n        const xhrInfo = this[SENTRY_XHR_DATA_KEY];\n\n        if (!xhrInfo) {\n          return;\n        }\n\n        if (this.readyState === 4) {\n          try {\n            // touching statusCode in some platforms throws\n            // an exception\n            xhrInfo.status_code = this.status;\n          } catch (e) {\n            /* do nothing */\n          }\n\n          triggerHandlers('xhr', {\n            args: args as [string, string],\n            endTimestamp: Date.now(),\n            startTimestamp: Date.now(),\n            xhr: this,\n          } as HandlerDataXhr);\n        }\n      };\n\n      if ('onreadystatechange' in this && typeof this.onreadystatechange === 'function') {\n        fill(this, 'onreadystatechange', function (original: WrappedFunction): Function {\n          return function (this: SentryWrappedXMLHttpRequest, ...readyStateArgs: any[]): void {\n            onreadystatechangeHandler();\n            return original.apply(this, readyStateArgs);\n          };\n        });\n      } else {\n        this.addEventListener('readystatechange', onreadystatechangeHandler);\n      }\n\n      // Intercepting `setRequestHeader` to access the request headers of XHR instance.\n      // This will only work for user/library defined headers, not for the default/browser-assigned headers.\n      // Request cookies are also unavailable for XHR, as `Cookie` header can't be defined by `setRequestHeader`.\n      fill(this, 'setRequestHeader', function (original: WrappedFunction): Function {\n        return function (this: SentryWrappedXMLHttpRequest, ...setRequestHeaderArgs: unknown[]): void {\n          const [header, value] = setRequestHeaderArgs as [string, string];\n\n          const xhrInfo = this[SENTRY_XHR_DATA_KEY];\n\n          if (xhrInfo) {\n            xhrInfo.request_headers[header.toLowerCase()] = value;\n          }\n\n          return original.apply(this, setRequestHeaderArgs);\n        };\n      });\n\n      return originalOpen.apply(this, args);\n    };\n  });\n\n  fill(xhrproto, 'send', function (originalSend: () => void): () => void {\n    return function (this: XMLHttpRequest & SentryWrappedXMLHttpRequest, ...args: any[]): void {\n      const sentryXhrData = this[SENTRY_XHR_DATA_KEY];\n      if (sentryXhrData && args[0] !== undefined) {\n        sentryXhrData.body = args[0];\n      }\n\n      triggerHandlers('xhr', {\n        args,\n        startTimestamp: Date.now(),\n        xhr: this,\n      });\n\n      return originalSend.apply(this, args);\n    };\n  });\n}\n\nlet lastHref: string;\n\n/** JSDoc */\nfunction instrumentHistory(): void {\n  if (!supportsHistory()) {\n    return;\n  }\n\n  const oldOnPopState = WINDOW.onpopstate;\n  WINDOW.onpopstate = function (this: WindowEventHandlers, ...args: any[]): any {\n    const to = WINDOW.location.href;\n    // keep track of the current URL state, as we always receive only the updated state\n    const from = lastHref;\n    lastHref = to;\n    triggerHandlers('history', {\n      from,\n      to,\n    });\n    if (oldOnPopState) {\n      // Apparently this can throw in Firefox when incorrectly implemented plugin is installed.\n      // https://github.com/getsentry/sentry-javascript/issues/3344\n      // https://github.com/bugsnag/bugsnag-js/issues/469\n      try {\n        return oldOnPopState.apply(this, args);\n      } catch (_oO) {\n        // no-empty\n      }\n    }\n  };\n\n  /** @hidden */\n  function historyReplacementFunction(originalHistoryFunction: () => void): () => void {\n    return function (this: History, ...args: any[]): void {\n      const url = args.length > 2 ? args[2] : undefined;\n      if (url) {\n        // coerce to string (this is what pushState does)\n        const from = lastHref;\n        const to = String(url);\n        // keep track of the current URL state, as we always receive only the updated state\n        lastHref = to;\n        triggerHandlers('history', {\n          from,\n          to,\n        });\n      }\n      return originalHistoryFunction.apply(this, args);\n    };\n  }\n\n  fill(WINDOW.history, 'pushState', historyReplacementFunction);\n  fill(WINDOW.history, 'replaceState', historyReplacementFunction);\n}\n\nconst debounceDuration = 1000;\nlet debounceTimerID: number | undefined;\nlet lastCapturedEvent: Event | undefined;\n\n/**\n * Decide whether the current event should finish the debounce of previously captured one.\n * @param previous previously captured event\n * @param current event to be captured\n */\nfunction shouldShortcircuitPreviousDebounce(previous: Event | undefined, current: Event): boolean {\n  // If there was no previous event, it should always be swapped for the new one.\n  if (!previous) {\n    return true;\n  }\n\n  // If both events have different type, then user definitely performed two separate actions. e.g. click + keypress.\n  if (previous.type !== current.type) {\n    return true;\n  }\n\n  try {\n    // If both events have the same type, it's still possible that actions were performed on different targets.\n    // e.g. 2 clicks on different buttons.\n    if (previous.target !== current.target) {\n      return true;\n    }\n  } catch (e) {\n    // just accessing `target` property can throw an exception in some rare circumstances\n    // see: https://github.com/getsentry/sentry-javascript/issues/838\n  }\n\n  // If both events have the same type _and_ same `target` (an element which triggered an event, _not necessarily_\n  // to which an event listener was attached), we treat them as the same action, as we want to capture\n  // only one breadcrumb. e.g. multiple clicks on the same button, or typing inside a user input box.\n  return false;\n}\n\n/**\n * Decide whether an event should be captured.\n * @param event event to be captured\n */\nfunction shouldSkipDOMEvent(event: Event): boolean {\n  // We are only interested in filtering `keypress` events for now.\n  if (event.type !== 'keypress') {\n    return false;\n  }\n\n  try {\n    const target = event.target as HTMLElement;\n\n    if (!target || !target.tagName) {\n      return true;\n    }\n\n    // Only consider keypress events on actual input elements. This will disregard keypresses targeting body\n    // e.g.tabbing through elements, hotkeys, etc.\n    if (target.tagName === 'INPUT' || target.tagName === 'TEXTAREA' || target.isContentEditable) {\n      return false;\n    }\n  } catch (e) {\n    // just accessing `target` property can throw an exception in some rare circumstances\n    // see: https://github.com/getsentry/sentry-javascript/issues/838\n  }\n\n  return true;\n}\n\n/**\n * Wraps addEventListener to capture UI breadcrumbs\n * @param handler function that will be triggered\n * @param globalListener indicates whether event was captured by the global event listener\n * @returns wrapped breadcrumb events handler\n * @hidden\n */\nfunction makeDOMEventHandler(handler: Function, globalListener: boolean = false): (event: Event) => void {\n  return (event: Event): void => {\n    // It's possible this handler might trigger multiple times for the same\n    // event (e.g. event propagation through node ancestors).\n    // Ignore if we've already captured that event.\n    if (!event || lastCapturedEvent === event) {\n      return;\n    }\n\n    // We always want to skip _some_ events.\n    if (shouldSkipDOMEvent(event)) {\n      return;\n    }\n\n    const name = event.type === 'keypress' ? 'input' : event.type;\n\n    // If there is no debounce timer, it means that we can safely capture the new event and store it for future comparisons.\n    if (debounceTimerID === undefined) {\n      handler({\n        event: event,\n        name,\n        global: globalListener,\n      });\n      lastCapturedEvent = event;\n    }\n    // If there is a debounce awaiting, see if the new event is different enough to treat it as a unique one.\n    // If that's the case, emit the previous event and store locally the newly-captured DOM event.\n    else if (shouldShortcircuitPreviousDebounce(lastCapturedEvent, event)) {\n      handler({\n        event: event,\n        name,\n        global: globalListener,\n      });\n      lastCapturedEvent = event;\n    }\n\n    // Start a new debounce timer that will prevent us from capturing multiple events that should be grouped together.\n    clearTimeout(debounceTimerID);\n    debounceTimerID = WINDOW.setTimeout(() => {\n      debounceTimerID = undefined;\n    }, debounceDuration);\n  };\n}\n\ntype AddEventListener = (\n  type: string,\n  listener: EventListenerOrEventListenerObject,\n  options?: boolean | AddEventListenerOptions,\n) => void;\ntype RemoveEventListener = (\n  type: string,\n  listener: EventListenerOrEventListenerObject,\n  options?: boolean | EventListenerOptions,\n) => void;\n\ntype InstrumentedElement = Element & {\n  __sentry_instrumentation_handlers__?: {\n    [key in 'click' | 'keypress']?: {\n      handler?: Function;\n      /** The number of custom listeners attached to this element */\n      refCount: number;\n    };\n  };\n};\n\n/** JSDoc */\nfunction instrumentDOM(): void {\n  if (!('document' in WINDOW)) {\n    return;\n  }\n\n  // Make it so that any click or keypress that is unhandled / bubbled up all the way to the document triggers our dom\n  // handlers. (Normally we have only one, which captures a breadcrumb for each click or keypress.) Do this before\n  // we instrument `addEventListener` so that we don't end up attaching this handler twice.\n  const triggerDOMHandler = triggerHandlers.bind(null, 'dom');\n  const globalDOMEventHandler = makeDOMEventHandler(triggerDOMHandler, true);\n  WINDOW.document.addEventListener('click', globalDOMEventHandler, false);\n  WINDOW.document.addEventListener('keypress', globalDOMEventHandler, false);\n\n  // After hooking into click and keypress events bubbled up to `document`, we also hook into user-handled\n  // clicks & keypresses, by adding an event listener of our own to any element to which they add a listener. That\n  // way, whenever one of their handlers is triggered, ours will be, too. (This is needed because their handler\n  // could potentially prevent the event from bubbling up to our global listeners. This way, our handler are still\n  // guaranteed to fire at least once.)\n  ['EventTarget', 'Node'].forEach((target: string) => {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    const proto = (WINDOW as any)[target] && (WINDOW as any)[target].prototype;\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, no-prototype-builtins\n    if (!proto || !proto.hasOwnProperty || !proto.hasOwnProperty('addEventListener')) {\n      return;\n    }\n\n    fill(proto, 'addEventListener', function (originalAddEventListener: AddEventListener): AddEventListener {\n      return function (\n        this: Element,\n        type: string,\n        listener: EventListenerOrEventListenerObject,\n        options?: boolean | AddEventListenerOptions,\n      ): AddEventListener {\n        if (type === 'click' || type == 'keypress') {\n          try {\n            const el = this as InstrumentedElement;\n            const handlers = (el.__sentry_instrumentation_handlers__ = el.__sentry_instrumentation_handlers__ || {});\n            const handlerForType = (handlers[type] = handlers[type] || { refCount: 0 });\n\n            if (!handlerForType.handler) {\n              const handler = makeDOMEventHandler(triggerDOMHandler);\n              handlerForType.handler = handler;\n              originalAddEventListener.call(this, type, handler, options);\n            }\n\n            handlerForType.refCount++;\n          } catch (e) {\n            // Accessing dom properties is always fragile.\n            // Also allows us to skip `addEventListenrs` calls with no proper `this` context.\n          }\n        }\n\n        return originalAddEventListener.call(this, type, listener, options);\n      };\n    });\n\n    fill(\n      proto,\n      'removeEventListener',\n      function (originalRemoveEventListener: RemoveEventListener): RemoveEventListener {\n        return function (\n          this: Element,\n          type: string,\n          listener: EventListenerOrEventListenerObject,\n          options?: boolean | EventListenerOptions,\n        ): () => void {\n          if (type === 'click' || type == 'keypress') {\n            try {\n              const el = this as InstrumentedElement;\n              const handlers = el.__sentry_instrumentation_handlers__ || {};\n              const handlerForType = handlers[type];\n\n              if (handlerForType) {\n                handlerForType.refCount--;\n                // If there are no longer any custom handlers of the current type on this element, we can remove ours, too.\n                if (handlerForType.refCount <= 0) {\n                  originalRemoveEventListener.call(this, type, handlerForType.handler, options);\n                  handlerForType.handler = undefined;\n                  delete handlers[type]; // eslint-disable-line @typescript-eslint/no-dynamic-delete\n                }\n\n                // If there are no longer any custom handlers of any type on this element, cleanup everything.\n                if (Object.keys(handlers).length === 0) {\n                  delete el.__sentry_instrumentation_handlers__;\n                }\n              }\n            } catch (e) {\n              // Accessing dom properties is always fragile.\n              // Also allows us to skip `addEventListenrs` calls with no proper `this` context.\n            }\n          }\n\n          return originalRemoveEventListener.call(this, type, listener, options);\n        };\n      },\n    );\n  });\n}\n\nlet _oldOnErrorHandler: (typeof WINDOW)['onerror'] | null = null;\n/** JSDoc */\nfunction instrumentError(): void {\n  _oldOnErrorHandler = WINDOW.onerror;\n\n  WINDOW.onerror = function (msg: unknown, url: unknown, line: unknown, column: unknown, error: unknown): boolean {\n    triggerHandlers('error', {\n      column,\n      error,\n      line,\n      msg,\n      url,\n    });\n\n    if (_oldOnErrorHandler && !_oldOnErrorHandler.__SENTRY_LOADER__) {\n      // eslint-disable-next-line prefer-rest-params\n      return _oldOnErrorHandler.apply(this, arguments);\n    }\n\n    return false;\n  };\n\n  WINDOW.onerror.__SENTRY_INSTRUMENTED__ = true;\n}\n\nlet _oldOnUnhandledRejectionHandler: (typeof WINDOW)['onunhandledrejection'] | null = null;\n/** JSDoc */\nfunction instrumentUnhandledRejection(): void {\n  _oldOnUnhandledRejectionHandler = WINDOW.onunhandledrejection;\n\n  WINDOW.onunhandledrejection = function (e: any): boolean {\n    triggerHandlers('unhandledrejection', e);\n\n    if (_oldOnUnhandledRejectionHandler && !_oldOnUnhandledRejectionHandler.__SENTRY_LOADER__) {\n      // eslint-disable-next-line prefer-rest-params\n      return _oldOnUnhandledRejectionHandler.apply(this, arguments);\n    }\n\n    return true;\n  };\n\n  WINDOW.onunhandledrejection.__SENTRY_INSTRUMENTED__ = true;\n}\n","import type { Primitive } from '@sentry/types';\n\nimport { isNaN, isSyntheticEvent } from './is';\nimport type { MemoFunc } from './memo';\nimport { memoBuilder } from './memo';\nimport { convertToPlainObject } from './object';\nimport { getFunctionName } from './stacktrace';\n\ntype Prototype = { constructor: (...args: unknown[]) => unknown };\n// This is a hack to placate TS, relying on the fact that technically, arrays are objects with integer keys. Normally we\n// think of those keys as actual numbers, but `arr['0']` turns out to work just as well as `arr[0]`, and doing it this\n// way lets us use a single type in the places where behave as if we are only dealing with objects, even if some of them\n// might be arrays.\ntype ObjOrArray<T> = { [key: string]: T };\n\n/**\n * Recursively normalizes the given object.\n *\n * - Creates a copy to prevent original input mutation\n * - Skips non-enumerable properties\n * - When stringifying, calls `toJSON` if implemented\n * - Removes circular references\n * - Translates non-serializable values (`undefined`/`NaN`/functions) to serializable format\n * - Translates known global objects/classes to a string representations\n * - Takes care of `Error` object serialization\n * - Optionally limits depth of final output\n * - Optionally limits number of properties/elements included in any single object/array\n *\n * @param input The object to be normalized.\n * @param depth The max depth to which to normalize the object. (Anything deeper stringified whole.)\n * @param maxProperties The max number of elements or properties to be included in any single array or\n * object in the normallized output.\n * @returns A normalized version of the object, or `\"**non-serializable**\"` if any errors are thrown during normalization.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function normalize(input: unknown, depth: number = 100, maxProperties: number = +Infinity): any {\n  try {\n    // since we're at the outermost level, we don't provide a key\n    return visit('', input, depth, maxProperties);\n  } catch (err) {\n    return { ERROR: `**non-serializable** (${err})` };\n  }\n}\n\n/** JSDoc */\nexport function normalizeToSize<T>(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  object: { [key: string]: any },\n  // Default Node.js REPL depth\n  depth: number = 3,\n  // 100kB, as 200kB is max payload size, so half sounds reasonable\n  maxSize: number = 100 * 1024,\n): T {\n  const normalized = normalize(object, depth);\n\n  if (jsonSize(normalized) > maxSize) {\n    return normalizeToSize(object, depth - 1, maxSize);\n  }\n\n  return normalized as T;\n}\n\n/**\n * Visits a node to perform normalization on it\n *\n * @param key The key corresponding to the given node\n * @param value The node to be visited\n * @param depth Optional number indicating the maximum recursion depth\n * @param maxProperties Optional maximum number of properties/elements included in any single object/array\n * @param memo Optional Memo class handling decycling\n */\nfunction visit(\n  key: string,\n  value: unknown,\n  depth: number = +Infinity,\n  maxProperties: number = +Infinity,\n  memo: MemoFunc = memoBuilder(),\n): Primitive | ObjOrArray<unknown> {\n  const [memoize, unmemoize] = memo;\n\n  // Get the simple cases out of the way first\n  if (\n    value == null || // this matches null and undefined -> eqeq not eqeqeq\n    (['number', 'boolean', 'string'].includes(typeof value) && !isNaN(value))\n  ) {\n    return value as Primitive;\n  }\n\n  const stringified = stringifyValue(key, value);\n\n  // Anything we could potentially dig into more (objects or arrays) will have come back as `\"[object XXXX]\"`.\n  // Everything else will have already been serialized, so if we don't see that pattern, we're done.\n  if (!stringified.startsWith('[object ')) {\n    return stringified;\n  }\n\n  // From here on, we can assert that `value` is either an object or an array.\n\n  // Do not normalize objects that we know have already been normalized. As a general rule, the\n  // \"__sentry_skip_normalization__\" property should only be used sparingly and only should only be set on objects that\n  // have already been normalized.\n  if ((value as ObjOrArray<unknown>)['__sentry_skip_normalization__']) {\n    return value as ObjOrArray<unknown>;\n  }\n\n  // We can set `__sentry_override_normalization_depth__` on an object to ensure that from there\n  // We keep a certain amount of depth.\n  // This should be used sparingly, e.g. we use it for the redux integration to ensure we get a certain amount of state.\n  const remainingDepth =\n    typeof (value as ObjOrArray<unknown>)['__sentry_override_normalization_depth__'] === 'number'\n      ? ((value as ObjOrArray<unknown>)['__sentry_override_normalization_depth__'] as number)\n      : depth;\n\n  // We're also done if we've reached the max depth\n  if (remainingDepth === 0) {\n    // At this point we know `serialized` is a string of the form `\"[object XXXX]\"`. Clean it up so it's just `\"[XXXX]\"`.\n    return stringified.replace('object ', '');\n  }\n\n  // If we've already visited this branch, bail out, as it's circular reference. If not, note that we're seeing it now.\n  if (memoize(value)) {\n    return '[Circular ~]';\n  }\n\n  // If the value has a `toJSON` method, we call it to extract more information\n  const valueWithToJSON = value as unknown & { toJSON?: () => unknown };\n  if (valueWithToJSON && typeof valueWithToJSON.toJSON === 'function') {\n    try {\n      const jsonValue = valueWithToJSON.toJSON();\n      // We need to normalize the return value of `.toJSON()` in case it has circular references\n      return visit('', jsonValue, remainingDepth - 1, maxProperties, memo);\n    } catch (err) {\n      // pass (The built-in `toJSON` failed, but we can still try to do it ourselves)\n    }\n  }\n\n  // At this point we know we either have an object or an array, we haven't seen it before, and we're going to recurse\n  // because we haven't yet reached the max depth. Create an accumulator to hold the results of visiting each\n  // property/entry, and keep track of the number of items we add to it.\n  const normalized = (Array.isArray(value) ? [] : {}) as ObjOrArray<unknown>;\n  let numAdded = 0;\n\n  // Before we begin, convert`Error` and`Event` instances into plain objects, since some of each of their relevant\n  // properties are non-enumerable and otherwise would get missed.\n  const visitable = convertToPlainObject(value as ObjOrArray<unknown>);\n\n  for (const visitKey in visitable) {\n    // Avoid iterating over fields in the prototype if they've somehow been exposed to enumeration.\n    if (!Object.prototype.hasOwnProperty.call(visitable, visitKey)) {\n      continue;\n    }\n\n    if (numAdded >= maxProperties) {\n      normalized[visitKey] = '[MaxProperties ~]';\n      break;\n    }\n\n    // Recursively visit all the child nodes\n    const visitValue = visitable[visitKey];\n    normalized[visitKey] = visit(visitKey, visitValue, remainingDepth - 1, maxProperties, memo);\n\n    numAdded++;\n  }\n\n  // Once we've visited all the branches, remove the parent from memo storage\n  unmemoize(value);\n\n  // Return accumulated values\n  return normalized;\n}\n\n// TODO remove this in v7 (this means the method will no longer be exported, under any name)\nexport { visit as walk };\n\n/* eslint-disable complexity */\n/**\n * Stringify the given value. Handles various known special values and types.\n *\n * Not meant to be used on simple primitives which already have a string representation, as it will, for example, turn\n * the number 1231 into \"[Object Number]\", nor on `null`, as it will throw.\n *\n * @param value The value to stringify\n * @returns A stringified representation of the given value\n */\nfunction stringifyValue(\n  key: unknown,\n  // this type is a tiny bit of a cheat, since this function does handle NaN (which is technically a number), but for\n  // our internal use, it'll do\n  value: Exclude<unknown, string | number | boolean | null>,\n): string {\n  try {\n    if (key === 'domain' && value && typeof value === 'object' && (value as { _events: unknown })._events) {\n      return '[Domain]';\n    }\n\n    if (key === 'domainEmitter') {\n      return '[DomainEmitter]';\n    }\n\n    // It's safe to use `global`, `window`, and `document` here in this manner, as we are asserting using `typeof` first\n    // which won't throw if they are not present.\n\n    if (typeof global !== 'undefined' && value === global) {\n      return '[Global]';\n    }\n\n    // eslint-disable-next-line no-restricted-globals\n    if (typeof window !== 'undefined' && value === window) {\n      return '[Window]';\n    }\n\n    // eslint-disable-next-line no-restricted-globals\n    if (typeof document !== 'undefined' && value === document) {\n      return '[Document]';\n    }\n\n    // React's SyntheticEvent thingy\n    if (isSyntheticEvent(value)) {\n      return '[SyntheticEvent]';\n    }\n\n    if (typeof value === 'number' && value !== value) {\n      return '[NaN]';\n    }\n\n    if (typeof value === 'function') {\n      return `[Function: ${getFunctionName(value)}]`;\n    }\n\n    if (typeof value === 'symbol') {\n      return `[${String(value)}]`;\n    }\n\n    // stringified BigInts are indistinguishable from regular numbers, so we need to label them to avoid confusion\n    if (typeof value === 'bigint') {\n      return `[BigInt: ${String(value)}]`;\n    }\n\n    // Now that we've knocked out all the special cases and the primitives, all we have left are objects. Simply casting\n    // them to strings means that instances of classes which haven't defined their `toStringTag` will just come out as\n    // `\"[object Object]\"`. If we instead look at the constructor's name (which is the same as the name of the class),\n    // we can make sure that only plain objects come out that way.\n    const objName = getConstructorName(value);\n\n    // Handle HTML Elements\n    if (/^HTML(\\w*)Element$/.test(objName)) {\n      return `[HTMLElement: ${objName}]`;\n    }\n\n    return `[object ${objName}]`;\n  } catch (err) {\n    return `**non-serializable** (${err})`;\n  }\n}\n/* eslint-enable complexity */\n\nfunction getConstructorName(value: unknown): string {\n  const prototype: Prototype | null = Object.getPrototypeOf(value);\n\n  return prototype ? prototype.constructor.name : 'null prototype';\n}\n\n/** Calculates bytes size of input string */\nfunction utf8Length(value: string): number {\n  // eslint-disable-next-line no-bitwise\n  return ~-encodeURI(value).split(/%..|./).length;\n}\n\n/** Calculates bytes size of input object */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction jsonSize(value: any): number {\n  return utf8Length(JSON.stringify(value));\n}\n","/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\nexport type MemoFunc = [\n  // memoize\n  (obj: any) => boolean,\n  // unmemoize\n  (obj: any) => void,\n];\n\n/**\n * Helper to decycle json objects\n */\nexport function memoBuilder(): MemoFunc {\n  const hasWeakSet = typeof WeakSet === 'function';\n  const inner: any = hasWeakSet ? new WeakSet() : [];\n  function memoize(obj: any): boolean {\n    if (hasWeakSet) {\n      if (inner.has(obj)) {\n        return true;\n      }\n      inner.add(obj);\n      return false;\n    }\n    // eslint-disable-next-line @typescript-eslint/prefer-for-of\n    for (let i = 0; i < inner.length; i++) {\n      const value = inner[i];\n      if (value === obj) {\n        return true;\n      }\n    }\n    inner.push(obj);\n    return false;\n  }\n\n  function unmemoize(obj: any): void {\n    if (hasWeakSet) {\n      inner.delete(obj);\n    } else {\n      for (let i = 0; i < inner.length; i++) {\n        if (inner[i] === obj) {\n          inner.splice(i, 1);\n          break;\n        }\n      }\n    }\n  }\n  return [memoize, unmemoize];\n}\n","import { getCurrentHub } from '@sentry/core';\nimport type { Event, EventHint, Exception, Severity, SeverityLevel, StackFrame, StackParser } from '@sentry/types';\nimport {\n  addExceptionMechanism,\n  addExceptionTypeValue,\n  extractExceptionKeysForMessage,\n  isDOMError,\n  isDOMException,\n  isError,\n  isErrorEvent,\n  isEvent,\n  isPlainObject,\n  normalizeToSize,\n  resolvedSyncPromise,\n} from '@sentry/utils';\n\n/**\n * This function creates an exception from a JavaScript Error\n */\nexport function exceptionFromError(stackParser: StackParser, ex: Error): Exception {\n  // Get the frames first since Opera can lose the stack if we touch anything else first\n  const frames = parseStackFrames(stackParser, ex);\n\n  const exception: Exception = {\n    type: ex && ex.name,\n    value: extractMessage(ex),\n  };\n\n  if (frames.length) {\n    exception.stacktrace = { frames };\n  }\n\n  if (exception.type === undefined && exception.value === '') {\n    exception.value = 'Unrecoverable error caught';\n  }\n\n  return exception;\n}\n\n/**\n * @hidden\n */\nexport function eventFromPlainObject(\n  stackParser: StackParser,\n  exception: Record<string, unknown>,\n  syntheticException?: Error,\n  isUnhandledRejection?: boolean,\n): Event {\n  const hub = getCurrentHub();\n  const client = hub.getClient();\n  const normalizeDepth = client && client.getOptions().normalizeDepth;\n\n  const event: Event = {\n    exception: {\n      values: [\n        {\n          type: isEvent(exception) ? exception.constructor.name : isUnhandledRejection ? 'UnhandledRejection' : 'Error',\n          value: `Non-Error ${\n            isUnhandledRejection ? 'promise rejection' : 'exception'\n          } captured with keys: ${extractExceptionKeysForMessage(exception)}`,\n        },\n      ],\n    },\n    extra: {\n      __serialized__: normalizeToSize(exception, normalizeDepth),\n    },\n  };\n\n  if (syntheticException) {\n    const frames = parseStackFrames(stackParser, syntheticException);\n    if (frames.length) {\n      // event.exception.values[0] has been set above\n      (event.exception as { values: Exception[] }).values[0].stacktrace = { frames };\n    }\n  }\n\n  return event;\n}\n\n/**\n * @hidden\n */\nexport function eventFromError(stackParser: StackParser, ex: Error): Event {\n  return {\n    exception: {\n      values: [exceptionFromError(stackParser, ex)],\n    },\n  };\n}\n\n/** Parses stack frames from an error */\nexport function parseStackFrames(\n  stackParser: StackParser,\n  ex: Error & { framesToPop?: number; stacktrace?: string },\n): StackFrame[] {\n  // Access and store the stacktrace property before doing ANYTHING\n  // else to it because Opera is not very good at providing it\n  // reliably in other circumstances.\n  const stacktrace = ex.stacktrace || ex.stack || '';\n\n  const popSize = getPopSize(ex);\n\n  try {\n    return stackParser(stacktrace, popSize);\n  } catch (e) {\n    // no-empty\n  }\n\n  return [];\n}\n\n// Based on our own mapping pattern - https://github.com/getsentry/sentry/blob/9f08305e09866c8bd6d0c24f5b0aabdd7dd6c59c/src/sentry/lang/javascript/errormapping.py#L83-L108\nconst reactMinifiedRegexp = /Minified React error #\\d+;/i;\n\nfunction getPopSize(ex: Error & { framesToPop?: number }): number {\n  if (ex) {\n    if (typeof ex.framesToPop === 'number') {\n      return ex.framesToPop;\n    }\n\n    if (reactMinifiedRegexp.test(ex.message)) {\n      return 1;\n    }\n  }\n\n  return 0;\n}\n\n/**\n * There are cases where stacktrace.message is an Event object\n * https://github.com/getsentry/sentry-javascript/issues/1949\n * In this specific case we try to extract stacktrace.message.error.message\n */\nfunction extractMessage(ex: Error & { message: { error?: Error } }): string {\n  const message = ex && ex.message;\n  if (!message) {\n    return 'No error message';\n  }\n  if (message.error && typeof message.error.message === 'string') {\n    return message.error.message;\n  }\n  return message;\n}\n\n/**\n * Creates an {@link Event} from all inputs to `captureException` and non-primitive inputs to `captureMessage`.\n * @hidden\n */\nexport function eventFromException(\n  stackParser: StackParser,\n  exception: unknown,\n  hint?: EventHint,\n  attachStacktrace?: boolean,\n): PromiseLike<Event> {\n  const syntheticException = (hint && hint.syntheticException) || undefined;\n  const event = eventFromUnknownInput(stackParser, exception, syntheticException, attachStacktrace);\n  addExceptionMechanism(event); // defaults to { type: 'generic', handled: true }\n  event.level = 'error';\n  if (hint && hint.event_id) {\n    event.event_id = hint.event_id;\n  }\n  return resolvedSyncPromise(event);\n}\n\n/**\n * Builds and Event from a Message\n * @hidden\n */\nexport function eventFromMessage(\n  stackParser: StackParser,\n  message: string,\n  // eslint-disable-next-line deprecation/deprecation\n  level: Severity | SeverityLevel = 'info',\n  hint?: EventHint,\n  attachStacktrace?: boolean,\n): PromiseLike<Event> {\n  const syntheticException = (hint && hint.syntheticException) || undefined;\n  const event = eventFromString(stackParser, message, syntheticException, attachStacktrace);\n  event.level = level;\n  if (hint && hint.event_id) {\n    event.event_id = hint.event_id;\n  }\n  return resolvedSyncPromise(event);\n}\n\n/**\n * @hidden\n */\nexport function eventFromUnknownInput(\n  stackParser: StackParser,\n  exception: unknown,\n  syntheticException?: Error,\n  attachStacktrace?: boolean,\n  isUnhandledRejection?: boolean,\n): Event {\n  let event: Event;\n\n  if (isErrorEvent(exception as ErrorEvent) && (exception as ErrorEvent).error) {\n    // If it is an ErrorEvent with `error` property, extract it to get actual Error\n    const errorEvent = exception as ErrorEvent;\n    return eventFromError(stackParser, errorEvent.error as Error);\n  }\n\n  // If it is a `DOMError` (which is a legacy API, but still supported in some browsers) then we just extract the name\n  // and message, as it doesn't provide anything else. According to the spec, all `DOMExceptions` should also be\n  // `Error`s, but that's not the case in IE11, so in that case we treat it the same as we do a `DOMError`.\n  //\n  // https://developer.mozilla.org/en-US/docs/Web/API/DOMError\n  // https://developer.mozilla.org/en-US/docs/Web/API/DOMException\n  // https://webidl.spec.whatwg.org/#es-DOMException-specialness\n  if (isDOMError(exception as DOMError) || isDOMException(exception as DOMException)) {\n    const domException = exception as DOMException;\n\n    if ('stack' in (exception as Error)) {\n      event = eventFromError(stackParser, exception as Error);\n    } else {\n      const name = domException.name || (isDOMError(domException) ? 'DOMError' : 'DOMException');\n      const message = domException.message ? `${name}: ${domException.message}` : name;\n      event = eventFromString(stackParser, message, syntheticException, attachStacktrace);\n      addExceptionTypeValue(event, message);\n    }\n    if ('code' in domException) {\n      event.tags = { ...event.tags, 'DOMException.code': `${domException.code}` };\n    }\n\n    return event;\n  }\n  if (isError(exception)) {\n    // we have a real Error object, do nothing\n    return eventFromError(stackParser, exception);\n  }\n  if (isPlainObject(exception) || isEvent(exception)) {\n    // If it's a plain object or an instance of `Event` (the built-in JS kind, not this SDK's `Event` type), serialize\n    // it manually. This will allow us to group events based on top-level keys which is much better than creating a new\n    // group on any key/value change.\n    const objectException = exception as Record<string, unknown>;\n    event = eventFromPlainObject(stackParser, objectException, syntheticException, isUnhandledRejection);\n    addExceptionMechanism(event, {\n      synthetic: true,\n    });\n    return event;\n  }\n\n  // If none of previous checks were valid, then it means that it's not:\n  // - an instance of DOMError\n  // - an instance of DOMException\n  // - an instance of Event\n  // - an instance of Error\n  // - a valid ErrorEvent (one with an error property)\n  // - a plain Object\n  //\n  // So bail out and capture it as a simple message:\n  event = eventFromString(stackParser, exception as string, syntheticException, attachStacktrace);\n  addExceptionTypeValue(event, `${exception}`, undefined);\n  addExceptionMechanism(event, {\n    synthetic: true,\n  });\n\n  return event;\n}\n\n/**\n * @hidden\n */\nexport function eventFromString(\n  stackParser: StackParser,\n  input: string,\n  syntheticException?: Error,\n  attachStacktrace?: boolean,\n): Event {\n  const event: Event = {\n    message: input,\n  };\n\n  if (attachStacktrace && syntheticException) {\n    const frames = parseStackFrames(stackParser, syntheticException);\n    if (frames.length) {\n      event.exception = {\n        values: [{ value: input, stacktrace: { frames } }],\n      };\n    }\n  }\n\n  return event;\n}\n","/* eslint-disable @typescript-eslint/no-unsafe-member-access */\nimport { getCurrentHub } from '@sentry/core';\nimport type { Event, EventHint, Hub, Integration, Primitive, StackParser } from '@sentry/types';\nimport {\n  addExceptionMechanism,\n  addInstrumentationHandler,\n  getLocationHref,\n  isErrorEvent,\n  isPrimitive,\n  isString,\n  logger,\n} from '@sentry/utils';\n\nimport type { BrowserClient } from '../client';\nimport { eventFromUnknownInput } from '../eventbuilder';\nimport { shouldIgnoreOnError } from '../helpers';\n\ntype GlobalHandlersIntegrationsOptionKeys = 'onerror' | 'onunhandledrejection';\n\n/** JSDoc */\ntype GlobalHandlersIntegrations = Record<GlobalHandlersIntegrationsOptionKeys, boolean>;\n\n/** Global handlers */\nexport class GlobalHandlers implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'GlobalHandlers';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = GlobalHandlers.id;\n\n  /** JSDoc */\n  private readonly _options: GlobalHandlersIntegrations;\n\n  /**\n   * Stores references functions to installing handlers. Will set to undefined\n   * after they have been run so that they are not used twice.\n   */\n  private _installFunc: Record<GlobalHandlersIntegrationsOptionKeys, (() => void) | undefined> = {\n    onerror: _installGlobalOnErrorHandler,\n    onunhandledrejection: _installGlobalOnUnhandledRejectionHandler,\n  };\n\n  /** JSDoc */\n  public constructor(options?: GlobalHandlersIntegrations) {\n    this._options = {\n      onerror: true,\n      onunhandledrejection: true,\n      ...options,\n    };\n  }\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(): void {\n    Error.stackTraceLimit = 50;\n    const options = this._options;\n\n    // We can disable guard-for-in as we construct the options object above + do checks against\n    // `this._installFunc` for the property.\n    // eslint-disable-next-line guard-for-in\n    for (const key in options) {\n      const installFunc = this._installFunc[key as GlobalHandlersIntegrationsOptionKeys];\n      if (installFunc && options[key as GlobalHandlersIntegrationsOptionKeys]) {\n        globalHandlerLog(key);\n        installFunc();\n        this._installFunc[key as GlobalHandlersIntegrationsOptionKeys] = undefined;\n      }\n    }\n  }\n}\n\n/** JSDoc */\nfunction _installGlobalOnErrorHandler(): void {\n  addInstrumentationHandler(\n    'error',\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (data: { msg: any; url: any; line: any; column: any; error: any }) => {\n      const [hub, stackParser, attachStacktrace] = getHubAndOptions();\n      if (!hub.getIntegration(GlobalHandlers)) {\n        return;\n      }\n      const { msg, url, line, column, error } = data;\n      if (shouldIgnoreOnError() || (error && error.__sentry_own_request__)) {\n        return;\n      }\n\n      const event =\n        error === undefined && isString(msg)\n          ? _eventFromIncompleteOnError(msg, url, line, column)\n          : _enhanceEventWithInitialFrame(\n              eventFromUnknownInput(stackParser, error || msg, undefined, attachStacktrace, false),\n              url,\n              line,\n              column,\n            );\n\n      event.level = 'error';\n\n      addMechanismAndCapture(hub, error, event, 'onerror');\n    },\n  );\n}\n\n/** JSDoc */\nfunction _installGlobalOnUnhandledRejectionHandler(): void {\n  addInstrumentationHandler(\n    'unhandledrejection',\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (e: any) => {\n      const [hub, stackParser, attachStacktrace] = getHubAndOptions();\n      if (!hub.getIntegration(GlobalHandlers)) {\n        return;\n      }\n      let error = e;\n\n      // dig the object of the rejection out of known event types\n      try {\n        // PromiseRejectionEvents store the object of the rejection under 'reason'\n        // see https://developer.mozilla.org/en-US/docs/Web/API/PromiseRejectionEvent\n        if ('reason' in e) {\n          error = e.reason;\n        }\n        // something, somewhere, (likely a browser extension) effectively casts PromiseRejectionEvents\n        // to CustomEvents, moving the `promise` and `reason` attributes of the PRE into\n        // the CustomEvent's `detail` attribute, since they're not part of CustomEvent's spec\n        // see https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent and\n        // https://github.com/getsentry/sentry-javascript/issues/2380\n        else if ('detail' in e && 'reason' in e.detail) {\n          error = e.detail.reason;\n        }\n      } catch (_oO) {\n        // no-empty\n      }\n\n      if (shouldIgnoreOnError() || (error && error.__sentry_own_request__)) {\n        return true;\n      }\n\n      const event = isPrimitive(error)\n        ? _eventFromRejectionWithPrimitive(error)\n        : eventFromUnknownInput(stackParser, error, undefined, attachStacktrace, true);\n\n      event.level = 'error';\n\n      addMechanismAndCapture(hub, error, event, 'onunhandledrejection');\n      return;\n    },\n  );\n}\n\n/**\n * Create an event from a promise rejection where the `reason` is a primitive.\n *\n * @param reason: The `reason` property of the promise rejection\n * @returns An Event object with an appropriate `exception` value\n */\nfunction _eventFromRejectionWithPrimitive(reason: Primitive): Event {\n  return {\n    exception: {\n      values: [\n        {\n          type: 'UnhandledRejection',\n          // String() is needed because the Primitive type includes symbols (which can't be automatically stringified)\n          value: `Non-Error promise rejection captured with value: ${String(reason)}`,\n        },\n      ],\n    },\n  };\n}\n\n/**\n * This function creates a stack from an old, error-less onerror handler.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _eventFromIncompleteOnError(msg: any, url: any, line: any, column: any): Event {\n  const ERROR_TYPES_RE =\n    /^(?:[Uu]ncaught (?:exception: )?)?(?:((?:Eval|Internal|Range|Reference|Syntax|Type|URI|)Error): )?(.*)$/i;\n\n  // If 'message' is ErrorEvent, get real message from inside\n  let message = isErrorEvent(msg) ? msg.message : msg;\n  let name = 'Error';\n\n  const groups = message.match(ERROR_TYPES_RE);\n  if (groups) {\n    name = groups[1];\n    message = groups[2];\n  }\n\n  const event = {\n    exception: {\n      values: [\n        {\n          type: name,\n          value: message,\n        },\n      ],\n    },\n  };\n\n  return _enhanceEventWithInitialFrame(event, url, line, column);\n}\n\n/** JSDoc */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _enhanceEventWithInitialFrame(event: Event, url: any, line: any, column: any): Event {\n  // event.exception\n  const e = (event.exception = event.exception || {});\n  // event.exception.values\n  const ev = (e.values = e.values || []);\n  // event.exception.values[0]\n  const ev0 = (ev[0] = ev[0] || {});\n  // event.exception.values[0].stacktrace\n  const ev0s = (ev0.stacktrace = ev0.stacktrace || {});\n  // event.exception.values[0].stacktrace.frames\n  const ev0sf = (ev0s.frames = ev0s.frames || []);\n\n  const colno = isNaN(parseInt(column, 10)) ? undefined : column;\n  const lineno = isNaN(parseInt(line, 10)) ? undefined : line;\n  const filename = isString(url) && url.length > 0 ? url : getLocationHref();\n\n  // event.exception.values[0].stacktrace.frames\n  if (ev0sf.length === 0) {\n    ev0sf.push({\n      colno,\n      filename,\n      function: '?',\n      in_app: true,\n      lineno,\n    });\n  }\n\n  return event;\n}\n\nfunction globalHandlerLog(type: string): void {\n  __DEBUG_BUILD__ && logger.log(`Global Handler attached: ${type}`);\n}\n\nfunction addMechanismAndCapture(hub: Hub, error: EventHint['originalException'], event: Event, type: string): void {\n  addExceptionMechanism(event, {\n    handled: false,\n    type,\n  });\n  hub.captureEvent(event, {\n    originalException: error,\n  });\n}\n\nfunction getHubAndOptions(): [Hub, StackParser, boolean | undefined] {\n  const hub = getCurrentHub();\n  const client = hub.getClient<BrowserClient>();\n  const options = (client && client.getOptions()) || {\n    stackParser: () => [],\n    attachStacktrace: false,\n  };\n  return [hub, options.stackParser, options.attachStacktrace];\n}\n","/* eslint-disable deprecation/deprecation */\nimport type { Severity, SeverityLevel } from '@sentry/types';\n\n// Note: Ideally the `SeverityLevel` type would be derived from `validSeverityLevels`, but that would mean either\n//\n// a) moving `validSeverityLevels` to `@sentry/types`,\n// b) moving the`SeverityLevel` type here, or\n// c) importing `validSeverityLevels` from here into `@sentry/types`.\n//\n// Option A would make `@sentry/types` a runtime dependency of `@sentry/utils` (not good), and options B and C would\n// create a circular dependency between `@sentry/types` and `@sentry/utils` (also not good). So a TODO accompanying the\n// type, reminding anyone who changes it to change this list also, will have to do.\n\nexport const validSeverityLevels = ['fatal', 'error', 'warning', 'log', 'info', 'debug'];\n\n/**\n * Converts a string-based level into a member of the deprecated {@link Severity} enum.\n *\n * @deprecated `severityFromString` is deprecated. Please use `severityLevelFromString` instead.\n *\n * @param level String representation of Severity\n * @returns Severity\n */\nexport function severityFromString(level: Severity | SeverityLevel | string): Severity {\n  return severityLevelFromString(level) as Severity;\n}\n\n/**\n * Converts a string-based level into a `SeverityLevel`, normalizing it along the way.\n *\n * @param level String representation of desired `SeverityLevel`.\n * @returns The `SeverityLevel` corresponding to the given string, or 'log' if the string isn't a valid level.\n */\nexport function severityLevelFromString(level: SeverityLevel | string): SeverityLevel {\n  return (level === 'warn' ? 'warning' : validSeverityLevels.includes(level) ? level : 'log') as SeverityLevel;\n}\n","type PartialURL = {\n  host?: string;\n  path?: string;\n  protocol?: string;\n  relative?: string;\n  search?: string;\n  hash?: string;\n};\n\n/**\n * Parses string form of URL into an object\n * // borrowed from https://tools.ietf.org/html/rfc3986#appendix-B\n * // intentionally using regex and not <a/> href parsing trick because React Native and other\n * // environments where DOM might not be available\n * @returns parsed URL object\n */\nexport function parseUrl(url: string): PartialURL {\n  if (!url) {\n    return {};\n  }\n\n  const match = url.match(/^(([^:/?#]+):)?(\\/\\/([^/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?$/);\n\n  if (!match) {\n    return {};\n  }\n\n  // coerce to undefined values to empty string so we don't get 'undefined'\n  const query = match[6] || '';\n  const fragment = match[8] || '';\n  return {\n    host: match[4],\n    path: match[5],\n    protocol: match[2],\n    search: query,\n    hash: fragment,\n    relative: match[5] + query + fragment, // everything minus origin\n  };\n}\n\n/**\n * Strip the query string and fragment off of a given URL or path (if present)\n *\n * @param urlPath Full URL or path, including possible query string and/or fragment\n * @returns URL or path without query string or fragment\n */\nexport function stripUrlQueryAndFragment(urlPath: string): string {\n  // eslint-disable-next-line no-useless-escape\n  return urlPath.split(/[\\?#]/, 1)[0];\n}\n\n/**\n * Returns number of URL segments of a passed string URL.\n */\nexport function getNumberOfUrlSegments(url: string): number {\n  // split at '/' or at '\\/' to split regex urls correctly\n  return url.split(/\\\\?\\//).filter(s => s.length > 0 && s !== ',').length;\n}\n\n/**\n * Takes a URL object and returns a sanitized string which is safe to use as span description\n * see: https://develop.sentry.dev/sdk/data-handling/#structuring-data\n */\nexport function getSanitizedUrlString(url: PartialURL): string {\n  const { protocol, host, path } = url;\n\n  const filteredHost =\n    (host &&\n      host\n        // Always filter out authority\n        .replace(/^.*@/, '[filtered]:[filtered]@')\n        // Don't show standard :80 (http) and :443 (https) ports to reduce the noise\n        .replace(':80', '')\n        .replace(':443', '')) ||\n    '';\n\n  return `${protocol ? `${protocol}://` : ''}${filteredHost}${path}`;\n}\n","/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n/* eslint-disable max-lines */\nimport { getCurrentHub } from '@sentry/core';\nimport type { Event as SentryEvent, HandlerDataFetch, HandlerDataXhr, Integration } from '@sentry/types';\nimport type {\n  FetchBreadcrumbData,\n  FetchBreadcrumbHint,\n  XhrBreadcrumbData,\n  XhrBreadcrumbHint,\n} from '@sentry/types/build/types/breadcrumb';\nimport {\n  addInstrumentationHandler,\n  getEventDescription,\n  htmlTreeAsString,\n  logger,\n  parseUrl,\n  safeJoin,\n  SENTRY_XHR_DATA_KEY,\n  severityLevelFromString,\n} from '@sentry/utils';\n\nimport { WINDOW } from '../helpers';\n\ntype HandlerData = Record<string, unknown>;\n\n/** JSDoc */\ninterface BreadcrumbsOptions {\n  console: boolean;\n  dom:\n    | boolean\n    | {\n        serializeAttribute?: string | string[];\n        maxStringLength?: number;\n      };\n  fetch: boolean;\n  history: boolean;\n  sentry: boolean;\n  xhr: boolean;\n}\n\n/** maxStringLength gets capped to prevent 100 breadcrumbs exceeding 1MB event payload size */\nconst MAX_ALLOWED_STRING_LENGTH = 1024;\n\nexport const BREADCRUMB_INTEGRATION_ID = 'Breadcrumbs';\n\n/**\n * Default Breadcrumbs instrumentations\n * TODO: Deprecated - with v6, this will be renamed to `Instrument`\n */\nexport class Breadcrumbs implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = BREADCRUMB_INTEGRATION_ID;\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = Breadcrumbs.id;\n\n  /**\n   * Options of the breadcrumbs integration.\n   */\n  // This field is public, because we use it in the browser client to check if the `sentry` option is enabled.\n  public readonly options: Readonly<BreadcrumbsOptions>;\n\n  /**\n   * @inheritDoc\n   */\n  public constructor(options?: Partial<BreadcrumbsOptions>) {\n    this.options = {\n      console: true,\n      dom: true,\n      fetch: true,\n      history: true,\n      sentry: true,\n      xhr: true,\n      ...options,\n    };\n  }\n\n  /**\n   * Instrument browser built-ins w/ breadcrumb capturing\n   *  - Console API\n   *  - DOM API (click/typing)\n   *  - XMLHttpRequest API\n   *  - Fetch API\n   *  - History API\n   */\n  public setupOnce(): void {\n    if (this.options.console) {\n      addInstrumentationHandler('console', _consoleBreadcrumb);\n    }\n    if (this.options.dom) {\n      addInstrumentationHandler('dom', _domBreadcrumb(this.options.dom));\n    }\n    if (this.options.xhr) {\n      addInstrumentationHandler('xhr', _xhrBreadcrumb);\n    }\n    if (this.options.fetch) {\n      addInstrumentationHandler('fetch', _fetchBreadcrumb);\n    }\n    if (this.options.history) {\n      addInstrumentationHandler('history', _historyBreadcrumb);\n    }\n  }\n\n  /**\n   * Adds a breadcrumb for Sentry events or transactions if this option is enabled.\n   */\n  public addSentryBreadcrumb(event: SentryEvent): void {\n    if (this.options.sentry) {\n      getCurrentHub().addBreadcrumb(\n        {\n          category: `sentry.${event.type === 'transaction' ? 'transaction' : 'event'}`,\n          event_id: event.event_id,\n          level: event.level,\n          message: getEventDescription(event),\n        },\n        {\n          event,\n        },\n      );\n    }\n  }\n}\n\n/**\n * A HOC that creaes a function that creates breadcrumbs from DOM API calls.\n * This is a HOC so that we get access to dom options in the closure.\n */\nfunction _domBreadcrumb(dom: BreadcrumbsOptions['dom']): (handlerData: HandlerData) => void {\n  function _innerDomBreadcrumb(handlerData: HandlerData): void {\n    let target;\n    let keyAttrs = typeof dom === 'object' ? dom.serializeAttribute : undefined;\n\n    let maxStringLength =\n      typeof dom === 'object' && typeof dom.maxStringLength === 'number' ? dom.maxStringLength : undefined;\n    if (maxStringLength && maxStringLength > MAX_ALLOWED_STRING_LENGTH) {\n      __DEBUG_BUILD__ &&\n        logger.warn(\n          `\\`dom.maxStringLength\\` cannot exceed ${MAX_ALLOWED_STRING_LENGTH}, but a value of ${maxStringLength} was configured. Sentry will use ${MAX_ALLOWED_STRING_LENGTH} instead.`,\n        );\n      maxStringLength = MAX_ALLOWED_STRING_LENGTH;\n    }\n\n    if (typeof keyAttrs === 'string') {\n      keyAttrs = [keyAttrs];\n    }\n\n    // Accessing event.target can throw (see getsentry/raven-js#838, #768)\n    try {\n      const event = handlerData.event as Event | Node;\n      target = _isEvent(event)\n        ? htmlTreeAsString(event.target, { keyAttrs, maxStringLength })\n        : htmlTreeAsString(event, { keyAttrs, maxStringLength });\n    } catch (e) {\n      target = '<unknown>';\n    }\n\n    if (target.length === 0) {\n      return;\n    }\n\n    getCurrentHub().addBreadcrumb(\n      {\n        category: `ui.${handlerData.name}`,\n        message: target,\n      },\n      {\n        event: handlerData.event,\n        name: handlerData.name,\n        global: handlerData.global,\n      },\n    );\n  }\n\n  return _innerDomBreadcrumb;\n}\n\n/**\n * Creates breadcrumbs from console API calls\n */\nfunction _consoleBreadcrumb(handlerData: HandlerData & { args: unknown[]; level: string }): void {\n  // This is a hack to fix a Vue3-specific bug that causes an infinite loop of\n  // console warnings. This happens when a Vue template is rendered with\n  // an undeclared variable, which we try to stringify, ultimately causing\n  // Vue to issue another warning which repeats indefinitely.\n  // see: https://github.com/getsentry/sentry-javascript/pull/6010\n  // see: https://github.com/getsentry/sentry-javascript/issues/5916\n  for (let i = 0; i < handlerData.args.length; i++) {\n    if (handlerData.args[i] === 'ref=Ref<') {\n      handlerData.args[i + 1] = 'viewRef';\n      break;\n    }\n  }\n  const breadcrumb = {\n    category: 'console',\n    data: {\n      arguments: handlerData.args,\n      logger: 'console',\n    },\n    level: severityLevelFromString(handlerData.level),\n    message: safeJoin(handlerData.args, ' '),\n  };\n\n  if (handlerData.level === 'assert') {\n    if (handlerData.args[0] === false) {\n      breadcrumb.message = `Assertion failed: ${safeJoin(handlerData.args.slice(1), ' ') || 'console.assert'}`;\n      breadcrumb.data.arguments = handlerData.args.slice(1);\n    } else {\n      // Don't capture a breadcrumb for passed assertions\n      return;\n    }\n  }\n\n  getCurrentHub().addBreadcrumb(breadcrumb, {\n    input: handlerData.args,\n    level: handlerData.level,\n  });\n}\n\n/**\n * Creates breadcrumbs from XHR API calls\n */\nfunction _xhrBreadcrumb(handlerData: HandlerData & HandlerDataXhr): void {\n  const { startTimestamp, endTimestamp } = handlerData;\n\n  const sentryXhrData = handlerData.xhr[SENTRY_XHR_DATA_KEY];\n\n  // We only capture complete, non-sentry requests\n  if (!startTimestamp || !endTimestamp || !sentryXhrData) {\n    return;\n  }\n\n  const { method, url, status_code, body } = sentryXhrData;\n\n  const data: XhrBreadcrumbData = {\n    method,\n    url,\n    status_code,\n  };\n\n  const hint: XhrBreadcrumbHint = {\n    xhr: handlerData.xhr,\n    input: body,\n    startTimestamp,\n    endTimestamp,\n  };\n\n  getCurrentHub().addBreadcrumb(\n    {\n      category: 'xhr',\n      data,\n      type: 'http',\n    },\n    hint,\n  );\n}\n\n/**\n * Creates breadcrumbs from fetch API calls\n */\nfunction _fetchBreadcrumb(handlerData: HandlerData & HandlerDataFetch & { response?: Response }): void {\n  const { startTimestamp, endTimestamp } = handlerData;\n\n  // We only capture complete fetch requests\n  if (!endTimestamp) {\n    return;\n  }\n\n  if (handlerData.fetchData.url.match(/sentry_key/) && handlerData.fetchData.method === 'POST') {\n    // We will not create breadcrumbs for fetch requests that contain `sentry_key` (internal sentry requests)\n    return;\n  }\n\n  if (handlerData.error) {\n    const data: FetchBreadcrumbData = handlerData.fetchData;\n    const hint: FetchBreadcrumbHint = {\n      data: handlerData.error,\n      input: handlerData.args,\n      startTimestamp,\n      endTimestamp,\n    };\n\n    getCurrentHub().addBreadcrumb(\n      {\n        category: 'fetch',\n        data,\n        level: 'error',\n        type: 'http',\n      },\n      hint,\n    );\n  } else {\n    const data: FetchBreadcrumbData = {\n      ...handlerData.fetchData,\n      status_code: handlerData.response && handlerData.response.status,\n    };\n    const hint: FetchBreadcrumbHint = {\n      input: handlerData.args,\n      response: handlerData.response,\n      startTimestamp,\n      endTimestamp,\n    };\n    getCurrentHub().addBreadcrumb(\n      {\n        category: 'fetch',\n        data,\n        type: 'http',\n      },\n      hint,\n    );\n  }\n}\n\n/**\n * Creates breadcrumbs from history API calls\n */\nfunction _historyBreadcrumb(handlerData: HandlerData & { from: string; to: string }): void {\n  let from: string | undefined = handlerData.from;\n  let to: string | undefined = handlerData.to;\n  const parsedLoc = parseUrl(WINDOW.location.href);\n  let parsedFrom = parseUrl(from);\n  const parsedTo = parseUrl(to);\n\n  // Initial pushState doesn't provide `from` information\n  if (!parsedFrom.path) {\n    parsedFrom = parsedLoc;\n  }\n\n  // Use only the path component of the URL if the URL matches the current\n  // document (almost all the time when using pushState)\n  if (parsedLoc.protocol === parsedTo.protocol && parsedLoc.host === parsedTo.host) {\n    to = parsedTo.relative;\n  }\n  if (parsedLoc.protocol === parsedFrom.protocol && parsedLoc.host === parsedFrom.host) {\n    from = parsedFrom.relative;\n  }\n\n  getCurrentHub().addBreadcrumb({\n    category: 'navigation',\n    data: {\n      from,\n      to,\n    },\n  });\n}\n\nfunction _isEvent(event: unknown): event is Event {\n  return event && !!(event as Record<string, unknown>).target;\n}\n","import { addGlobalEventProcessor, getCurrentHub } from '@sentry/core';\nimport type { Event, EventHint, Exception, ExtendedError, Integration, StackParser } from '@sentry/types';\nimport { isInstanceOf } from '@sentry/utils';\n\nimport type { BrowserClient } from '../client';\nimport { exceptionFromError } from '../eventbuilder';\n\nconst DEFAULT_KEY = 'cause';\nconst DEFAULT_LIMIT = 5;\n\ninterface LinkedErrorsOptions {\n  key: string;\n  limit: number;\n}\n\n/** Adds SDK info to an event. */\nexport class LinkedErrors implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'LinkedErrors';\n\n  /**\n   * @inheritDoc\n   */\n  public readonly name: string = LinkedErrors.id;\n\n  /**\n   * @inheritDoc\n   */\n  private readonly _key: LinkedErrorsOptions['key'];\n\n  /**\n   * @inheritDoc\n   */\n  private readonly _limit: LinkedErrorsOptions['limit'];\n\n  /**\n   * @inheritDoc\n   */\n  public constructor(options: Partial<LinkedErrorsOptions> = {}) {\n    this._key = options.key || DEFAULT_KEY;\n    this._limit = options.limit || DEFAULT_LIMIT;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(): void {\n    const client = getCurrentHub().getClient<BrowserClient>();\n    if (!client) {\n      return;\n    }\n    addGlobalEventProcessor((event: Event, hint?: EventHint) => {\n      const self = getCurrentHub().getIntegration(LinkedErrors);\n      return self ? _handler(client.getOptions().stackParser, self._key, self._limit, event, hint) : event;\n    });\n  }\n}\n\n/**\n * @inheritDoc\n */\nexport function _handler(\n  parser: StackParser,\n  key: string,\n  limit: number,\n  event: Event,\n  hint?: EventHint,\n): Event | null {\n  if (!event.exception || !event.exception.values || !hint || !isInstanceOf(hint.originalException, Error)) {\n    return event;\n  }\n  const linkedErrors = _walkErrorTree(parser, limit, hint.originalException as ExtendedError, key);\n  event.exception.values = [...linkedErrors, ...event.exception.values];\n  return event;\n}\n\n/**\n * JSDOC\n */\nexport function _walkErrorTree(\n  parser: StackParser,\n  limit: number,\n  error: ExtendedError,\n  key: string,\n  stack: Exception[] = [],\n): Exception[] {\n  if (!isInstanceOf(error[key], Error) || stack.length + 1 >= limit) {\n    return stack;\n  }\n  const exception = exceptionFromError(parser, error[key]);\n  return _walkErrorTree(parser, limit, error[key], key, [exception, ...stack]);\n}\n","import { addGlobalEventProcessor, getCurrentHub } from '@sentry/core';\nimport type { Event, Integration } from '@sentry/types';\n\nimport { WINDOW } from '../helpers';\n\n/** HttpContext integration collects information about HTTP request headers */\nexport class HttpContext implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'HttpContext';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = HttpContext.id;\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(): void {\n    addGlobalEventProcessor((event: Event) => {\n      if (getCurrentHub().getIntegration(HttpContext)) {\n        // if none of the information we want exists, don't bother\n        if (!WINDOW.navigator && !WINDOW.location && !WINDOW.document) {\n          return event;\n        }\n\n        // grab as much info as exists and add it to the event\n        const url = (event.request && event.request.url) || (WINDOW.location && WINDOW.location.href);\n        const { referrer } = WINDOW.document || {};\n        const { userAgent } = WINDOW.navigator || {};\n\n        const headers = {\n          ...(event.request && event.request.headers),\n          ...(referrer && { Referer: referrer }),\n          ...(userAgent && { 'User-Agent': userAgent }),\n        };\n        const request = { ...event.request, ...(url && { url }), headers };\n\n        return { ...event, request };\n      }\n      return event;\n    });\n  }\n}\n","export default function _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}","import setPrototypeOf from \"./setPrototypeOf.js\";\nexport default function _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  setPrototypeOf(subClass, superClass);\n}","export const SDK_VERSION = '7.56.0';\n","import type { DsnComponents, DsnLike, DsnProtocol } from '@sentry/types';\n\nimport { logger } from './logger';\n\n/** Regular expression used to parse a Dsn. */\nconst DSN_REGEX = /^(?:(\\w+):)\\/\\/(?:(\\w+)(?::(\\w+)?)?@)([\\w.-]+)(?::(\\d+))?\\/(.+)/;\n\nfunction isValidProtocol(protocol?: string): protocol is DsnProtocol {\n  return protocol === 'http' || protocol === 'https';\n}\n\n/**\n * Renders the string representation of this Dsn.\n *\n * By default, this will render the public representation without the password\n * component. To get the deprecated private representation, set `withPassword`\n * to true.\n *\n * @param withPassword When set to true, the password will be included.\n */\nexport function dsnToString(dsn: DsnComponents, withPassword: boolean = false): string {\n  const { host, path, pass, port, projectId, protocol, publicKey } = dsn;\n  return (\n    `${protocol}://${publicKey}${withPassword && pass ? `:${pass}` : ''}` +\n    `@${host}${port ? `:${port}` : ''}/${path ? `${path}/` : path}${projectId}`\n  );\n}\n\n/**\n * Parses a Dsn from a given string.\n *\n * @param str A Dsn as string\n * @returns Dsn as DsnComponents or undefined if @param str is not a valid DSN string\n */\nexport function dsnFromString(str: string): DsnComponents | undefined {\n  const match = DSN_REGEX.exec(str);\n\n  if (!match) {\n    // This should be logged to the console\n    // eslint-disable-next-line no-console\n    console.error(`Invalid Sentry Dsn: ${str}`);\n    return undefined;\n  }\n\n  const [protocol, publicKey, pass = '', host, port = '', lastPath] = match.slice(1);\n  let path = '';\n  let projectId = lastPath;\n\n  const split = projectId.split('/');\n  if (split.length > 1) {\n    path = split.slice(0, -1).join('/');\n    projectId = split.pop() as string;\n  }\n\n  if (projectId) {\n    const projectMatch = projectId.match(/^\\d+/);\n    if (projectMatch) {\n      projectId = projectMatch[0];\n    }\n  }\n\n  return dsnFromComponents({ host, pass, path, projectId, port, protocol: protocol as DsnProtocol, publicKey });\n}\n\nfunction dsnFromComponents(components: DsnComponents): DsnComponents {\n  return {\n    protocol: components.protocol,\n    publicKey: components.publicKey || '',\n    pass: components.pass || '',\n    host: components.host,\n    port: components.port || '',\n    path: components.path || '',\n    projectId: components.projectId,\n  };\n}\n\nfunction validateDsn(dsn: DsnComponents): boolean {\n  if (!__DEBUG_BUILD__) {\n    return true;\n  }\n\n  const { port, projectId, protocol } = dsn;\n\n  const requiredComponents: ReadonlyArray<keyof DsnComponents> = ['protocol', 'publicKey', 'host', 'projectId'];\n  const hasMissingRequiredComponent = requiredComponents.find(component => {\n    if (!dsn[component]) {\n      logger.error(`Invalid Sentry Dsn: ${component} missing`);\n      return true;\n    }\n    return false;\n  });\n\n  if (hasMissingRequiredComponent) {\n    return false;\n  }\n\n  if (!projectId.match(/^\\d+$/)) {\n    logger.error(`Invalid Sentry Dsn: Invalid projectId ${projectId}`);\n    return false;\n  }\n\n  if (!isValidProtocol(protocol)) {\n    logger.error(`Invalid Sentry Dsn: Invalid protocol ${protocol}`);\n    return false;\n  }\n\n  if (port && isNaN(parseInt(port, 10))) {\n    logger.error(`Invalid Sentry Dsn: Invalid port ${port}`);\n    return false;\n  }\n\n  return true;\n}\n\n/**\n * Creates a valid Sentry Dsn object, identifying a Sentry instance and project.\n * @returns a valid DsnComponents object or `undefined` if @param from is an invalid DSN source\n */\nexport function makeDsn(from: DsnLike): DsnComponents | undefined {\n  const components = typeof from === 'string' ? dsnFromString(from) : dsnFromComponents(from);\n  if (!components || !validateDsn(components)) {\n    return undefined;\n  }\n  return components;\n}\n","import type {\n  Attachment,\n  AttachmentItem,\n  BaseEnvelopeHeaders,\n  BaseEnvelopeItemHeaders,\n  DataCategory,\n  DsnComponents,\n  Envelope,\n  EnvelopeItemType,\n  Event,\n  EventEnvelopeHeaders,\n  SdkInfo,\n  SdkMetadata,\n  TextEncoderInternal,\n} from '@sentry/types';\n\nimport { dsnToString } from './dsn';\nimport { normalize } from './normalize';\nimport { dropUndefinedKeys } from './object';\n\n/**\n * Creates an envelope.\n * Make sure to always explicitly provide the generic to this function\n * so that the envelope types resolve correctly.\n */\nexport function createEnvelope<E extends Envelope>(headers: E[0], items: E[1] = []): E {\n  return [headers, items] as E;\n}\n\n/**\n * Add an item to an envelope.\n * Make sure to always explicitly provide the generic to this function\n * so that the envelope types resolve correctly.\n */\nexport function addItemToEnvelope<E extends Envelope>(envelope: E, newItem: E[1][number]): E {\n  const [headers, items] = envelope;\n  return [headers, [...items, newItem]] as E;\n}\n\n/**\n * Convenience function to loop through the items and item types of an envelope.\n * (This function was mostly created because working with envelope types is painful at the moment)\n *\n * If the callback returns true, the rest of the items will be skipped.\n */\nexport function forEachEnvelopeItem<E extends Envelope>(\n  envelope: Envelope,\n  callback: (envelopeItem: E[1][number], envelopeItemType: E[1][number][0]['type']) => boolean | void,\n): boolean {\n  const envelopeItems = envelope[1];\n\n  for (const envelopeItem of envelopeItems) {\n    const envelopeItemType = envelopeItem[0].type;\n    const result = callback(envelopeItem, envelopeItemType);\n\n    if (result) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\n/**\n * Returns true if the envelope contains any of the given envelope item types\n */\nexport function envelopeContainsItemType(envelope: Envelope, types: EnvelopeItemType[]): boolean {\n  return forEachEnvelopeItem(envelope, (_, type) => types.includes(type));\n}\n\n/**\n * Encode a string to UTF8.\n */\nfunction encodeUTF8(input: string, textEncoder?: TextEncoderInternal): Uint8Array {\n  const utf8 = textEncoder || new TextEncoder();\n  return utf8.encode(input);\n}\n\n/**\n * Serializes an envelope.\n */\nexport function serializeEnvelope(envelope: Envelope, textEncoder?: TextEncoderInternal): string | Uint8Array {\n  const [envHeaders, items] = envelope;\n\n  // Initially we construct our envelope as a string and only convert to binary chunks if we encounter binary data\n  let parts: string | Uint8Array[] = JSON.stringify(envHeaders);\n\n  function append(next: string | Uint8Array): void {\n    if (typeof parts === 'string') {\n      parts = typeof next === 'string' ? parts + next : [encodeUTF8(parts, textEncoder), next];\n    } else {\n      parts.push(typeof next === 'string' ? encodeUTF8(next, textEncoder) : next);\n    }\n  }\n\n  for (const item of items) {\n    const [itemHeaders, payload] = item;\n\n    append(`\\n${JSON.stringify(itemHeaders)}\\n`);\n\n    if (typeof payload === 'string' || payload instanceof Uint8Array) {\n      append(payload);\n    } else {\n      let stringifiedPayload: string;\n      try {\n        stringifiedPayload = JSON.stringify(payload);\n      } catch (e) {\n        // In case, despite all our efforts to keep `payload` circular-dependency-free, `JSON.strinify()` still\n        // fails, we try again after normalizing it again with infinite normalization depth. This of course has a\n        // performance impact but in this case a performance hit is better than throwing.\n        stringifiedPayload = JSON.stringify(normalize(payload));\n      }\n      append(stringifiedPayload);\n    }\n  }\n\n  return typeof parts === 'string' ? parts : concatBuffers(parts);\n}\n\nfunction concatBuffers(buffers: Uint8Array[]): Uint8Array {\n  const totalLength = buffers.reduce((acc, buf) => acc + buf.length, 0);\n\n  const merged = new Uint8Array(totalLength);\n  let offset = 0;\n  for (const buffer of buffers) {\n    merged.set(buffer, offset);\n    offset += buffer.length;\n  }\n\n  return merged;\n}\n\nexport interface TextDecoderInternal {\n  decode(input?: Uint8Array): string;\n}\n\n/**\n * Parses an envelope\n */\nexport function parseEnvelope(\n  env: string | Uint8Array,\n  textEncoder: TextEncoderInternal,\n  textDecoder: TextDecoderInternal,\n): Envelope {\n  let buffer = typeof env === 'string' ? textEncoder.encode(env) : env;\n\n  function readBinary(length: number): Uint8Array {\n    const bin = buffer.subarray(0, length);\n    // Replace the buffer with the remaining data excluding trailing newline\n    buffer = buffer.subarray(length + 1);\n    return bin;\n  }\n\n  function readJson<T>(): T {\n    let i = buffer.indexOf(0xa);\n    // If we couldn't find a newline, we must have found the end of the buffer\n    if (i < 0) {\n      i = buffer.length;\n    }\n\n    return JSON.parse(textDecoder.decode(readBinary(i))) as T;\n  }\n\n  const envelopeHeader = readJson<BaseEnvelopeHeaders>();\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const items: [any, any][] = [];\n\n  while (buffer.length) {\n    const itemHeader = readJson<BaseEnvelopeItemHeaders>();\n    const binaryLength = typeof itemHeader.length === 'number' ? itemHeader.length : undefined;\n\n    items.push([itemHeader, binaryLength ? readBinary(binaryLength) : readJson()]);\n  }\n\n  return [envelopeHeader, items];\n}\n\n/**\n * Creates attachment envelope items\n */\nexport function createAttachmentEnvelopeItem(\n  attachment: Attachment,\n  textEncoder?: TextEncoderInternal,\n): AttachmentItem {\n  const buffer = typeof attachment.data === 'string' ? encodeUTF8(attachment.data, textEncoder) : attachment.data;\n\n  return [\n    dropUndefinedKeys({\n      type: 'attachment',\n      length: buffer.length,\n      filename: attachment.filename,\n      content_type: attachment.contentType,\n      attachment_type: attachment.attachmentType,\n    }),\n    buffer,\n  ];\n}\n\nconst ITEM_TYPE_TO_DATA_CATEGORY_MAP: Record<EnvelopeItemType, DataCategory> = {\n  session: 'session',\n  sessions: 'session',\n  attachment: 'attachment',\n  transaction: 'transaction',\n  event: 'error',\n  client_report: 'internal',\n  user_report: 'default',\n  profile: 'profile',\n  replay_event: 'replay',\n  replay_recording: 'replay',\n  check_in: 'monitor',\n};\n\n/**\n * Maps the type of an envelope item to a data category.\n */\nexport function envelopeItemTypeToDataCategory(type: EnvelopeItemType): DataCategory {\n  return ITEM_TYPE_TO_DATA_CATEGORY_MAP[type];\n}\n\n/** Extracts the minimal SDK info from from the metadata or an events */\nexport function getSdkMetadataForEnvelopeHeader(metadataOrEvent?: SdkMetadata | Event): SdkInfo | undefined {\n  if (!metadataOrEvent || !metadataOrEvent.sdk) {\n    return;\n  }\n  const { name, version } = metadataOrEvent.sdk;\n  return { name, version };\n}\n\n/**\n * Creates event envelope headers, based on event, sdk info and tunnel\n * Note: This function was extracted from the core package to make it available in Replay\n */\nexport function createEventEnvelopeHeaders(\n  event: Event,\n  sdkInfo: SdkInfo | undefined,\n  tunnel: string | undefined,\n  dsn: DsnComponents,\n): EventEnvelopeHeaders {\n  const dynamicSamplingContext = event.sdkProcessingMetadata && event.sdkProcessingMetadata.dynamicSamplingContext;\n  return {\n    event_id: event.event_id as string,\n    sent_at: new Date().toISOString(),\n    ...(sdkInfo && { sdk: sdkInfo }),\n    ...(!!tunnel && { dsn: dsnToString(dsn) }),\n    ...(dynamicSamplingContext && {\n      trace: dropUndefinedKeys({ ...dynamicSamplingContext }),\n    }),\n  };\n}\n","export default function _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}","import setPrototypeOf from \"./setPrototypeOf.js\";\nimport isNativeReflectConstruct from \"./isNativeReflectConstruct.js\";\nexport default function _construct(Parent, args, Class) {\n  if (isNativeReflectConstruct()) {\n    _construct = Reflect.construct.bind();\n  } else {\n    _construct = function _construct(Parent, args, Class) {\n      var a = [null];\n      a.push.apply(a, args);\n      var Constructor = Function.bind.apply(Parent, a);\n      var instance = new Constructor();\n      if (Class) setPrototypeOf(instance, Class.prototype);\n      return instance;\n    };\n  }\n  return _construct.apply(null, arguments);\n}","export default function _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}","import getPrototypeOf from \"./getPrototypeOf.js\";\nimport setPrototypeOf from \"./setPrototypeOf.js\";\nimport isNativeFunction from \"./isNativeFunction.js\";\nimport construct from \"./construct.js\";\nexport default function _wrapNativeSuper(Class) {\n  var _cache = typeof Map === \"function\" ? new Map() : undefined;\n  _wrapNativeSuper = function _wrapNativeSuper(Class) {\n    if (Class === null || !isNativeFunction(Class)) return Class;\n    if (typeof Class !== \"function\") {\n      throw new TypeError(\"Super expression must either be null or a function\");\n    }\n    if (typeof _cache !== \"undefined\") {\n      if (_cache.has(Class)) return _cache.get(Class);\n      _cache.set(Class, Wrapper);\n    }\n    function Wrapper() {\n      return construct(Class, arguments, getPrototypeOf(this).constructor);\n    }\n    Wrapper.prototype = Object.create(Class.prototype, {\n      constructor: {\n        value: Wrapper,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n    return setPrototypeOf(Wrapper, Class);\n  };\n  return _wrapNativeSuper(Class);\n}","export default function _isNativeFunction(fn) {\n  return Function.toString.call(fn).indexOf(\"[native code]\") !== -1;\n}","import type { ConsoleLevel } from './logger';\n\n/** An error emitted by Sentry SDKs and related utilities. */\nexport class SentryError extends Error {\n  /** Display name of this error instance. */\n  public name: string;\n\n  public logLevel: ConsoleLevel;\n\n  public constructor(public message: string, logLevel: ConsoleLevel = 'warn') {\n    super(message);\n\n    this.name = new.target.prototype.constructor.name;\n    // This sets the prototype to be `Error`, not `SentryError`. It's unclear why we do this, but commenting this line\n    // out causes various (seemingly totally unrelated) playwright tests consistently time out. FYI, this makes\n    // instances of `SentryError` fail `obj instanceof SentryError` checks.\n    Object.setPrototypeOf(this, new.target.prototype);\n    this.logLevel = logLevel;\n  }\n}\n","export default function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return self;\n}","import type { ClientOptions, DsnComponents, DsnLike, SdkInfo } from '@sentry/types';\nimport { dsnToString, makeDsn, urlEncode } from '@sentry/utils';\n\nconst SENTRY_API_VERSION = '7';\n\n/** Returns the prefix to construct Sentry ingestion API endpoints. */\nfunction getBaseApiEndpoint(dsn: DsnComponents): string {\n  const protocol = dsn.protocol ? `${dsn.protocol}:` : '';\n  const port = dsn.port ? `:${dsn.port}` : '';\n  return `${protocol}//${dsn.host}${port}${dsn.path ? `/${dsn.path}` : ''}/api/`;\n}\n\n/** Returns the ingest API endpoint for target. */\nfunction _getIngestEndpoint(dsn: DsnComponents): string {\n  return `${getBaseApiEndpoint(dsn)}${dsn.projectId}/envelope/`;\n}\n\n/** Returns a URL-encoded string with auth config suitable for a query string. */\nfunction _encodedAuth(dsn: DsnComponents, sdkInfo: SdkInfo | undefined): string {\n  return urlEncode({\n    // We send only the minimum set of required information. See\n    // https://github.com/getsentry/sentry-javascript/issues/2572.\n    sentry_key: dsn.publicKey,\n    sentry_version: SENTRY_API_VERSION,\n    ...(sdkInfo && { sentry_client: `${sdkInfo.name}/${sdkInfo.version}` }),\n  });\n}\n\n/**\n * Returns the envelope endpoint URL with auth in the query string.\n *\n * Sending auth as part of the query string and not as custom HTTP headers avoids CORS preflight requests.\n */\nexport function getEnvelopeEndpointWithUrlEncodedAuth(\n  dsn: DsnComponents,\n  // TODO (v8): Remove `tunnelOrOptions` in favor of `options`, and use the substitute code below\n  // options: ClientOptions = {} as ClientOptions,\n  tunnelOrOptions: string | ClientOptions = {} as ClientOptions,\n): string {\n  // TODO (v8): Use this code instead\n  // const { tunnel, _metadata = {} } = options;\n  // return tunnel ? tunnel : `${_getIngestEndpoint(dsn)}?${_encodedAuth(dsn, _metadata.sdk)}`;\n\n  const tunnel = typeof tunnelOrOptions === 'string' ? tunnelOrOptions : tunnelOrOptions.tunnel;\n  const sdkInfo =\n    typeof tunnelOrOptions === 'string' || !tunnelOrOptions._metadata ? undefined : tunnelOrOptions._metadata.sdk;\n\n  return tunnel ? tunnel : `${_getIngestEndpoint(dsn)}?${_encodedAuth(dsn, sdkInfo)}`;\n}\n\n/** Returns the url to the report dialog endpoint. */\nexport function getReportDialogEndpoint(\n  dsnLike: DsnLike,\n  dialogOptions: {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    [key: string]: any;\n    user?: { name?: string; email?: string };\n  },\n): string {\n  const dsn = makeDsn(dsnLike);\n  if (!dsn) {\n    return '';\n  }\n\n  const endpoint = `${getBaseApiEndpoint(dsn)}embed/error-page/`;\n\n  let encodedOptions = `dsn=${dsnToString(dsn)}`;\n  for (const key in dialogOptions) {\n    if (key === 'dsn') {\n      continue;\n    }\n\n    if (key === 'user') {\n      const user = dialogOptions.user;\n      if (!user) {\n        continue;\n      }\n      if (user.name) {\n        encodedOptions += `&name=${encodeURIComponent(user.name)}`;\n      }\n      if (user.email) {\n        encodedOptions += `&email=${encodeURIComponent(user.email)}`;\n      }\n    } else {\n      encodedOptions += `&${encodeURIComponent(key)}=${encodeURIComponent(dialogOptions[key] as string)}`;\n    }\n  }\n\n  return `${endpoint}?${encodedOptions}`;\n}\n","import type { Integration, Options } from '@sentry/types';\nimport { arrayify, logger } from '@sentry/utils';\n\nimport { getCurrentHub } from './hub';\nimport { addGlobalEventProcessor } from './scope';\n\ndeclare module '@sentry/types' {\n  interface Integration {\n    isDefaultInstance?: boolean;\n  }\n}\n\nexport const installedIntegrations: string[] = [];\n\n/** Map of integrations assigned to a client */\nexport type IntegrationIndex = {\n  [key: string]: Integration;\n};\n\n/**\n * Remove duplicates from the given array, preferring the last instance of any duplicate. Not guaranteed to\n * preseve the order of integrations in the array.\n *\n * @private\n */\nfunction filterDuplicates(integrations: Integration[]): Integration[] {\n  const integrationsByName: { [key: string]: Integration } = {};\n\n  integrations.forEach(currentInstance => {\n    const { name } = currentInstance;\n\n    const existingInstance = integrationsByName[name];\n\n    // We want integrations later in the array to overwrite earlier ones of the same type, except that we never want a\n    // default instance to overwrite an existing user instance\n    if (existingInstance && !existingInstance.isDefaultInstance && currentInstance.isDefaultInstance) {\n      return;\n    }\n\n    integrationsByName[name] = currentInstance;\n  });\n\n  return Object.keys(integrationsByName).map(k => integrationsByName[k]);\n}\n\n/** Gets integrations to install */\nexport function getIntegrationsToSetup(options: Options): Integration[] {\n  const defaultIntegrations = options.defaultIntegrations || [];\n  const userIntegrations = options.integrations;\n\n  // We flag default instances, so that later we can tell them apart from any user-created instances of the same class\n  defaultIntegrations.forEach(integration => {\n    integration.isDefaultInstance = true;\n  });\n\n  let integrations: Integration[];\n\n  if (Array.isArray(userIntegrations)) {\n    integrations = [...defaultIntegrations, ...userIntegrations];\n  } else if (typeof userIntegrations === 'function') {\n    integrations = arrayify(userIntegrations(defaultIntegrations));\n  } else {\n    integrations = defaultIntegrations;\n  }\n\n  const finalIntegrations = filterDuplicates(integrations);\n\n  // The `Debug` integration prints copies of the `event` and `hint` which will be passed to `beforeSend` or\n  // `beforeSendTransaction`. It therefore has to run after all other integrations, so that the changes of all event\n  // processors will be reflected in the printed values. For lack of a more elegant way to guarantee that, we therefore\n  // locate it and, assuming it exists, pop it out of its current spot and shove it onto the end of the array.\n  const debugIndex = findIndex(finalIntegrations, integration => integration.name === 'Debug');\n  if (debugIndex !== -1) {\n    const [debugInstance] = finalIntegrations.splice(debugIndex, 1);\n    finalIntegrations.push(debugInstance);\n  }\n\n  return finalIntegrations;\n}\n\n/**\n * Given a list of integration instances this installs them all. When `withDefaults` is set to `true` then all default\n * integrations are added unless they were already provided before.\n * @param integrations array of integration instances\n * @param withDefault should enable default integrations\n */\nexport function setupIntegrations(integrations: Integration[]): IntegrationIndex {\n  const integrationIndex: IntegrationIndex = {};\n\n  integrations.forEach(integration => {\n    // guard against empty provided integrations\n    if (integration) {\n      setupIntegration(integration, integrationIndex);\n    }\n  });\n\n  return integrationIndex;\n}\n\n/** Setup a single integration.  */\nexport function setupIntegration(integration: Integration, integrationIndex: IntegrationIndex): void {\n  integrationIndex[integration.name] = integration;\n\n  if (installedIntegrations.indexOf(integration.name) === -1) {\n    integration.setupOnce(addGlobalEventProcessor, getCurrentHub);\n    installedIntegrations.push(integration.name);\n    __DEBUG_BUILD__ && logger.log(`Integration installed: ${integration.name}`);\n  }\n}\n\n// Polyfill for Array.findIndex(), which is not supported in ES5\nfunction findIndex<T>(arr: T[], callback: (item: T) => boolean): number {\n  for (let i = 0; i < arr.length; i++) {\n    if (callback(arr[i]) === true) {\n      return i;\n    }\n  }\n\n  return -1;\n}\n","import type { ClientOptions, Event, EventHint, StackFrame, StackParser } from '@sentry/types';\nimport { dateTimestampInSeconds, GLOBAL_OBJ, normalize, resolvedSyncPromise, truncate, uuid4 } from '@sentry/utils';\n\nimport { DEFAULT_ENVIRONMENT } from '../constants';\nimport { Scope } from '../scope';\n\n/**\n * Adds common information to events.\n *\n * The information includes release and environment from `options`,\n * breadcrumbs and context (extra, tags and user) from the scope.\n *\n * Information that is already present in the event is never overwritten. For\n * nested objects, such as the context, keys are merged.\n *\n * Note: This also triggers callbacks for `addGlobalEventProcessor`, but not `beforeSend`.\n *\n * @param event The original event.\n * @param hint May contain additional information about the original exception.\n * @param scope A scope containing event metadata.\n * @returns A new event with more information.\n * @hidden\n */\nexport function prepareEvent(\n  options: ClientOptions,\n  event: Event,\n  hint: EventHint,\n  scope?: Scope,\n): PromiseLike<Event | null> {\n  const { normalizeDepth = 3, normalizeMaxBreadth = 1_000 } = options;\n  const prepared: Event = {\n    ...event,\n    event_id: event.event_id || hint.event_id || uuid4(),\n    timestamp: event.timestamp || dateTimestampInSeconds(),\n  };\n  const integrations = hint.integrations || options.integrations.map(i => i.name);\n\n  applyClientOptions(prepared, options);\n  applyIntegrationsMetadata(prepared, integrations);\n\n  // Only put debug IDs onto frames for error events.\n  if (event.type === undefined) {\n    applyDebugIds(prepared, options.stackParser);\n  }\n\n  // If we have scope given to us, use it as the base for further modifications.\n  // This allows us to prevent unnecessary copying of data if `captureContext` is not provided.\n  let finalScope = scope;\n  if (hint.captureContext) {\n    finalScope = Scope.clone(finalScope).update(hint.captureContext);\n  }\n\n  // We prepare the result here with a resolved Event.\n  let result = resolvedSyncPromise<Event | null>(prepared);\n\n  // This should be the last thing called, since we want that\n  // {@link Hub.addEventProcessor} gets the finished prepared event.\n  //\n  // We need to check for the existence of `finalScope.getAttachments`\n  // because `getAttachments` can be undefined if users are using an older version\n  // of `@sentry/core` that does not have the `getAttachments` method.\n  // See: https://github.com/getsentry/sentry-javascript/issues/5229\n  if (finalScope) {\n    // Collect attachments from the hint and scope\n    if (finalScope.getAttachments) {\n      const attachments = [...(hint.attachments || []), ...finalScope.getAttachments()];\n\n      if (attachments.length) {\n        hint.attachments = attachments;\n      }\n    }\n\n    // In case we have a hub we reassign it.\n    result = finalScope.applyToEvent(prepared, hint);\n  }\n\n  return result.then(evt => {\n    if (evt) {\n      // We apply the debug_meta field only after all event processors have ran, so that if any event processors modified\n      // file names (e.g.the RewriteFrames integration) the filename -> debug ID relationship isn't destroyed.\n      // This should not cause any PII issues, since we're only moving data that is already on the event and not adding\n      // any new data\n      applyDebugMeta(evt);\n    }\n\n    if (typeof normalizeDepth === 'number' && normalizeDepth > 0) {\n      return normalizeEvent(evt, normalizeDepth, normalizeMaxBreadth);\n    }\n    return evt;\n  });\n}\n\n/**\n *  Enhances event using the client configuration.\n *  It takes care of all \"static\" values like environment, release and `dist`,\n *  as well as truncating overly long values.\n * @param event event instance to be enhanced\n */\nfunction applyClientOptions(event: Event, options: ClientOptions): void {\n  const { environment, release, dist, maxValueLength = 250 } = options;\n\n  if (!('environment' in event)) {\n    event.environment = 'environment' in options ? environment : DEFAULT_ENVIRONMENT;\n  }\n\n  if (event.release === undefined && release !== undefined) {\n    event.release = release;\n  }\n\n  if (event.dist === undefined && dist !== undefined) {\n    event.dist = dist;\n  }\n\n  if (event.message) {\n    event.message = truncate(event.message, maxValueLength);\n  }\n\n  const exception = event.exception && event.exception.values && event.exception.values[0];\n  if (exception && exception.value) {\n    exception.value = truncate(exception.value, maxValueLength);\n  }\n\n  const request = event.request;\n  if (request && request.url) {\n    request.url = truncate(request.url, maxValueLength);\n  }\n}\n\nconst debugIdStackParserCache = new WeakMap<StackParser, Map<string, StackFrame[]>>();\n\n/**\n * Puts debug IDs into the stack frames of an error event.\n */\nexport function applyDebugIds(event: Event, stackParser: StackParser): void {\n  const debugIdMap = GLOBAL_OBJ._sentryDebugIds;\n\n  if (!debugIdMap) {\n    return;\n  }\n\n  let debugIdStackFramesCache: Map<string, StackFrame[]>;\n  const cachedDebugIdStackFrameCache = debugIdStackParserCache.get(stackParser);\n  if (cachedDebugIdStackFrameCache) {\n    debugIdStackFramesCache = cachedDebugIdStackFrameCache;\n  } else {\n    debugIdStackFramesCache = new Map<string, StackFrame[]>();\n    debugIdStackParserCache.set(stackParser, debugIdStackFramesCache);\n  }\n\n  // Build a map of filename -> debug_id\n  const filenameDebugIdMap = Object.keys(debugIdMap).reduce<Record<string, string>>((acc, debugIdStackTrace) => {\n    let parsedStack: StackFrame[];\n    const cachedParsedStack = debugIdStackFramesCache.get(debugIdStackTrace);\n    if (cachedParsedStack) {\n      parsedStack = cachedParsedStack;\n    } else {\n      parsedStack = stackParser(debugIdStackTrace);\n      debugIdStackFramesCache.set(debugIdStackTrace, parsedStack);\n    }\n\n    for (let i = parsedStack.length - 1; i >= 0; i--) {\n      const stackFrame = parsedStack[i];\n      if (stackFrame.filename) {\n        acc[stackFrame.filename] = debugIdMap[debugIdStackTrace];\n        break;\n      }\n    }\n    return acc;\n  }, {});\n\n  try {\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    event!.exception!.values!.forEach(exception => {\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      exception.stacktrace!.frames!.forEach(frame => {\n        if (frame.filename) {\n          frame.debug_id = filenameDebugIdMap[frame.filename];\n        }\n      });\n    });\n  } catch (e) {\n    // To save bundle size we're just try catching here instead of checking for the existence of all the different objects.\n  }\n}\n\n/**\n * Moves debug IDs from the stack frames of an error event into the debug_meta field.\n */\nexport function applyDebugMeta(event: Event): void {\n  // Extract debug IDs and filenames from the stack frames on the event.\n  const filenameDebugIdMap: Record<string, string> = {};\n  try {\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    event.exception!.values!.forEach(exception => {\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      exception.stacktrace!.frames!.forEach(frame => {\n        if (frame.debug_id) {\n          if (frame.abs_path) {\n            filenameDebugIdMap[frame.abs_path] = frame.debug_id;\n          } else if (frame.filename) {\n            filenameDebugIdMap[frame.filename] = frame.debug_id;\n          }\n          delete frame.debug_id;\n        }\n      });\n    });\n  } catch (e) {\n    // To save bundle size we're just try catching here instead of checking for the existence of all the different objects.\n  }\n\n  if (Object.keys(filenameDebugIdMap).length === 0) {\n    return;\n  }\n\n  // Fill debug_meta information\n  event.debug_meta = event.debug_meta || {};\n  event.debug_meta.images = event.debug_meta.images || [];\n  const images = event.debug_meta.images;\n  Object.keys(filenameDebugIdMap).forEach(filename => {\n    images.push({\n      type: 'sourcemap',\n      code_file: filename,\n      debug_id: filenameDebugIdMap[filename],\n    });\n  });\n}\n\n/**\n * This function adds all used integrations to the SDK info in the event.\n * @param event The event that will be filled with all integrations.\n */\nfunction applyIntegrationsMetadata(event: Event, integrationNames: string[]): void {\n  if (integrationNames.length > 0) {\n    event.sdk = event.sdk || {};\n    event.sdk.integrations = [...(event.sdk.integrations || []), ...integrationNames];\n  }\n}\n\n/**\n * Applies `normalize` function on necessary `Event` attributes to make them safe for serialization.\n * Normalized keys:\n * - `breadcrumbs.data`\n * - `user`\n * - `contexts`\n * - `extra`\n * @param event Event\n * @returns Normalized event\n */\nfunction normalizeEvent(event: Event | null, depth: number, maxBreadth: number): Event | null {\n  if (!event) {\n    return null;\n  }\n\n  const normalized: Event = {\n    ...event,\n    ...(event.breadcrumbs && {\n      breadcrumbs: event.breadcrumbs.map(b => ({\n        ...b,\n        ...(b.data && {\n          data: normalize(b.data, depth, maxBreadth),\n        }),\n      })),\n    }),\n    ...(event.user && {\n      user: normalize(event.user, depth, maxBreadth),\n    }),\n    ...(event.contexts && {\n      contexts: normalize(event.contexts, depth, maxBreadth),\n    }),\n    ...(event.extra && {\n      extra: normalize(event.extra, depth, maxBreadth),\n    }),\n  };\n\n  // event.contexts.trace stores information about a Transaction. Similarly,\n  // event.spans[] stores information about child Spans. Given that a\n  // Transaction is conceptually a Span, normalization should apply to both\n  // Transactions and Spans consistently.\n  // For now the decision is to skip normalization of Transactions and Spans,\n  // so this block overwrites the normalized event to add back the original\n  // Transaction information prior to normalization.\n  if (event.contexts && event.contexts.trace && normalized.contexts) {\n    normalized.contexts.trace = event.contexts.trace;\n\n    // event.contexts.trace.data may contain circular/dangerous data so we need to normalize it\n    if (event.contexts.trace.data) {\n      normalized.contexts.trace.data = normalize(event.contexts.trace.data, depth, maxBreadth);\n    }\n  }\n\n  // event.spans[].data may contain circular/dangerous data so we need to normalize it\n  if (event.spans) {\n    normalized.spans = event.spans.map(span => {\n      // We cannot use the spread operator here because `toJSON` on `span` is non-enumerable\n      if (span.data) {\n        span.data = normalize(span.data, depth, maxBreadth);\n      }\n      return span;\n    });\n  }\n\n  return normalized;\n}\n","/* eslint-disable max-lines */\nimport type {\n  Breadcrumb,\n  BreadcrumbHint,\n  Client,\n  ClientOptions,\n  DataCategory,\n  DsnComponents,\n  DynamicSamplingContext,\n  Envelope,\n  ErrorEvent,\n  Event,\n  EventDropReason,\n  EventHint,\n  Integration,\n  IntegrationClass,\n  Outcome,\n  SdkMetadata,\n  Session,\n  SessionAggregates,\n  Severity,\n  SeverityLevel,\n  Transaction,\n  TransactionEvent,\n  Transport,\n  TransportMakeRequestResponse,\n} from '@sentry/types';\nimport {\n  addItemToEnvelope,\n  checkOrSetAlreadyCaught,\n  createAttachmentEnvelopeItem,\n  isPlainObject,\n  isPrimitive,\n  isThenable,\n  logger,\n  makeDsn,\n  rejectedSyncPromise,\n  resolvedSyncPromise,\n  SentryError,\n  SyncPromise,\n} from '@sentry/utils';\n\nimport { getEnvelopeEndpointWithUrlEncodedAuth } from './api';\nimport { createEventEnvelope, createSessionEnvelope } from './envelope';\nimport type { IntegrationIndex } from './integration';\nimport { setupIntegration, setupIntegrations } from './integration';\nimport type { Scope } from './scope';\nimport { updateSession } from './session';\nimport { prepareEvent } from './utils/prepareEvent';\n\nconst ALREADY_SEEN_ERROR = \"Not capturing exception because it's already been captured.\";\n\n/**\n * Base implementation for all JavaScript SDK clients.\n *\n * Call the constructor with the corresponding options\n * specific to the client subclass. To access these options later, use\n * {@link Client.getOptions}.\n *\n * If a Dsn is specified in the options, it will be parsed and stored. Use\n * {@link Client.getDsn} to retrieve the Dsn at any moment. In case the Dsn is\n * invalid, the constructor will throw a {@link SentryException}. Note that\n * without a valid Dsn, the SDK will not send any events to Sentry.\n *\n * Before sending an event, it is passed through\n * {@link BaseClient._prepareEvent} to add SDK information and scope data\n * (breadcrumbs and context). To add more custom information, override this\n * method and extend the resulting prepared event.\n *\n * To issue automatically created events (e.g. via instrumentation), use\n * {@link Client.captureEvent}. It will prepare the event and pass it through\n * the callback lifecycle. To issue auto-breadcrumbs, use\n * {@link Client.addBreadcrumb}.\n *\n * @example\n * class NodeClient extends BaseClient<NodeOptions> {\n *   public constructor(options: NodeOptions) {\n *     super(options);\n *   }\n *\n *   // ...\n * }\n */\nexport abstract class BaseClient<O extends ClientOptions> implements Client<O> {\n  /** Options passed to the SDK. */\n  protected readonly _options: O;\n\n  /** The client Dsn, if specified in options. Without this Dsn, the SDK will be disabled. */\n  protected readonly _dsn?: DsnComponents;\n\n  protected readonly _transport?: Transport;\n\n  /** Array of set up integrations. */\n  protected _integrations: IntegrationIndex = {};\n\n  /** Indicates whether this client's integrations have been set up. */\n  protected _integrationsInitialized: boolean = false;\n\n  /** Number of calls being processed */\n  protected _numProcessing: number = 0;\n\n  /** Holds flushable  */\n  private _outcomes: { [key: string]: number } = {};\n\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  private _hooks: Record<string, Function[]> = {};\n\n  /**\n   * Initializes this client instance.\n   *\n   * @param options Options for the client.\n   */\n  protected constructor(options: O) {\n    this._options = options;\n\n    if (options.dsn) {\n      this._dsn = makeDsn(options.dsn);\n    } else {\n      __DEBUG_BUILD__ && logger.warn('No DSN provided, client will not do anything.');\n    }\n\n    if (this._dsn) {\n      const url = getEnvelopeEndpointWithUrlEncodedAuth(this._dsn, options);\n      this._transport = options.transport({\n        recordDroppedEvent: this.recordDroppedEvent.bind(this),\n        ...options.transportOptions,\n        url,\n      });\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types\n  public captureException(exception: any, hint?: EventHint, scope?: Scope): string | undefined {\n    // ensure we haven't captured this very object before\n    if (checkOrSetAlreadyCaught(exception)) {\n      __DEBUG_BUILD__ && logger.log(ALREADY_SEEN_ERROR);\n      return;\n    }\n\n    let eventId: string | undefined = hint && hint.event_id;\n\n    this._process(\n      this.eventFromException(exception, hint)\n        .then(event => this._captureEvent(event, hint, scope))\n        .then(result => {\n          eventId = result;\n        }),\n    );\n\n    return eventId;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public captureMessage(\n    message: string,\n    // eslint-disable-next-line deprecation/deprecation\n    level?: Severity | SeverityLevel,\n    hint?: EventHint,\n    scope?: Scope,\n  ): string | undefined {\n    let eventId: string | undefined = hint && hint.event_id;\n\n    const promisedEvent = isPrimitive(message)\n      ? this.eventFromMessage(String(message), level, hint)\n      : this.eventFromException(message, hint);\n\n    this._process(\n      promisedEvent\n        .then(event => this._captureEvent(event, hint, scope))\n        .then(result => {\n          eventId = result;\n        }),\n    );\n\n    return eventId;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public captureEvent(event: Event, hint?: EventHint, scope?: Scope): string | undefined {\n    // ensure we haven't captured this very object before\n    if (hint && hint.originalException && checkOrSetAlreadyCaught(hint.originalException)) {\n      __DEBUG_BUILD__ && logger.log(ALREADY_SEEN_ERROR);\n      return;\n    }\n\n    let eventId: string | undefined = hint && hint.event_id;\n\n    this._process(\n      this._captureEvent(event, hint, scope).then(result => {\n        eventId = result;\n      }),\n    );\n\n    return eventId;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public captureSession(session: Session): void {\n    if (!this._isEnabled()) {\n      __DEBUG_BUILD__ && logger.warn('SDK not enabled, will not capture session.');\n      return;\n    }\n\n    if (!(typeof session.release === 'string')) {\n      __DEBUG_BUILD__ && logger.warn('Discarded session because of missing or non-string release');\n    } else {\n      this.sendSession(session);\n      // After sending, we set init false to indicate it's not the first occurrence\n      updateSession(session, { init: false });\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getDsn(): DsnComponents | undefined {\n    return this._dsn;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getOptions(): O {\n    return this._options;\n  }\n\n  /**\n   * @see SdkMetadata in @sentry/types\n   *\n   * @return The metadata of the SDK\n   */\n  public getSdkMetadata(): SdkMetadata | undefined {\n    return this._options._metadata;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getTransport(): Transport | undefined {\n    return this._transport;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public flush(timeout?: number): PromiseLike<boolean> {\n    const transport = this._transport;\n    if (transport) {\n      return this._isClientDoneProcessing(timeout).then(clientFinished => {\n        return transport.flush(timeout).then(transportFlushed => clientFinished && transportFlushed);\n      });\n    } else {\n      return resolvedSyncPromise(true);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public close(timeout?: number): PromiseLike<boolean> {\n    return this.flush(timeout).then(result => {\n      this.getOptions().enabled = false;\n      return result;\n    });\n  }\n\n  /**\n   * Sets up the integrations\n   */\n  public setupIntegrations(): void {\n    if (this._isEnabled() && !this._integrationsInitialized) {\n      this._integrations = setupIntegrations(this._options.integrations);\n      this._integrationsInitialized = true;\n    }\n  }\n\n  /**\n   * Gets an installed integration by its `id`.\n   *\n   * @returns The installed integration or `undefined` if no integration with that `id` was installed.\n   */\n  public getIntegrationById(integrationId: string): Integration | undefined {\n    return this._integrations[integrationId];\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getIntegration<T extends Integration>(integration: IntegrationClass<T>): T | null {\n    try {\n      return (this._integrations[integration.id] as T) || null;\n    } catch (_oO) {\n      __DEBUG_BUILD__ && logger.warn(`Cannot retrieve integration ${integration.id} from the current Client`);\n      return null;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public addIntegration(integration: Integration): void {\n    setupIntegration(integration, this._integrations);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public sendEvent(event: Event, hint: EventHint = {}): void {\n    if (this._dsn) {\n      let env = createEventEnvelope(event, this._dsn, this._options._metadata, this._options.tunnel);\n\n      for (const attachment of hint.attachments || []) {\n        env = addItemToEnvelope(\n          env,\n          createAttachmentEnvelopeItem(\n            attachment,\n            this._options.transportOptions && this._options.transportOptions.textEncoder,\n          ),\n        );\n      }\n\n      const promise = this._sendEnvelope(env);\n      if (promise) {\n        promise.then(sendResponse => this.emit('afterSendEvent', event, sendResponse), null);\n      }\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public sendSession(session: Session | SessionAggregates): void {\n    if (this._dsn) {\n      const env = createSessionEnvelope(session, this._dsn, this._options._metadata, this._options.tunnel);\n      void this._sendEnvelope(env);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public recordDroppedEvent(reason: EventDropReason, category: DataCategory, _event?: Event): void {\n    // Note: we use `event` in replay, where we overwrite this hook.\n\n    if (this._options.sendClientReports) {\n      // We want to track each category (error, transaction, session, replay_event) separately\n      // but still keep the distinction between different type of outcomes.\n      // We could use nested maps, but it's much easier to read and type this way.\n      // A correct type for map-based implementation if we want to go that route\n      // would be `Partial<Record<SentryRequestType, Partial<Record<Outcome, number>>>>`\n      // With typescript 4.1 we could even use template literal types\n      const key = `${reason}:${category}`;\n      __DEBUG_BUILD__ && logger.log(`Adding outcome: \"${key}\"`);\n\n      // The following works because undefined + 1 === NaN and NaN is falsy\n      this._outcomes[key] = this._outcomes[key] + 1 || 1;\n    }\n  }\n\n  // Keep on() & emit() signatures in sync with types' client.ts interface\n\n  /** @inheritdoc */\n  public on(hook: 'startTransaction' | 'finishTransaction', callback: (transaction: Transaction) => void): void;\n\n  /** @inheritdoc */\n  public on(hook: 'beforeEnvelope', callback: (envelope: Envelope) => void): void;\n\n  /** @inheritdoc */\n  public on(\n    hook: 'afterSendEvent',\n    callback: (event: Event, sendResponse: TransportMakeRequestResponse | void) => void,\n  ): void;\n\n  /** @inheritdoc */\n  public on(hook: 'beforeAddBreadcrumb', callback: (breadcrumb: Breadcrumb, hint?: BreadcrumbHint) => void): void;\n\n  /** @inheritdoc */\n  public on(hook: 'createDsc', callback: (dsc: DynamicSamplingContext) => void): void;\n\n  /** @inheritdoc */\n  public on(hook: string, callback: unknown): void {\n    if (!this._hooks[hook]) {\n      this._hooks[hook] = [];\n    }\n\n    // @ts-ignore We assue the types are correct\n    this._hooks[hook].push(callback);\n  }\n\n  /** @inheritdoc */\n  public emit(hook: 'startTransaction' | 'finishTransaction', transaction: Transaction): void;\n\n  /** @inheritdoc */\n  public emit(hook: 'beforeEnvelope', envelope: Envelope): void;\n\n  /** @inheritdoc */\n  public emit(hook: 'afterSendEvent', event: Event, sendResponse: TransportMakeRequestResponse | void): void;\n\n  /** @inheritdoc */\n  public emit(hook: 'beforeAddBreadcrumb', breadcrumb: Breadcrumb, hint?: BreadcrumbHint): void;\n\n  /** @inheritdoc */\n  public emit(hook: 'createDsc', dsc: DynamicSamplingContext): void;\n\n  /** @inheritdoc */\n  public emit(hook: string, ...rest: unknown[]): void {\n    if (this._hooks[hook]) {\n      // @ts-ignore we cannot enforce the callback to match the hook\n      this._hooks[hook].forEach(callback => callback(...rest));\n    }\n  }\n\n  /** Updates existing session based on the provided event */\n  protected _updateSessionFromEvent(session: Session, event: Event): void {\n    let crashed = false;\n    let errored = false;\n    const exceptions = event.exception && event.exception.values;\n\n    if (exceptions) {\n      errored = true;\n\n      for (const ex of exceptions) {\n        const mechanism = ex.mechanism;\n        if (mechanism && mechanism.handled === false) {\n          crashed = true;\n          break;\n        }\n      }\n    }\n\n    // A session is updated and that session update is sent in only one of the two following scenarios:\n    // 1. Session with non terminal status and 0 errors + an error occurred -> Will set error count to 1 and send update\n    // 2. Session with non terminal status and 1 error + a crash occurred -> Will set status crashed and send update\n    const sessionNonTerminal = session.status === 'ok';\n    const shouldUpdateAndSend = (sessionNonTerminal && session.errors === 0) || (sessionNonTerminal && crashed);\n\n    if (shouldUpdateAndSend) {\n      updateSession(session, {\n        ...(crashed && { status: 'crashed' }),\n        errors: session.errors || Number(errored || crashed),\n      });\n      this.captureSession(session);\n    }\n  }\n\n  /**\n   * Determine if the client is finished processing. Returns a promise because it will wait `timeout` ms before saying\n   * \"no\" (resolving to `false`) in order to give the client a chance to potentially finish first.\n   *\n   * @param timeout The time, in ms, after which to resolve to `false` if the client is still busy. Passing `0` (or not\n   * passing anything) will make the promise wait as long as it takes for processing to finish before resolving to\n   * `true`.\n   * @returns A promise which will resolve to `true` if processing is already done or finishes before the timeout, and\n   * `false` otherwise\n   */\n  protected _isClientDoneProcessing(timeout?: number): PromiseLike<boolean> {\n    return new SyncPromise(resolve => {\n      let ticked: number = 0;\n      const tick: number = 1;\n\n      const interval = setInterval(() => {\n        if (this._numProcessing == 0) {\n          clearInterval(interval);\n          resolve(true);\n        } else {\n          ticked += tick;\n          if (timeout && ticked >= timeout) {\n            clearInterval(interval);\n            resolve(false);\n          }\n        }\n      }, tick);\n    });\n  }\n\n  /** Determines whether this SDK is enabled and a valid Dsn is present. */\n  protected _isEnabled(): boolean {\n    return this.getOptions().enabled !== false && this._dsn !== undefined;\n  }\n\n  /**\n   * Adds common information to events.\n   *\n   * The information includes release and environment from `options`,\n   * breadcrumbs and context (extra, tags and user) from the scope.\n   *\n   * Information that is already present in the event is never overwritten. For\n   * nested objects, such as the context, keys are merged.\n   *\n   * @param event The original event.\n   * @param hint May contain additional information about the original exception.\n   * @param scope A scope containing event metadata.\n   * @returns A new event with more information.\n   */\n  protected _prepareEvent(event: Event, hint: EventHint, scope?: Scope): PromiseLike<Event | null> {\n    const options = this.getOptions();\n    const integrations = Object.keys(this._integrations);\n    if (!hint.integrations && integrations.length > 0) {\n      hint.integrations = integrations;\n    }\n    return prepareEvent(options, event, hint, scope);\n  }\n\n  /**\n   * Processes the event and logs an error in case of rejection\n   * @param event\n   * @param hint\n   * @param scope\n   */\n  protected _captureEvent(event: Event, hint: EventHint = {}, scope?: Scope): PromiseLike<string | undefined> {\n    return this._processEvent(event, hint, scope).then(\n      finalEvent => {\n        return finalEvent.event_id;\n      },\n      reason => {\n        if (__DEBUG_BUILD__) {\n          // If something's gone wrong, log the error as a warning. If it's just us having used a `SentryError` for\n          // control flow, log just the message (no stack) as a log-level log.\n          const sentryError = reason as SentryError;\n          if (sentryError.logLevel === 'log') {\n            logger.log(sentryError.message);\n          } else {\n            logger.warn(sentryError);\n          }\n        }\n        return undefined;\n      },\n    );\n  }\n\n  /**\n   * Processes an event (either error or message) and sends it to Sentry.\n   *\n   * This also adds breadcrumbs and context information to the event. However,\n   * platform specific meta data (such as the User's IP address) must be added\n   * by the SDK implementor.\n   *\n   *\n   * @param event The event to send to Sentry.\n   * @param hint May contain additional information about the original exception.\n   * @param scope A scope containing event metadata.\n   * @returns A SyncPromise that resolves with the event or rejects in case event was/will not be send.\n   */\n  protected _processEvent(event: Event, hint: EventHint, scope?: Scope): PromiseLike<Event> {\n    const options = this.getOptions();\n    const { sampleRate } = options;\n\n    if (!this._isEnabled()) {\n      return rejectedSyncPromise(new SentryError('SDK not enabled, will not capture event.', 'log'));\n    }\n\n    const isTransaction = isTransactionEvent(event);\n    const isError = isErrorEvent(event);\n    const eventType = event.type || 'error';\n    const beforeSendLabel = `before send for type \\`${eventType}\\``;\n\n    // 1.0 === 100% events are sent\n    // 0.0 === 0% events are sent\n    // Sampling for transaction happens somewhere else\n    if (isError && typeof sampleRate === 'number' && Math.random() > sampleRate) {\n      this.recordDroppedEvent('sample_rate', 'error', event);\n      return rejectedSyncPromise(\n        new SentryError(\n          `Discarding event because it's not included in the random sample (sampling rate = ${sampleRate})`,\n          'log',\n        ),\n      );\n    }\n\n    const dataCategory: DataCategory = eventType === 'replay_event' ? 'replay' : eventType;\n\n    return this._prepareEvent(event, hint, scope)\n      .then(prepared => {\n        if (prepared === null) {\n          this.recordDroppedEvent('event_processor', dataCategory, event);\n          throw new SentryError('An event processor returned `null`, will not send event.', 'log');\n        }\n\n        const isInternalException = hint.data && (hint.data as { __sentry__: boolean }).__sentry__ === true;\n        if (isInternalException) {\n          return prepared;\n        }\n\n        const result = processBeforeSend(options, prepared, hint);\n        return _validateBeforeSendResult(result, beforeSendLabel);\n      })\n      .then(processedEvent => {\n        if (processedEvent === null) {\n          this.recordDroppedEvent('before_send', dataCategory, event);\n          throw new SentryError(`${beforeSendLabel} returned \\`null\\`, will not send event.`, 'log');\n        }\n\n        const session = scope && scope.getSession();\n        if (!isTransaction && session) {\n          this._updateSessionFromEvent(session, processedEvent);\n        }\n\n        // None of the Sentry built event processor will update transaction name,\n        // so if the transaction name has been changed by an event processor, we know\n        // it has to come from custom event processor added by a user\n        const transactionInfo = processedEvent.transaction_info;\n        if (isTransaction && transactionInfo && processedEvent.transaction !== event.transaction) {\n          const source = 'custom';\n          processedEvent.transaction_info = {\n            ...transactionInfo,\n            source,\n          };\n        }\n\n        this.sendEvent(processedEvent, hint);\n        return processedEvent;\n      })\n      .then(null, reason => {\n        if (reason instanceof SentryError) {\n          throw reason;\n        }\n\n        this.captureException(reason, {\n          data: {\n            __sentry__: true,\n          },\n          originalException: reason,\n        });\n        throw new SentryError(\n          `Event processing pipeline threw an error, original event will not be sent. Details have been sent as a new event.\\nReason: ${reason}`,\n        );\n      });\n  }\n\n  /**\n   * Occupies the client with processing and event\n   */\n  protected _process<T>(promise: PromiseLike<T>): void {\n    this._numProcessing++;\n    void promise.then(\n      value => {\n        this._numProcessing--;\n        return value;\n      },\n      reason => {\n        this._numProcessing--;\n        return reason;\n      },\n    );\n  }\n\n  /**\n   * @inheritdoc\n   */\n  protected _sendEnvelope(envelope: Envelope): PromiseLike<void | TransportMakeRequestResponse> | void {\n    if (this._transport && this._dsn) {\n      this.emit('beforeEnvelope', envelope);\n\n      return this._transport.send(envelope).then(null, reason => {\n        __DEBUG_BUILD__ && logger.error('Error while sending event:', reason);\n      });\n    } else {\n      __DEBUG_BUILD__ && logger.error('Transport disabled');\n    }\n  }\n\n  /**\n   * Clears outcomes on this client and returns them.\n   */\n  protected _clearOutcomes(): Outcome[] {\n    const outcomes = this._outcomes;\n    this._outcomes = {};\n    return Object.keys(outcomes).map(key => {\n      const [reason, category] = key.split(':') as [EventDropReason, DataCategory];\n      return {\n        reason,\n        category,\n        quantity: outcomes[key],\n      };\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types\n  public abstract eventFromException(_exception: any, _hint?: EventHint): PromiseLike<Event>;\n\n  /**\n   * @inheritDoc\n   */\n  public abstract eventFromMessage(\n    _message: string,\n    // eslint-disable-next-line deprecation/deprecation\n    _level?: Severity | SeverityLevel,\n    _hint?: EventHint,\n  ): PromiseLike<Event>;\n}\n\n/**\n * Verifies that return value of configured `beforeSend` or `beforeSendTransaction` is of expected type, and returns the value if so.\n */\nfunction _validateBeforeSendResult(\n  beforeSendResult: PromiseLike<Event | null> | Event | null,\n  beforeSendLabel: string,\n): PromiseLike<Event | null> | Event | null {\n  const invalidValueError = `${beforeSendLabel} must return \\`null\\` or a valid event.`;\n  if (isThenable(beforeSendResult)) {\n    return beforeSendResult.then(\n      event => {\n        if (!isPlainObject(event) && event !== null) {\n          throw new SentryError(invalidValueError);\n        }\n        return event;\n      },\n      e => {\n        throw new SentryError(`${beforeSendLabel} rejected with ${e}`);\n      },\n    );\n  } else if (!isPlainObject(beforeSendResult) && beforeSendResult !== null) {\n    throw new SentryError(invalidValueError);\n  }\n  return beforeSendResult;\n}\n\n/**\n * Process the matching `beforeSendXXX` callback.\n */\nfunction processBeforeSend(\n  options: ClientOptions,\n  event: Event,\n  hint: EventHint,\n): PromiseLike<Event | null> | Event | null {\n  const { beforeSend, beforeSendTransaction } = options;\n\n  if (isErrorEvent(event) && beforeSend) {\n    return beforeSend(event, hint);\n  }\n\n  if (isTransactionEvent(event) && beforeSendTransaction) {\n    return beforeSendTransaction(event, hint);\n  }\n\n  return event;\n}\n\nfunction isErrorEvent(event: Event): event is ErrorEvent {\n  return event.type === undefined;\n}\n\nfunction isTransactionEvent(event: Event): event is TransactionEvent {\n  return event.type === 'transaction';\n}\n","import type { Scope } from '@sentry/core';\nimport { BaseClient, SDK_VERSION } from '@sentry/core';\nimport type {\n  BrowserClientReplayOptions,\n  ClientOptions,\n  Event,\n  EventHint,\n  Options,\n  Severity,\n  SeverityLevel,\n  UserFeedback,\n} from '@sentry/types';\nimport { createClientReportEnvelope, dsnToString, getSDKSource, logger } from '@sentry/utils';\n\nimport { eventFromException, eventFromMessage } from './eventbuilder';\nimport { WINDOW } from './helpers';\nimport type { Breadcrumbs } from './integrations';\nimport { BREADCRUMB_INTEGRATION_ID } from './integrations/breadcrumbs';\nimport type { BrowserTransportOptions } from './transports/types';\nimport { createUserFeedbackEnvelope } from './userfeedback';\n\n/**\n * Configuration options for the Sentry Browser SDK.\n * @see @sentry/types Options for more information.\n */\nexport type BrowserOptions = Options<BrowserTransportOptions> & BrowserClientReplayOptions;\n\n/**\n * Configuration options for the Sentry Browser SDK Client class\n * @see BrowserClient for more information.\n */\nexport type BrowserClientOptions = ClientOptions<BrowserTransportOptions>;\n\n/**\n * The Sentry Browser SDK Client.\n *\n * @see BrowserOptions for documentation on configuration options.\n * @see SentryClient for usage documentation.\n */\nexport class BrowserClient extends BaseClient<BrowserClientOptions> {\n  /**\n   * Creates a new Browser SDK instance.\n   *\n   * @param options Configuration options for this SDK.\n   */\n  public constructor(options: BrowserClientOptions) {\n    const sdkSource = WINDOW.SENTRY_SDK_SOURCE || getSDKSource();\n\n    options._metadata = options._metadata || {};\n    options._metadata.sdk = options._metadata.sdk || {\n      name: 'sentry.javascript.browser',\n      packages: [\n        {\n          name: `${sdkSource}:@sentry/browser`,\n          version: SDK_VERSION,\n        },\n      ],\n      version: SDK_VERSION,\n    };\n\n    super(options);\n\n    if (options.sendClientReports && WINDOW.document) {\n      WINDOW.document.addEventListener('visibilitychange', () => {\n        if (WINDOW.document.visibilityState === 'hidden') {\n          this._flushOutcomes();\n        }\n      });\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public eventFromException(exception: unknown, hint?: EventHint): PromiseLike<Event> {\n    return eventFromException(this._options.stackParser, exception, hint, this._options.attachStacktrace);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public eventFromMessage(\n    message: string,\n    // eslint-disable-next-line deprecation/deprecation\n    level: Severity | SeverityLevel = 'info',\n    hint?: EventHint,\n  ): PromiseLike<Event> {\n    return eventFromMessage(this._options.stackParser, message, level, hint, this._options.attachStacktrace);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public sendEvent(event: Event, hint?: EventHint): void {\n    // We only want to add the sentry event breadcrumb when the user has the breadcrumb integration installed and\n    // activated its `sentry` option.\n    // We also do not want to use the `Breadcrumbs` class here directly, because we do not want it to be included in\n    // bundles, if it is not used by the SDK.\n    // This all sadly is a bit ugly, but we currently don't have a \"pre-send\" hook on the integrations so we do it this\n    // way for now.\n    const breadcrumbIntegration = this.getIntegrationById(BREADCRUMB_INTEGRATION_ID) as Breadcrumbs | undefined;\n    // We check for definedness of `addSentryBreadcrumb` in case users provided their own integration with id\n    // \"Breadcrumbs\" that does not have this function.\n    if (breadcrumbIntegration && breadcrumbIntegration.addSentryBreadcrumb) {\n      breadcrumbIntegration.addSentryBreadcrumb(event);\n    }\n\n    super.sendEvent(event, hint);\n  }\n\n  /**\n   * Sends user feedback to Sentry.\n   */\n  public captureUserFeedback(feedback: UserFeedback): void {\n    if (!this._isEnabled()) {\n      __DEBUG_BUILD__ && logger.warn('SDK not enabled, will not capture user feedback.');\n      return;\n    }\n\n    const envelope = createUserFeedbackEnvelope(feedback, {\n      metadata: this.getSdkMetadata(),\n      dsn: this.getDsn(),\n      tunnel: this.getOptions().tunnel,\n    });\n    void this._sendEnvelope(envelope);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  protected _prepareEvent(event: Event, hint: EventHint, scope?: Scope): PromiseLike<Event | null> {\n    event.platform = event.platform || 'javascript';\n    return super._prepareEvent(event, hint, scope);\n  }\n\n  /**\n   * Sends client reports as an envelope.\n   */\n  private _flushOutcomes(): void {\n    const outcomes = this._clearOutcomes();\n\n    if (outcomes.length === 0) {\n      __DEBUG_BUILD__ && logger.log('No outcomes to send');\n      return;\n    }\n\n    if (!this._dsn) {\n      __DEBUG_BUILD__ && logger.log('No dsn provided, will not send outcomes');\n      return;\n    }\n\n    __DEBUG_BUILD__ && logger.log('Sending outcomes:', outcomes);\n\n    const envelope = createClientReportEnvelope(outcomes, this._options.tunnel && dsnToString(this._dsn));\n    void this._sendEnvelope(envelope);\n  }\n}\n","import type { DsnComponents, EventEnvelope, SdkMetadata, UserFeedback, UserFeedbackItem } from '@sentry/types';\nimport { createEnvelope, dsnToString } from '@sentry/utils';\n\n/**\n * Creates an envelope from a user feedback.\n */\nexport function createUserFeedbackEnvelope(\n  feedback: UserFeedback,\n  {\n    metadata,\n    tunnel,\n    dsn,\n  }: {\n    metadata: SdkMetadata | undefined;\n    tunnel: string | undefined;\n    dsn: DsnComponents | undefined;\n  },\n): EventEnvelope {\n  const headers: EventEnvelope[0] = {\n    event_id: feedback.event_id,\n    sent_at: new Date().toISOString(),\n    ...(metadata &&\n      metadata.sdk && {\n        sdk: {\n          name: metadata.sdk.name,\n          version: metadata.sdk.version,\n        },\n      }),\n    ...(!!tunnel && !!dsn && { dsn: dsnToString(dsn) }),\n  };\n  const item = createUserFeedbackEnvelopeItem(feedback);\n\n  return createEnvelope(headers, [item]);\n}\n\nfunction createUserFeedbackEnvelopeItem(feedback: UserFeedback): UserFeedbackItem {\n  const feedbackHeaders: UserFeedbackItem[0] = {\n    type: 'user_report',\n  };\n  return [feedbackHeaders, feedback];\n}\n","import type { ClientReport, ClientReportEnvelope, ClientReportItem } from '@sentry/types';\n\nimport { createEnvelope } from './envelope';\nimport { dateTimestampInSeconds } from './time';\n\n/**\n * Creates client report envelope\n * @param discarded_events An array of discard events\n * @param dsn A DSN that can be set on the header. Optional.\n */\nexport function createClientReportEnvelope(\n  discarded_events: ClientReport['discarded_events'],\n  dsn?: string,\n  timestamp?: number,\n): ClientReportEnvelope {\n  const clientReportItem: ClientReportItem = [\n    { type: 'client_report' },\n    {\n      timestamp: timestamp || dateTimestampInSeconds(),\n      discarded_events,\n    },\n  ];\n  return createEnvelope<ClientReportEnvelope>(dsn ? { dsn } : {}, [clientReportItem]);\n}\n","import type { TransportMakeRequestResponse } from '@sentry/types';\n\n// Intentionally keeping the key broad, as we don't know for sure what rate limit headers get returned from backend\nexport type RateLimits = Record<string, number>;\n\nexport const DEFAULT_RETRY_AFTER = 60 * 1000; // 60 seconds\n\n/**\n * Extracts Retry-After value from the request header or returns default value\n * @param header string representation of 'Retry-After' header\n * @param now current unix timestamp\n *\n */\nexport function parseRetryAfterHeader(header: string, now: number = Date.now()): number {\n  const headerDelay = parseInt(`${header}`, 10);\n  if (!isNaN(headerDelay)) {\n    return headerDelay * 1000;\n  }\n\n  const headerDate = Date.parse(`${header}`);\n  if (!isNaN(headerDate)) {\n    return headerDate - now;\n  }\n\n  return DEFAULT_RETRY_AFTER;\n}\n\n/**\n * Gets the time that the given category is disabled until for rate limiting.\n * In case no category-specific limit is set but a general rate limit across all categories is active,\n * that time is returned.\n *\n * @return the time in ms that the category is disabled until or 0 if there's no active rate limit.\n */\nexport function disabledUntil(limits: RateLimits, category: string): number {\n  return limits[category] || limits.all || 0;\n}\n\n/**\n * Checks if a category is rate limited\n */\nexport function isRateLimited(limits: RateLimits, category: string, now: number = Date.now()): boolean {\n  return disabledUntil(limits, category) > now;\n}\n\n/**\n * Update ratelimits from incoming headers.\n *\n * @return the updated RateLimits object.\n */\nexport function updateRateLimits(\n  limits: RateLimits,\n  { statusCode, headers }: TransportMakeRequestResponse,\n  now: number = Date.now(),\n): RateLimits {\n  const updatedRateLimits: RateLimits = {\n    ...limits,\n  };\n\n  // \"The name is case-insensitive.\"\n  // https://developer.mozilla.org/en-US/docs/Web/API/Headers/get\n  const rateLimitHeader = headers && headers['x-sentry-rate-limits'];\n  const retryAfterHeader = headers && headers['retry-after'];\n\n  if (rateLimitHeader) {\n    /**\n     * rate limit headers are of the form\n     *     <header>,<header>,..\n     * where each <header> is of the form\n     *     <retry_after>: <categories>: <scope>: <reason_code>\n     * where\n     *     <retry_after> is a delay in seconds\n     *     <categories> is the event type(s) (error, transaction, etc) being rate limited and is of the form\n     *         <category>;<category>;...\n     *     <scope> is what's being limited (org, project, or key) - ignored by SDK\n     *     <reason_code> is an arbitrary string like \"org_quota\" - ignored by SDK\n     */\n    for (const limit of rateLimitHeader.trim().split(',')) {\n      const [retryAfter, categories] = limit.split(':', 2);\n      const headerDelay = parseInt(retryAfter, 10);\n      const delay = (!isNaN(headerDelay) ? headerDelay : 60) * 1000; // 60sec default\n      if (!categories) {\n        updatedRateLimits.all = now + delay;\n      } else {\n        for (const category of categories.split(';')) {\n          updatedRateLimits[category] = now + delay;\n        }\n      }\n    }\n  } else if (retryAfterHeader) {\n    updatedRateLimits.all = now + parseRetryAfterHeader(retryAfterHeader, now);\n  } else if (statusCode === 429) {\n    updatedRateLimits.all = now + 60 * 1000;\n  }\n\n  return updatedRateLimits;\n}\n","import type {\n  Envelope,\n  EnvelopeItem,\n  EnvelopeItemType,\n  Event,\n  EventDropReason,\n  EventItem,\n  InternalBaseTransportOptions,\n  Transport,\n  TransportMakeRequestResponse,\n  TransportRequestExecutor,\n} from '@sentry/types';\nimport type { PromiseBuffer, RateLimits } from '@sentry/utils';\nimport {\n  createEnvelope,\n  envelopeItemTypeToDataCategory,\n  forEachEnvelopeItem,\n  isRateLimited,\n  logger,\n  makePromiseBuffer,\n  resolvedSyncPromise,\n  SentryError,\n  serializeEnvelope,\n  updateRateLimits,\n} from '@sentry/utils';\n\nexport const DEFAULT_TRANSPORT_BUFFER_SIZE = 30;\n\n/**\n * Creates an instance of a Sentry `Transport`\n *\n * @param options\n * @param makeRequest\n */\nexport function createTransport(\n  options: InternalBaseTransportOptions,\n  makeRequest: TransportRequestExecutor,\n  buffer: PromiseBuffer<void | TransportMakeRequestResponse> = makePromiseBuffer(\n    options.bufferSize || DEFAULT_TRANSPORT_BUFFER_SIZE,\n  ),\n): Transport {\n  let rateLimits: RateLimits = {};\n  const flush = (timeout?: number): PromiseLike<boolean> => buffer.drain(timeout);\n\n  function send(envelope: Envelope): PromiseLike<void | TransportMakeRequestResponse> {\n    const filteredEnvelopeItems: EnvelopeItem[] = [];\n\n    // Drop rate limited items from envelope\n    forEachEnvelopeItem(envelope, (item, type) => {\n      const envelopeItemDataCategory = envelopeItemTypeToDataCategory(type);\n      if (isRateLimited(rateLimits, envelopeItemDataCategory)) {\n        const event: Event | undefined = getEventForEnvelopeItem(item, type);\n        options.recordDroppedEvent('ratelimit_backoff', envelopeItemDataCategory, event);\n      } else {\n        filteredEnvelopeItems.push(item);\n      }\n    });\n\n    // Skip sending if envelope is empty after filtering out rate limited events\n    if (filteredEnvelopeItems.length === 0) {\n      return resolvedSyncPromise();\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const filteredEnvelope: Envelope = createEnvelope(envelope[0], filteredEnvelopeItems as any);\n\n    // Creates client report for each item in an envelope\n    const recordEnvelopeLoss = (reason: EventDropReason): void => {\n      forEachEnvelopeItem(filteredEnvelope, (item, type) => {\n        const event: Event | undefined = getEventForEnvelopeItem(item, type);\n        options.recordDroppedEvent(reason, envelopeItemTypeToDataCategory(type), event);\n      });\n    };\n\n    const requestTask = (): PromiseLike<void | TransportMakeRequestResponse> =>\n      makeRequest({ body: serializeEnvelope(filteredEnvelope, options.textEncoder) }).then(\n        response => {\n          // We don't want to throw on NOK responses, but we want to at least log them\n          if (response.statusCode !== undefined && (response.statusCode < 200 || response.statusCode >= 300)) {\n            __DEBUG_BUILD__ && logger.warn(`Sentry responded with status code ${response.statusCode} to sent event.`);\n          }\n\n          rateLimits = updateRateLimits(rateLimits, response);\n          return response;\n        },\n        error => {\n          recordEnvelopeLoss('network_error');\n          throw error;\n        },\n      );\n\n    return buffer.add(requestTask).then(\n      result => result,\n      error => {\n        if (error instanceof SentryError) {\n          __DEBUG_BUILD__ && logger.error('Skipped sending event because buffer is full.');\n          recordEnvelopeLoss('queue_overflow');\n          return resolvedSyncPromise();\n        } else {\n          throw error;\n        }\n      },\n    );\n  }\n\n  // We use this to identifify if the transport is the base transport\n  // TODO (v8): Remove this again as we'll no longer need it\n  send.__sentry__baseTransport__ = true;\n\n  return {\n    send,\n    flush,\n  };\n}\n\nfunction getEventForEnvelopeItem(item: Envelope[1][number], type: EnvelopeItemType): Event | undefined {\n  if (type !== 'event' && type !== 'transaction') {\n    return undefined;\n  }\n\n  return Array.isArray(item) ? (item as EventItem)[1] : undefined;\n}\n","import { SentryError } from './error';\nimport { rejectedSyncPromise, resolvedSyncPromise, SyncPromise } from './syncpromise';\n\nexport interface PromiseBuffer<T> {\n  // exposes the internal array so tests can assert on the state of it.\n  // XXX: this really should not be public api.\n  $: Array<PromiseLike<T>>;\n  add(taskProducer: () => PromiseLike<T>): PromiseLike<T>;\n  drain(timeout?: number): PromiseLike<boolean>;\n}\n\n/**\n * Creates an new PromiseBuffer object with the specified limit\n * @param limit max number of promises that can be stored in the buffer\n */\nexport function makePromiseBuffer<T>(limit?: number): PromiseBuffer<T> {\n  const buffer: Array<PromiseLike<T>> = [];\n\n  function isReady(): boolean {\n    return limit === undefined || buffer.length < limit;\n  }\n\n  /**\n   * Remove a promise from the queue.\n   *\n   * @param task Can be any PromiseLike<T>\n   * @returns Removed promise.\n   */\n  function remove(task: PromiseLike<T>): PromiseLike<T> {\n    return buffer.splice(buffer.indexOf(task), 1)[0];\n  }\n\n  /**\n   * Add a promise (representing an in-flight action) to the queue, and set it to remove itself on fulfillment.\n   *\n   * @param taskProducer A function producing any PromiseLike<T>; In previous versions this used to be `task:\n   *        PromiseLike<T>`, but under that model, Promises were instantly created on the call-site and their executor\n   *        functions therefore ran immediately. Thus, even if the buffer was full, the action still happened. By\n   *        requiring the promise to be wrapped in a function, we can defer promise creation until after the buffer\n   *        limit check.\n   * @returns The original promise.\n   */\n  function add(taskProducer: () => PromiseLike<T>): PromiseLike<T> {\n    if (!isReady()) {\n      return rejectedSyncPromise(new SentryError('Not adding Promise because buffer limit was reached.'));\n    }\n\n    // start the task and add its promise to the queue\n    const task = taskProducer();\n    if (buffer.indexOf(task) === -1) {\n      buffer.push(task);\n    }\n    void task\n      .then(() => remove(task))\n      // Use `then(null, rejectionHandler)` rather than `catch(rejectionHandler)` so that we can use `PromiseLike`\n      // rather than `Promise`. `PromiseLike` doesn't have a `.catch` method, making its polyfill smaller. (ES5 didn't\n      // have promises, so TS has to polyfill when down-compiling.)\n      .then(null, () =>\n        remove(task).then(null, () => {\n          // We have to add another catch here because `remove()` starts a new promise chain.\n        }),\n      );\n    return task;\n  }\n\n  /**\n   * Wait for all promises in the queue to resolve or for timeout to expire, whichever comes first.\n   *\n   * @param timeout The time, in ms, after which to resolve to `false` if the queue is still non-empty. Passing `0` (or\n   * not passing anything) will make the promise wait as long as it takes for the queue to drain before resolving to\n   * `true`.\n   * @returns A promise which will resolve to `true` if the queue is already empty or drains before the timeout, and\n   * `false` otherwise\n   */\n  function drain(timeout?: number): PromiseLike<boolean> {\n    return new SyncPromise<boolean>((resolve, reject) => {\n      let counter = buffer.length;\n\n      if (!counter) {\n        return resolve(true);\n      }\n\n      // wait for `timeout` ms and then resolve to `false` (if not cancelled first)\n      const capturedSetTimeout = setTimeout(() => {\n        if (timeout && timeout > 0) {\n          resolve(false);\n        }\n      }, timeout);\n\n      // if all promises resolve in time, cancel the timer and resolve to `true`\n      buffer.forEach(item => {\n        void resolvedSyncPromise(item).then(() => {\n          if (!--counter) {\n            clearTimeout(capturedSetTimeout);\n            resolve(true);\n          }\n        }, reject);\n      });\n    });\n  }\n\n  return {\n    $: buffer,\n    add,\n    drain,\n  };\n}\n","import { isNativeFetch, logger } from '@sentry/utils';\n\nimport { WINDOW } from '../helpers';\n\nlet cachedFetchImpl: FetchImpl | undefined = undefined;\n\nexport type FetchImpl = typeof fetch;\n\n/**\n * A special usecase for incorrectly wrapped Fetch APIs in conjunction with ad-blockers.\n * Whenever someone wraps the Fetch API and returns the wrong promise chain,\n * this chain becomes orphaned and there is no possible way to capture it's rejections\n * other than allowing it bubble up to this very handler. eg.\n *\n * const f = window.fetch;\n * window.fetch = function () {\n *   const p = f.apply(this, arguments);\n *\n *   p.then(function() {\n *     console.log('hi.');\n *   });\n *\n *   return p;\n * }\n *\n * `p.then(function () { ... })` is producing a completely separate promise chain,\n * however, what's returned is `p` - the result of original `fetch` call.\n *\n * This mean, that whenever we use the Fetch API to send our own requests, _and_\n * some ad-blocker blocks it, this orphaned chain will _always_ reject,\n * effectively causing another event to be captured.\n * This makes a whole process become an infinite loop, which we need to somehow\n * deal with, and break it in one way or another.\n *\n * To deal with this issue, we are making sure that we _always_ use the real\n * browser Fetch API, instead of relying on what `window.fetch` exposes.\n * The only downside to this would be missing our own requests as breadcrumbs,\n * but because we are already not doing this, it should be just fine.\n *\n * Possible failed fetch error messages per-browser:\n *\n * Chrome:  Failed to fetch\n * Edge:    Failed to Fetch\n * Firefox: NetworkError when attempting to fetch resource\n * Safari:  resource blocked by content blocker\n */\nexport function getNativeFetchImplementation(): FetchImpl {\n  if (cachedFetchImpl) {\n    return cachedFetchImpl;\n  }\n\n  /* eslint-disable @typescript-eslint/unbound-method */\n\n  // Fast path to avoid DOM I/O\n  if (isNativeFetch(WINDOW.fetch)) {\n    return (cachedFetchImpl = WINDOW.fetch.bind(WINDOW));\n  }\n\n  const document = WINDOW.document;\n  let fetchImpl = WINDOW.fetch;\n  // eslint-disable-next-line deprecation/deprecation\n  if (document && typeof document.createElement === 'function') {\n    try {\n      const sandbox = document.createElement('iframe');\n      sandbox.hidden = true;\n      document.head.appendChild(sandbox);\n      const contentWindow = sandbox.contentWindow;\n      if (contentWindow && contentWindow.fetch) {\n        fetchImpl = contentWindow.fetch;\n      }\n      document.head.removeChild(sandbox);\n    } catch (e) {\n      __DEBUG_BUILD__ &&\n        logger.warn('Could not create sandbox iframe for pure fetch check, bailing to window.fetch: ', e);\n    }\n  }\n\n  return (cachedFetchImpl = fetchImpl.bind(WINDOW));\n  /* eslint-enable @typescript-eslint/unbound-method */\n}\n\n/** Clears cached fetch impl */\nexport function clearCachedFetchImplementation(): void {\n  cachedFetchImpl = undefined;\n}\n","import { createTransport } from '@sentry/core';\nimport type { Transport, TransportMakeRequestResponse, TransportRequest } from '@sentry/types';\nimport { rejectedSyncPromise } from '@sentry/utils';\n\nimport type { BrowserTransportOptions } from './types';\nimport type { FetchImpl } from './utils';\nimport { clearCachedFetchImplementation, getNativeFetchImplementation } from './utils';\n\n/**\n * Creates a Transport that uses the Fetch API to send events to Sentry.\n */\nexport function makeFetchTransport(\n  options: BrowserTransportOptions,\n  nativeFetch: FetchImpl = getNativeFetchImplementation(),\n): Transport {\n  let pendingBodySize = 0;\n  let pendingCount = 0;\n\n  function makeRequest(request: TransportRequest): PromiseLike<TransportMakeRequestResponse> {\n    const requestSize = request.body.length;\n    pendingBodySize += requestSize;\n    pendingCount++;\n\n    const requestOptions: RequestInit = {\n      body: request.body,\n      method: 'POST',\n      referrerPolicy: 'origin',\n      headers: options.headers,\n      // Outgoing requests are usually cancelled when navigating to a different page, causing a \"TypeError: Failed to\n      // fetch\" error and sending a \"network_error\" client-outcome - in Chrome, the request status shows \"(cancelled)\".\n      // The `keepalive` flag keeps outgoing requests alive, even when switching pages. We want this since we're\n      // frequently sending events right before the user is switching pages (eg. whenfinishing navigation transactions).\n      // Gotchas:\n      // - `keepalive` isn't supported by Firefox\n      // - As per spec (https://fetch.spec.whatwg.org/#http-network-or-cache-fetch):\n      //   If the sum of contentLength and inflightKeepaliveBytes is greater than 64 kibibytes, then return a network error.\n      //   We will therefore only activate the flag when we're below that limit.\n      // There is also a limit of requests that can be open at the same time, so we also limit this to 15\n      // See https://github.com/getsentry/sentry-javascript/pull/7553 for details\n      keepalive: pendingBodySize <= 60_000 && pendingCount < 15,\n      ...options.fetchOptions,\n    };\n\n    try {\n      return nativeFetch(options.url, requestOptions).then(response => {\n        pendingBodySize -= requestSize;\n        pendingCount--;\n        return {\n          statusCode: response.status,\n          headers: {\n            'x-sentry-rate-limits': response.headers.get('X-Sentry-Rate-Limits'),\n            'retry-after': response.headers.get('Retry-After'),\n          },\n        };\n      });\n    } catch (e) {\n      clearCachedFetchImplementation();\n      pendingBodySize -= requestSize;\n      pendingCount--;\n      return rejectedSyncPromise(e);\n    }\n  }\n\n  return createTransport(options, makeRequest);\n}\n","// This was originally forked from https://github.com/csnover/TraceKit, and was largely\n// re - written as part of raven - js.\n//\n// This code was later copied to the JavaScript mono - repo and further modified and\n// refactored over the years.\n\n// Copyright (c) 2013 Onur Can Cakmak onur.cakmak@gmail.com and all TraceKit contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this\n// software and associated documentation files(the 'Software'), to deal in the Software\n// without restriction, including without limitation the rights to use, copy, modify,\n// merge, publish, distribute, sublicense, and / or sell copies of the Software, and to\n// permit persons to whom the Software is furnished to do so, subject to the following\n// conditions:\n//\n// The above copyright notice and this permission notice shall be included in all copies\n// or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\n// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\n// PARTICULAR PURPOSE AND NONINFRINGEMENT.IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF\n// CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE\n// OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nimport type { StackFrame, StackLineParser, StackLineParserFn } from '@sentry/types';\nimport { createStackParser } from '@sentry/utils';\n\n// global reference to slice\nconst UNKNOWN_FUNCTION = '?';\n\nconst OPERA10_PRIORITY = 10;\nconst OPERA11_PRIORITY = 20;\nconst CHROME_PRIORITY = 30;\nconst WINJS_PRIORITY = 40;\nconst GECKO_PRIORITY = 50;\n\nfunction createFrame(filename: string, func: string, lineno?: number, colno?: number): StackFrame {\n  const frame: StackFrame = {\n    filename,\n    function: func,\n    in_app: true, // All browser frames are considered in_app\n  };\n\n  if (lineno !== undefined) {\n    frame.lineno = lineno;\n  }\n\n  if (colno !== undefined) {\n    frame.colno = colno;\n  }\n\n  return frame;\n}\n\n// Chromium based browsers: Chrome, Brave, new Opera, new Edge\nconst chromeRegex =\n  /^\\s*at (?:(.+?\\)(?: \\[.+\\])?|.*?) ?\\((?:address at )?)?(?:async )?((?:<anonymous>|[-a-z]+:|.*bundle|\\/)?.*?)(?::(\\d+))?(?::(\\d+))?\\)?\\s*$/i;\nconst chromeEvalRegex = /\\((\\S*)(?::(\\d+))(?::(\\d+))\\)/;\n\nconst chrome: StackLineParserFn = line => {\n  const parts = chromeRegex.exec(line);\n\n  if (parts) {\n    const isEval = parts[2] && parts[2].indexOf('eval') === 0; // start of line\n\n    if (isEval) {\n      const subMatch = chromeEvalRegex.exec(parts[2]);\n\n      if (subMatch) {\n        // throw out eval line/column and use top-most line/column number\n        parts[2] = subMatch[1]; // url\n        parts[3] = subMatch[2]; // line\n        parts[4] = subMatch[3]; // column\n      }\n    }\n\n    // Kamil: One more hack won't hurt us right? Understanding and adding more rules on top of these regexps right now\n    // would be way too time consuming. (TODO: Rewrite whole RegExp to be more readable)\n    const [func, filename] = extractSafariExtensionDetails(parts[1] || UNKNOWN_FUNCTION, parts[2]);\n\n    return createFrame(filename, func, parts[3] ? +parts[3] : undefined, parts[4] ? +parts[4] : undefined);\n  }\n\n  return;\n};\n\nexport const chromeStackLineParser: StackLineParser = [CHROME_PRIORITY, chrome];\n\n// gecko regex: `(?:bundle|\\d+\\.js)`: `bundle` is for react native, `\\d+\\.js` also but specifically for ram bundles because it\n// generates filenames without a prefix like `file://` the filenames in the stacktrace are just 42.js\n// We need this specific case for now because we want no other regex to match.\nconst geckoREgex =\n  /^\\s*(.*?)(?:\\((.*?)\\))?(?:^|@)?((?:[-a-z]+)?:\\/.*?|\\[native code\\]|[^@]*(?:bundle|\\d+\\.js)|\\/[\\w\\-. /=]+)(?::(\\d+))?(?::(\\d+))?\\s*$/i;\nconst geckoEvalRegex = /(\\S+) line (\\d+)(?: > eval line \\d+)* > eval/i;\n\nconst gecko: StackLineParserFn = line => {\n  const parts = geckoREgex.exec(line);\n\n  if (parts) {\n    const isEval = parts[3] && parts[3].indexOf(' > eval') > -1;\n    if (isEval) {\n      const subMatch = geckoEvalRegex.exec(parts[3]);\n\n      if (subMatch) {\n        // throw out eval line/column and use top-most line number\n        parts[1] = parts[1] || 'eval';\n        parts[3] = subMatch[1];\n        parts[4] = subMatch[2];\n        parts[5] = ''; // no column when eval\n      }\n    }\n\n    let filename = parts[3];\n    let func = parts[1] || UNKNOWN_FUNCTION;\n    [func, filename] = extractSafariExtensionDetails(func, filename);\n\n    return createFrame(filename, func, parts[4] ? +parts[4] : undefined, parts[5] ? +parts[5] : undefined);\n  }\n\n  return;\n};\n\nexport const geckoStackLineParser: StackLineParser = [GECKO_PRIORITY, gecko];\n\nconst winjsRegex = /^\\s*at (?:((?:\\[object object\\])?.+) )?\\(?((?:[-a-z]+):.*?):(\\d+)(?::(\\d+))?\\)?\\s*$/i;\n\nconst winjs: StackLineParserFn = line => {\n  const parts = winjsRegex.exec(line);\n\n  return parts\n    ? createFrame(parts[2], parts[1] || UNKNOWN_FUNCTION, +parts[3], parts[4] ? +parts[4] : undefined)\n    : undefined;\n};\n\nexport const winjsStackLineParser: StackLineParser = [WINJS_PRIORITY, winjs];\n\nconst opera10Regex = / line (\\d+).*script (?:in )?(\\S+)(?:: in function (\\S+))?$/i;\n\nconst opera10: StackLineParserFn = line => {\n  const parts = opera10Regex.exec(line);\n  return parts ? createFrame(parts[2], parts[3] || UNKNOWN_FUNCTION, +parts[1]) : undefined;\n};\n\nexport const opera10StackLineParser: StackLineParser = [OPERA10_PRIORITY, opera10];\n\nconst opera11Regex =\n  / line (\\d+), column (\\d+)\\s*(?:in (?:<anonymous function: ([^>]+)>|([^)]+))\\(.*\\))? in (.*):\\s*$/i;\n\nconst opera11: StackLineParserFn = line => {\n  const parts = opera11Regex.exec(line);\n  return parts ? createFrame(parts[5], parts[3] || parts[4] || UNKNOWN_FUNCTION, +parts[1], +parts[2]) : undefined;\n};\n\nexport const opera11StackLineParser: StackLineParser = [OPERA11_PRIORITY, opera11];\n\nexport const defaultStackLineParsers = [chromeStackLineParser, geckoStackLineParser, winjsStackLineParser];\n\nexport const defaultStackParser = createStackParser(...defaultStackLineParsers);\n\n/**\n * Safari web extensions, starting version unknown, can produce \"frames-only\" stacktraces.\n * What it means, is that instead of format like:\n *\n * Error: wat\n *   at function@url:row:col\n *   at function@url:row:col\n *   at function@url:row:col\n *\n * it produces something like:\n *\n *   function@url:row:col\n *   function@url:row:col\n *   function@url:row:col\n *\n * Because of that, it won't be captured by `chrome` RegExp and will fall into `Gecko` branch.\n * This function is extracted so that we can use it in both places without duplicating the logic.\n * Unfortunately \"just\" changing RegExp is too complicated now and making it pass all tests\n * and fix this case seems like an impossible, or at least way too time-consuming task.\n */\nconst extractSafariExtensionDetails = (func: string, filename: string): [string, string] => {\n  const isSafariExtension = func.indexOf('safari-extension') !== -1;\n  const isSafariWebExtension = func.indexOf('safari-web-extension') !== -1;\n\n  return isSafariExtension || isSafariWebExtension\n    ? [\n        func.indexOf('@') !== -1 ? func.split('@')[0] : UNKNOWN_FUNCTION,\n        isSafariExtension ? `safari-extension:${filename}` : `safari-web-extension:${filename}`,\n      ]\n    : [func, filename];\n};\n","import type { Event, EventProcessor, Exception, Hub, Integration, StackFrame } from '@sentry/types';\nimport { logger } from '@sentry/utils';\n\n/** Deduplication filter */\nexport class Dedupe implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'Dedupe';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = Dedupe.id;\n\n  /**\n   * @inheritDoc\n   */\n  private _previousEvent?: Event;\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(addGlobalEventProcessor: (callback: EventProcessor) => void, getCurrentHub: () => Hub): void {\n    const eventProcessor: EventProcessor = currentEvent => {\n      // We want to ignore any non-error type events, e.g. transactions or replays\n      // These should never be deduped, and also not be compared against as _previousEvent.\n      if (currentEvent.type) {\n        return currentEvent;\n      }\n\n      const self = getCurrentHub().getIntegration(Dedupe);\n      if (self) {\n        // Juuust in case something goes wrong\n        try {\n          if (_shouldDropEvent(currentEvent, self._previousEvent)) {\n            __DEBUG_BUILD__ && logger.warn('Event dropped due to being a duplicate of previously captured event.');\n            return null;\n          }\n        } catch (_oO) {\n          return (self._previousEvent = currentEvent);\n        }\n\n        return (self._previousEvent = currentEvent);\n      }\n      return currentEvent;\n    };\n\n    eventProcessor.id = this.name;\n    addGlobalEventProcessor(eventProcessor);\n  }\n}\n\n/** JSDoc */\nfunction _shouldDropEvent(currentEvent: Event, previousEvent?: Event): boolean {\n  if (!previousEvent) {\n    return false;\n  }\n\n  if (_isSameMessageEvent(currentEvent, previousEvent)) {\n    return true;\n  }\n\n  if (_isSameExceptionEvent(currentEvent, previousEvent)) {\n    return true;\n  }\n\n  return false;\n}\n\n/** JSDoc */\nfunction _isSameMessageEvent(currentEvent: Event, previousEvent: Event): boolean {\n  const currentMessage = currentEvent.message;\n  const previousMessage = previousEvent.message;\n\n  // If neither event has a message property, they were both exceptions, so bail out\n  if (!currentMessage && !previousMessage) {\n    return false;\n  }\n\n  // If only one event has a stacktrace, but not the other one, they are not the same\n  if ((currentMessage && !previousMessage) || (!currentMessage && previousMessage)) {\n    return false;\n  }\n\n  if (currentMessage !== previousMessage) {\n    return false;\n  }\n\n  if (!_isSameFingerprint(currentEvent, previousEvent)) {\n    return false;\n  }\n\n  if (!_isSameStacktrace(currentEvent, previousEvent)) {\n    return false;\n  }\n\n  return true;\n}\n\n/** JSDoc */\nfunction _isSameExceptionEvent(currentEvent: Event, previousEvent: Event): boolean {\n  const previousException = _getExceptionFromEvent(previousEvent);\n  const currentException = _getExceptionFromEvent(currentEvent);\n\n  if (!previousException || !currentException) {\n    return false;\n  }\n\n  if (previousException.type !== currentException.type || previousException.value !== currentException.value) {\n    return false;\n  }\n\n  if (!_isSameFingerprint(currentEvent, previousEvent)) {\n    return false;\n  }\n\n  if (!_isSameStacktrace(currentEvent, previousEvent)) {\n    return false;\n  }\n\n  return true;\n}\n\n/** JSDoc */\nfunction _isSameStacktrace(currentEvent: Event, previousEvent: Event): boolean {\n  let currentFrames = _getFramesFromEvent(currentEvent);\n  let previousFrames = _getFramesFromEvent(previousEvent);\n\n  // If neither event has a stacktrace, they are assumed to be the same\n  if (!currentFrames && !previousFrames) {\n    return true;\n  }\n\n  // If only one event has a stacktrace, but not the other one, they are not the same\n  if ((currentFrames && !previousFrames) || (!currentFrames && previousFrames)) {\n    return false;\n  }\n\n  currentFrames = currentFrames as StackFrame[];\n  previousFrames = previousFrames as StackFrame[];\n\n  // If number of frames differ, they are not the same\n  if (previousFrames.length !== currentFrames.length) {\n    return false;\n  }\n\n  // Otherwise, compare the two\n  for (let i = 0; i < previousFrames.length; i++) {\n    const frameA = previousFrames[i];\n    const frameB = currentFrames[i];\n\n    if (\n      frameA.filename !== frameB.filename ||\n      frameA.lineno !== frameB.lineno ||\n      frameA.colno !== frameB.colno ||\n      frameA.function !== frameB.function\n    ) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n/** JSDoc */\nfunction _isSameFingerprint(currentEvent: Event, previousEvent: Event): boolean {\n  let currentFingerprint = currentEvent.fingerprint;\n  let previousFingerprint = previousEvent.fingerprint;\n\n  // If neither event has a fingerprint, they are assumed to be the same\n  if (!currentFingerprint && !previousFingerprint) {\n    return true;\n  }\n\n  // If only one event has a fingerprint, but not the other one, they are not the same\n  if ((currentFingerprint && !previousFingerprint) || (!currentFingerprint && previousFingerprint)) {\n    return false;\n  }\n\n  currentFingerprint = currentFingerprint as string[];\n  previousFingerprint = previousFingerprint as string[];\n\n  // Otherwise, compare the two\n  try {\n    return !!(currentFingerprint.join('') === previousFingerprint.join(''));\n  } catch (_oO) {\n    return false;\n  }\n}\n\n/** JSDoc */\nfunction _getExceptionFromEvent(event: Event): Exception | undefined {\n  return event.exception && event.exception.values && event.exception.values[0];\n}\n\n/** JSDoc */\nfunction _getFramesFromEvent(event: Event): StackFrame[] | undefined {\n  const exception = event.exception;\n\n  if (exception) {\n    try {\n      // @ts-ignore Object could be undefined\n      return exception.values[0].stacktrace.frames;\n    } catch (_oO) {\n      return undefined;\n    }\n  }\n  return undefined;\n}\n","import type { Hub } from '@sentry/core';\nimport {\n  getCurrentHub,\n  getIntegrationsToSetup,\n  getReportDialogEndpoint,\n  initAndBind,\n  Integrations as CoreIntegrations,\n} from '@sentry/core';\nimport type { UserFeedback } from '@sentry/types';\nimport {\n  addInstrumentationHandler,\n  logger,\n  resolvedSyncPromise,\n  stackParserFromStackParserOptions,\n  supportsFetch,\n} from '@sentry/utils';\n\nimport type { BrowserClientOptions, BrowserOptions } from './client';\nimport { BrowserClient } from './client';\nimport type { ReportDialogOptions } from './helpers';\nimport { WINDOW, wrap as internalWrap } from './helpers';\nimport { Breadcrumbs, Dedupe, GlobalHandlers, HttpContext, LinkedErrors, TryCatch } from './integrations';\nimport { defaultStackParser } from './stack-parsers';\nimport { makeFetchTransport, makeXHRTransport } from './transports';\n\nexport const defaultIntegrations = [\n  new CoreIntegrations.InboundFilters(),\n  new CoreIntegrations.FunctionToString(),\n  new TryCatch(),\n  new Breadcrumbs(),\n  new GlobalHandlers(),\n  new LinkedErrors(),\n  new Dedupe(),\n  new HttpContext(),\n];\n\n/**\n * A magic string that build tooling can leverage in order to inject a release value into the SDK.\n */\ndeclare const __SENTRY_RELEASE__: string | undefined;\n\n/**\n * The Sentry Browser SDK Client.\n *\n * To use this SDK, call the {@link init} function as early as possible when\n * loading the web page. To set context information or send manual events, use\n * the provided methods.\n *\n * @example\n *\n * ```\n *\n * import { init } from '@sentry/browser';\n *\n * init({\n *   dsn: '__DSN__',\n *   // ...\n * });\n * ```\n *\n * @example\n * ```\n *\n * import { configureScope } from '@sentry/browser';\n * configureScope((scope: Scope) => {\n *   scope.setExtra({ battery: 0.7 });\n *   scope.setTag({ user_mode: 'admin' });\n *   scope.setUser({ id: '4711' });\n * });\n * ```\n *\n * @example\n * ```\n *\n * import { addBreadcrumb } from '@sentry/browser';\n * addBreadcrumb({\n *   message: 'My Breadcrumb',\n *   // ...\n * });\n * ```\n *\n * @example\n *\n * ```\n *\n * import * as Sentry from '@sentry/browser';\n * Sentry.captureMessage('Hello, world!');\n * Sentry.captureException(new Error('Good bye'));\n * Sentry.captureEvent({\n *   message: 'Manual',\n *   stacktrace: [\n *     // ...\n *   ],\n * });\n * ```\n *\n * @see {@link BrowserOptions} for documentation on configuration options.\n */\nexport function init(options: BrowserOptions = {}): void {\n  if (options.defaultIntegrations === undefined) {\n    options.defaultIntegrations = defaultIntegrations;\n  }\n  if (options.release === undefined) {\n    // This allows build tooling to find-and-replace __SENTRY_RELEASE__ to inject a release value\n    if (typeof __SENTRY_RELEASE__ === 'string') {\n      options.release = __SENTRY_RELEASE__;\n    }\n\n    // This supports the variable that sentry-webpack-plugin injects\n    if (WINDOW.SENTRY_RELEASE && WINDOW.SENTRY_RELEASE.id) {\n      options.release = WINDOW.SENTRY_RELEASE.id;\n    }\n  }\n  if (options.autoSessionTracking === undefined) {\n    options.autoSessionTracking = true;\n  }\n  if (options.sendClientReports === undefined) {\n    options.sendClientReports = true;\n  }\n\n  const clientOptions: BrowserClientOptions = {\n    ...options,\n    stackParser: stackParserFromStackParserOptions(options.stackParser || defaultStackParser),\n    integrations: getIntegrationsToSetup(options),\n    transport: options.transport || (supportsFetch() ? makeFetchTransport : makeXHRTransport),\n  };\n\n  initAndBind(BrowserClient, clientOptions);\n\n  if (options.autoSessionTracking) {\n    startSessionTracking();\n  }\n}\n\n/**\n * Present the user with a report dialog.\n *\n * @param options Everything is optional, we try to fetch all info need from the global scope.\n */\nexport function showReportDialog(options: ReportDialogOptions = {}, hub: Hub = getCurrentHub()): void {\n  // doesn't work without a document (React Native)\n  if (!WINDOW.document) {\n    __DEBUG_BUILD__ && logger.error('Global document not defined in showReportDialog call');\n    return;\n  }\n\n  const { client, scope } = hub.getStackTop();\n  const dsn = options.dsn || (client && client.getDsn());\n  if (!dsn) {\n    __DEBUG_BUILD__ && logger.error('DSN not configured for showReportDialog call');\n    return;\n  }\n\n  if (scope) {\n    options.user = {\n      ...scope.getUser(),\n      ...options.user,\n    };\n  }\n\n  if (!options.eventId) {\n    options.eventId = hub.lastEventId();\n  }\n\n  const script = WINDOW.document.createElement('script');\n  script.async = true;\n  script.src = getReportDialogEndpoint(dsn, options);\n\n  if (options.onLoad) {\n    script.onload = options.onLoad;\n  }\n\n  const injectionPoint = WINDOW.document.head || WINDOW.document.body;\n  if (injectionPoint) {\n    injectionPoint.appendChild(script);\n  } else {\n    __DEBUG_BUILD__ && logger.error('Not injecting report dialog. No injection point found in HTML');\n  }\n}\n\n/**\n * This is the getter for lastEventId.\n *\n * @returns The last event id of a captured event.\n */\nexport function lastEventId(): string | undefined {\n  return getCurrentHub().lastEventId();\n}\n\n/**\n * This function is here to be API compatible with the loader.\n * @hidden\n */\nexport function forceLoad(): void {\n  // Noop\n}\n\n/**\n * This function is here to be API compatible with the loader.\n * @hidden\n */\nexport function onLoad(callback: () => void): void {\n  callback();\n}\n\n/**\n * Call `flush()` on the current client, if there is one. See {@link Client.flush}.\n *\n * @param timeout Maximum time in ms the client should wait to flush its event queue. Omitting this parameter will cause\n * the client to wait until all events are sent before resolving the promise.\n * @returns A promise which resolves to `true` if the queue successfully drains before the timeout, or `false` if it\n * doesn't (or if there's no client defined).\n */\nexport function flush(timeout?: number): PromiseLike<boolean> {\n  const client = getCurrentHub().getClient<BrowserClient>();\n  if (client) {\n    return client.flush(timeout);\n  }\n  __DEBUG_BUILD__ && logger.warn('Cannot flush events. No client defined.');\n  return resolvedSyncPromise(false);\n}\n\n/**\n * Call `close()` on the current client, if there is one. See {@link Client.close}.\n *\n * @param timeout Maximum time in ms the client should wait to flush its event queue before shutting down. Omitting this\n * parameter will cause the client to wait until all events are sent before disabling itself.\n * @returns A promise which resolves to `true` if the queue successfully drains before the timeout, or `false` if it\n * doesn't (or if there's no client defined).\n */\nexport function close(timeout?: number): PromiseLike<boolean> {\n  const client = getCurrentHub().getClient<BrowserClient>();\n  if (client) {\n    return client.close(timeout);\n  }\n  __DEBUG_BUILD__ && logger.warn('Cannot flush events and disable SDK. No client defined.');\n  return resolvedSyncPromise(false);\n}\n\n/**\n * Wrap code within a try/catch block so the SDK is able to capture errors.\n *\n * @param fn A function to wrap.\n *\n * @returns The result of wrapped function call.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function wrap(fn: (...args: any) => any): any {\n  return internalWrap(fn)();\n}\n\nfunction startSessionOnHub(hub: Hub): void {\n  hub.startSession({ ignoreDuration: true });\n  hub.captureSession();\n}\n\n/**\n * Enable automatic Session Tracking for the initial page load.\n */\nfunction startSessionTracking(): void {\n  if (typeof WINDOW.document === 'undefined') {\n    __DEBUG_BUILD__ &&\n      logger.warn('Session tracking in non-browser environment with @sentry/browser is not supported.');\n    return;\n  }\n\n  const hub = getCurrentHub();\n\n  // The only way for this to be false is for there to be a version mismatch between @sentry/browser (>= 6.0.0) and\n  // @sentry/hub (< 5.27.0). In the simple case, there won't ever be such a mismatch, because the two packages are\n  // pinned at the same version in package.json, but there are edge cases where it's possible. See\n  // https://github.com/getsentry/sentry-javascript/issues/3207 and\n  // https://github.com/getsentry/sentry-javascript/issues/3234 and\n  // https://github.com/getsentry/sentry-javascript/issues/3278.\n  if (!hub.captureSession) {\n    return;\n  }\n\n  // The session duration for browser sessions does not track a meaningful\n  // concept that can be used as a metric.\n  // Automatically captured sessions are akin to page views, and thus we\n  // discard their duration.\n  startSessionOnHub(hub);\n\n  // We want to create a session for every navigation as well\n  addInstrumentationHandler('history', ({ from, to }) => {\n    // Don't create an additional session for the initial route or if the location did not change\n    if (!(from === undefined || from === to)) {\n      startSessionOnHub(getCurrentHub());\n    }\n  });\n}\n\n/**\n * Captures user feedback and sends it to Sentry.\n */\nexport function captureUserFeedback(feedback: UserFeedback): void {\n  const client = getCurrentHub().getClient<BrowserClient>();\n  if (client) {\n    client.captureUserFeedback(feedback);\n  }\n}\n","import type { EventProcessor, Hub, Integration } from '@sentry/types';\nimport { CONSOLE_LEVELS, fill, GLOBAL_OBJ, safeJoin, severityLevelFromString } from '@sentry/utils';\n\n/** Send Console API calls as Sentry Events */\nexport class CaptureConsole implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'CaptureConsole';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = CaptureConsole.id;\n\n  /**\n   * @inheritDoc\n   */\n  private readonly _levels: readonly string[] = CONSOLE_LEVELS;\n\n  /**\n   * @inheritDoc\n   */\n  public constructor(options: { levels?: string[] } = {}) {\n    if (options.levels) {\n      this._levels = options.levels;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(_: (callback: EventProcessor) => void, getCurrentHub: () => Hub): void {\n    if (!('console' in GLOBAL_OBJ)) {\n      return;\n    }\n\n    this._levels.forEach((level: string) => {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-explicit-any\n      if (!(level in (GLOBAL_OBJ as any).console)) {\n        return;\n      }\n\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-member-access\n      fill((GLOBAL_OBJ as any).console, level, (originalConsoleMethod: () => any) => (...args: any[]): void => {\n        const hub = getCurrentHub();\n\n        if (hub.getIntegration(CaptureConsole)) {\n          hub.withScope(scope => {\n            scope.setLevel(severityLevelFromString(level));\n            scope.setExtra('arguments', args);\n            scope.addEventProcessor(event => {\n              event.logger = 'console';\n              return event;\n            });\n\n            let message = safeJoin(args, ' ');\n            if (level === 'assert') {\n              if (args[0] === false) {\n                message = `Assertion failed: ${safeJoin(args.slice(1), ' ') || 'console.assert'}`;\n                scope.setExtra('arguments', args.slice(1));\n                hub.captureMessage(message);\n              }\n            } else if (level === 'error' && args[0] instanceof Error) {\n              hub.captureException(args[0]);\n            } else {\n              hub.captureMessage(message);\n            }\n          });\n        }\n\n        // this fails for some browsers. :(\n        if (originalConsoleMethod) {\n          originalConsoleMethod.apply(GLOBAL_OBJ.console, args);\n        }\n      });\n    });\n  }\n}\n","import app from 'flarum/forum/app';\n\nimport {\n  BrowserClient,\n  defaultStackParser,\n  getCurrentHub,\n  makeFetchTransport,\n  showReportDialog,\n  Breadcrumbs,\n  GlobalHandlers,\n  InboundFilters,\n  FunctionToString,\n  LinkedErrors,\n  HttpContext,\n  TryCatch,\n  BrowserTracing,\n  Replay,\n} from '@sentry/browser';\n\nimport { CaptureConsole } from '@sentry/integrations';\n\nconst integrations = [\n  new InboundFilters(),\n  new FunctionToString(),\n  new TryCatch(),\n  new GlobalHandlers({\n    onerror: true,\n    onunhandledrejection: true,\n  }),\n  new Breadcrumbs({\n    console: true,\n    dom: true,\n    fetch: true,\n    history: true,\n    sentry: true,\n    xhr: true,\n  }),\n  new LinkedErrors({\n    key: 'cause',\n    limit: 5,\n  }),\n  new HttpContext(),\n];\n\nif (__SENTRY_TRACING__) {\n  integrations.push(new BrowserTracing());\n}\n\nif (__SENTRY_SESSION_REPLAY__) {\n  integrations.push(new Replay());\n}\n\nconst createClient = (config) =>\n  new BrowserClient({\n    dsn: config.dsn,\n\n    transport: makeFetchTransport,\n    stackParser: defaultStackParser,\n\n    beforeSend: (event) => {\n      event.logger = 'javascript';\n\n      if (config.scrubEmails && event.user?.email) {\n        delete event.user.email;\n      }\n\n      if (config.showFeedback && event.exception) {\n        showReportDialog({ eventId: event.event_id, user: Sentry.getUserData('name') });\n      }\n\n      return event;\n    },\n\n    tracesSampleRate: config.tracesSampleRate,\n    replaysSessionSampleRate: config.replaysSessionSampleRate,\n    replaysOnErrorSampleRate: config.replaysOnErrorSampleRate,\n\n    integrations: [...integrations, config.captureConsole && new CaptureConsole()].filter(Boolean),\n  });\n\nwindow.Sentry = { createClient, getCurrentHub, showReportDialog };\n\nwindow.Sentry.getUserData = (nameAttr = 'username') => {\n  /** @type {Sentry.User} */\n  let userData = {};\n\n  // Depending on when the error occurs, `app` might not be defined\n  if (app) {\n    const user = app.session?.user;\n\n    if (app.session && user && user.id() != 0) {\n      userData = {\n        ip_address: '{{auto}}',\n        id: user.id(),\n        [nameAttr]: user.username(),\n      };\n\n      if (!app.data['fof-sentry.scrub-emails']) {\n        userData.email = user.email();\n      }\n    } else if (app.data.session && app.data.session.userId != 0) {\n      userData = {\n        id: app.data.session.userId,\n      };\n    }\n  }\n\n  return userData;\n};\n\napp.initializers.add('fof/sentry', () => {\n  getCurrentHub().setUser(Sentry.getUserData());\n});\n"],"names":["isBrowserBundle","__SENTRY_BROWSER_BUNDLE__","getSDKSource","isNodeEnv","Object","prototype","toString","call","process","dynamicRequire","mod","request","require","WINDOW","getGlobalObject","dateTimestampSource","nowSeconds","Date","now","platformPerformance","module","performance","_","getNodePerformance","timeOrigin","getBrowserPerformance","timestampSource","undefined","dateTimestampInSeconds","bind","timestampInSeconds","threshold","performanceNow","dateNow","timeOriginDelta","Math","abs","timeOriginIsReliable","navigationStart","timing","navigationStartDelta","isGlobalObj","obj","GLOBAL_OBJ","globalThis","window","self","global","getGlobalSingleton","name","creator","gbl","__SENTRY__","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","id","loaded","__webpack_modules__","n","getter","__esModule","d","a","definition","key","o","defineProperty","enumerable","get","g","this","Function","e","hmd","create","children","set","Error","prop","hasOwnProperty","r","Symbol","toStringTag","value","flarum","core","compat","objectToString","isError","wat","isInstanceOf","isBuiltin","className","isErrorEvent","isDOMError","isString","isPrimitive","isPlainObject","isEvent","Event","isThenable","Boolean","then","base","_e","truncate","str","max","length","slice","safeJoin","input","delimiter","Array","isArray","output","i","push","String","join","stringMatchesSomePattern","testString","patterns","requireExactStringMatch","some","pattern","test","includes","isMatchingPattern","DEFAULT_IGNORE_ERRORS","DEFAULT_IGNORE_TRANSACTIONS","InboundFilters","__initStatic","_proto","_options","__init","setupOnce","addGlobalEventProcessor","getCurrentHub","eventProcess","event","hub","getIntegration","client","getClient","clientOptions","getOptions","options","internalOptions","allowUrls","concat","denyUrls","ignoreErrors","disableErrorDefaults","ignoreTransactions","disableTransactionDefaults","ignoreInternal","_mergeOptions","exception","values","type","_isSentryError","message","_ref","_ref$type","_ref$value","oO","_getPossibleEventMessages","_isIgnoredError","transaction","_isIgnoredTransaction","url","_getEventFilterUrl","_isDeniedUrl","_isAllowedUrl","_shouldDropEvent","frames","stacktrace","frame","filename","_getLastValidUrl","_extends","assign","target","arguments","source","apply","originalFunctionToString","DEFAULT_MAX_STRING_LENGTH","htmlTreeAsString","elem","nextStr","currentElem","out","height","len","keyAttrs","maxStringLength","_htmlElementAsString","separator","parentNode","reverse","_oO","el","classes","attr","tagName","toLowerCase","keyAttrPairs","filter","keyAttr","getAttribute","map","forEach","keyAttrPair","split","allowedAttrs","fill","replacementFactory","original","wrapped","markFunctionWrapped","_Oo","addNonEnumerableProperty","writable","configurable","proto","getOriginalFunction","func","__sentry_original__","convertToPlainObject","stack","getOwnProperties","newObj","serializeEventTarget","currentTarget","CustomEvent","detail","Element","extractedProps","property","extractExceptionKeysForMessage","maxLength","keys","sort","includedKeys","serialized","dropUndefinedKeys","inputValue","_dropUndefinedKeys","Map","memoizationMap","memoVal","returnValue","_i","_Object$keys","item","FunctionToString","context","_len","args","_key","WEBPACK_ERROR_REGEXP","defaultFunctionName","getFunctionName","fn","uuid4","crypto","msCrypto","randomUUID","replace","getRandomByte","getRandomValues","Uint8Array","random","c","getFirstException","getEventDescription","eventId","event_id","firstException","addExceptionTypeValue","addExceptionMechanism","newMechanism","currentMechanism","mechanism","handled","mergedData","data","checkOrSetAlreadyCaught","__sentry_captured__","err","logger","CONSOLE_LEVELS","enable","disable","States","DEFAULT_ENVIRONMENT","resolvedSyncPromise","SyncPromise","resolve","rejectedSyncPromise","reason","reject","executor","__init2","__init3","__init4","__init5","__init6","_resolve","_reject","_state","PENDING","_handlers","onfulfilled","onrejected","_this","result","_executeHandlers","val","onfinally","_this2","isRejected","_this3","_setResult","RESOLVED","_this4","REJECTED","_this5","state","_value","_this6","cachedHandlers","handler","updateSession","session","user","ipAddress","ip_address","did","email","username","timestamp","ignoreDuration","sid","init","started","duration","release","environment","userAgent","errors","status","Scope","_notifyingListeners","_scopeListeners","_eventProcessors","_breadcrumbs","_attachments","_user","_tags","_extra","_contexts","_sdkProcessingMetadata","clone","scope","newScope","_level","_span","_session","_transactionName","_fingerprint","_requestSession","addScopeListener","callback","addEventProcessor","setUser","_notifyScopeListeners","getUser","getRequestSession","setRequestSession","requestSession","setTags","tags","setTag","_extends2","setExtras","extras","setExtra","extra","_extends3","setFingerprint","fingerprint","setLevel","level","setTransactionName","setContext","setSpan","span","getSpan","getTransaction","setSession","getSession","update","captureContext","updatedScope","contexts","clear","addBreadcrumb","breadcrumb","maxBreadcrumbs","maxCrumbs","mergedBreadcrumb","getLastBreadcrumb","clearBreadcrumbs","addAttachment","attachment","getAttachments","clearAttachments","applyToEvent","hint","trace","getTraceContext","sdkProcessingMetadata","dynamicSamplingContext","getDynamicSamplingContext","transactionName","_applyFingerprint","breadcrumbs","_notifyEventProcessors","getGlobalEventProcessors","setSDKProcessingMetadata","newData","processors","index","processor","final","maybeArray","API_VERSION","Hub","_version","_stack","bindClient","isOlderThan","version","getStackTop","setupIntegrations","pushScope","getScope","getStack","popScope","pop","withScope","captureException","_lastEventId","syntheticException","_withClient","originalException","captureMessage","captureEvent","lastEventId","_this$getStackTop","_ref$beforeBreadcrumb","beforeBreadcrumb","_ref$maxBreadcrumbs","finalBreadcrumb","originalConsole","console","wrappedLevels","originalWrappedFunc","consoleSandbox","emit","configureScope","_this$getStackTop2","run","oldHub","makeMain","integration","startTransaction","customSamplingContext","_callExtensionMethod","traceHeaders","captureSession","endSession","_sendSessionUpdate","closeSession","startSession","_this$getStackTop3","_ref2","_ref2$environment","navigator","startingTime","toJSON","toISOString","attrs","user_agent","sessionToJSON","makeSession","currentSession","shouldSendDefaultPii","sendDefaultPii","_this$getStackTop4","_this$getStackTop5","method","sentry","getMainCarrier","extensions","registry","getHubFromCarrier","setHubOnCarrier","acs","carrier","getGlobalHub","ignoreOnError","shouldIgnoreOnError","wrap","before","wrapper","__sentry_wrapped__","sentryWrapped","wrappedArguments","arg","ex","setTimeout","getOwnPropertyDescriptor","DEFAULT_EVENT_TARGET","TryCatch","XMLHttpRequest","eventTarget","requestAnimationFrame","setInterval","_wrapTimeFunction","_wrapRAF","_wrapXHR","eventTargetOption","_wrapEventTarget","originalCallback","originalSend","xhr","wrapOptions","originalFunction","_len2","_key2","globalObject","eventName","handleEvent","originalRemoveEventListener","wrappedEventHandler","originalEventHandler","isNativeFetch","lastHref","SENTRY_XHR_DATA_KEY","handlers","instrumented","instrument","originalConsoleMethod","triggerHandlers","triggerDOMHandler","globalDOMEventHandler","makeDOMEventHandler","document","addEventListener","originalAddEventListener","listener","__sentry_instrumentation_handlers__","handlerForType","refCount","instrumentDOM","xhrproto","originalOpen","_len3","_key3","xhrInfo","toUpperCase","request_headers","match","__sentry_own_request__","onreadystatechangeHandler","readyState","status_code","endTimestamp","startTimestamp","onreadystatechange","_len4","readyStateArgs","_key4","_len5","setRequestHeaderArgs","_key5","header","sentryXhrData","_len6","_key6","body","instrumentXHR","Headers","Request","Response","supportsFetch","fetch","doc","createElement","sandbox","hidden","head","appendChild","contentWindow","removeChild","supportsNativeFetch","originalFetch","_parseFetchArgs","fetchArgs","getUrlFromResource","hasProp","parseFetchArgs","handlerData","fetchData","response","error","chrome","isChromePackagedApp","app","runtime","hasHistoryApi","history","pushState","replaceState","oldOnPopState","onpopstate","to","location","href","from","_len7","_key7","historyReplacementFunction","originalHistoryFunction","_len8","_key8","instrumentHistory","_oldOnErrorHandler","onerror","msg","line","column","__SENTRY_LOADER__","__SENTRY_INSTRUMENTED__","_oldOnUnhandledRejectionHandler","onunhandledrejection","addInstrumentationHandler","_step","_iterator","_createForOfIteratorHelperLoose","done","resource","debounceTimerID","lastCapturedEvent","debounceDuration","globalListener","isContentEditable","shouldSkipDOMEvent","previous","current","shouldShortcircuitPreviousDebounce","clearTimeout","normalize","depth","maxProperties","visit","ERROR","normalizeToSize","object","maxSize","normalized","encodeURI","utf8Length","JSON","stringify","memo","hasWeakSet","inner","WeakSet","has","add","splice","_memo","memoize","unmemoize","stringified","_events","isSyntheticEvent","objName","getPrototypeOf","constructor","getConstructorName","stringifyValue","startsWith","remainingDepth","valueWithToJSON","numAdded","visitable","visitKey","visitValue","exceptionFromError","stackParser","parseStackFrames","extractMessage","eventFromError","popSize","framesToPop","reactMinifiedRegexp","getPopSize","eventFromUnknownInput","attachStacktrace","isUnhandledRejection","domException","eventFromString","code","normalizeDepth","__serialized__","eventFromPlainObject","synthetic","GlobalHandlers","_installFunc","_installGlobalOnErrorHandler","_installGlobalOnUnhandledRejectionHandler","stackTraceLimit","installFunc","_getHubAndOptions","getHubAndOptions","groups","_enhanceEventWithInitialFrame","_eventFromIncompleteOnError","addMechanismAndCapture","_getHubAndOptions2","ev","ev0","ev0s","ev0sf","colno","isNaN","parseInt","lineno","getLocationHref","in_app","validSeverityLevels","severityLevelFromString","parseUrl","query","fragment","host","path","protocol","search","hash","relative","BREADCRUMB_INTEGRATION_ID","Breadcrumbs","dom","_consoleBreadcrumb","serializeAttribute","_isEvent","category","_xhrBreadcrumb","_fetchBreadcrumb","_historyBreadcrumb","addSentryBreadcrumb","parsedLoc","parsedFrom","parsedTo","LinkedErrors","_limit","limit","parser","linkedErrors","_walkErrorTree","_handler","HttpContext","referrer","headers","Referer","_setPrototypeOf","p","setPrototypeOf","__proto__","_inheritsLoose","subClass","superClass","SDK_VERSION","DSN_REGEX","dsnToString","dsn","withPassword","pass","port","projectId","publicKey","dsnFromComponents","components","makeDsn","exec","_match$slice","_match$slice$","_match$slice$2","projectMatch","dsnFromString","createEnvelope","items","forEachEnvelopeItem","envelope","envelopeItem","encodeUTF8","textEncoder","TextEncoder","encode","serializeEnvelope","envHeaders","parts","append","next","_step2","_iterator2","itemHeaders","payload","stringifiedPayload","buffers","_step3","totalLength","reduce","acc","buf","merged","offset","_iterator3","buffer","concatBuffers","createAttachmentEnvelopeItem","content_type","contentType","attachment_type","attachmentType","ITEM_TYPE_TO_DATA_CATEGORY_MAP","sessions","client_report","user_report","profile","replay_event","replay_recording","check_in","envelopeItemTypeToDataCategory","getSdkMetadataForEnvelopeHeader","metadataOrEvent","sdk","_metadataOrEvent$sdk","_getPrototypeOf","_construct","Parent","Class","Reflect","construct","sham","Proxy","valueOf","isNativeReflectConstruct","instance","_wrapNativeSuper","_cache","indexOf","TypeError","Wrapper","SentryError","_Error","logLevel","ReferenceError","_assertThisInitialized","SENTRY_API_VERSION","getBaseApiEndpoint","getEnvelopeEndpointWithUrlEncodedAuth","tunnelOrOptions","tunnel","sdkInfo","_metadata","_getIngestEndpoint","sentry_key","sentry_version","sentry_client","encodeURIComponent","_encodedAuth","installedIntegrations","setupIntegration","integrationIndex","debugIdStackParserCache","WeakMap","BaseClient","_dsn","_transport","transport","recordDroppedEvent","transportOptions","_integrations","_integrationsInitialized","_numProcessing","_outcomes","_hooks","_process","eventFromException","_captureEvent","promisedEvent","eventFromMessage","_isEnabled","sendSession","getDsn","getSdkMetadata","getTransport","flush","timeout","_isClientDoneProcessing","clientFinished","transportFlushed","close","enabled","integrations","getIntegrationById","integrationId","addIntegration","sendEvent","newItem","env","metadata","eventType","packages","enhanceEventWithSdkInfo","envelopeHeaders","sent_at","createEventEnvelopeHeaders","createEventEnvelope","attachments","promise","_sendEnvelope","sendResponse","createSessionEnvelope","_event","sendClientReports","on","hook","rest","_updateSessionFromEvent","crashed","errored","exceptions","sessionNonTerminal","Number","ticked","interval","clearInterval","_prepareEvent","_options$normalizeDep","_options$normalizeMax","normalizeMaxBreadth","prepared","dist","_options$maxValueLeng","maxValueLength","applyClientOptions","integrationNames","applyIntegrationsMetadata","debugIdStackFramesCache","debugIdMap","_sentryDebugIds","cachedDebugIdStackFrameCache","filenameDebugIdMap","debugIdStackTrace","parsedStack","cachedParsedStack","stackFrame","debug_id","applyDebugIds","finalScope","evt","abs_path","debug_meta","images","code_file","applyDebugMeta","maxBreadth","b","spans","normalizeEvent","prepareEvent","_processEvent","finalEvent","sampleRate","isTransaction","isTransactionEvent","beforeSendLabel","dataCategory","__sentry__","beforeSend","beforeSendTransaction","processBeforeSend","beforeSendResult","invalidValueError","_validateBeforeSendResult","processedEvent","transactionInfo","transaction_info","_this7","send","_clearOutcomes","outcomes","_key$split","quantity","BrowserClient","_BaseClient","sdkSource","SENTRY_SDK_SOURCE","visibilityState","_flushOutcomes","breadcrumbIntegration","captureUserFeedback","feedback","createUserFeedbackEnvelopeItem","createUserFeedbackEnvelope","platform","discarded_events","DEFAULT_RETRY_AFTER","DEFAULT_TRANSPORT_BUFFER_SIZE","createTransport","makeRequest","remove","task","$","taskProducer","drain","counter","capturedSetTimeout","makePromiseBuffer","bufferSize","rateLimits","filteredEnvelopeItems","limits","envelopeItemDataCategory","all","disabledUntil","getEventForEnvelopeItem","filteredEnvelope","recordEnvelopeLoss","statusCode","updatedRateLimits","rateLimitHeader","retryAfterHeader","trim","_limit$split","retryAfter","categories","headerDelay","delay","headerDate","parse","parseRetryAfterHeader","updateRateLimits","__sentry__baseTransport__","cachedFetchImpl","makeFetchTransport","nativeFetch","fetchImpl","getNativeFetchImplementation","pendingBodySize","pendingCount","requestSize","requestOptions","referrerPolicy","keepalive","fetchOptions","UNKNOWN_FUNCTION","createFrame","chromeRegex","chromeEvalRegex","geckoREgex","geckoEvalRegex","winjsRegex","defaultStackParser","parsers","sortedParsers","skipFirst","lines","cleanedLine","localStack","lastFrameFunction","firstFrameFunction","stripSentryFramesAndReverse","subMatch","_extractSafariExtensi","extractSafariExtensionDetails","_extractSafariExtensi2","isSafariExtension","isSafariWebExtension","Dedupe","eventProcessor","currentEvent","previousEvent","currentMessage","previousMessage","_isSameFingerprint","_isSameStacktrace","_isSameMessageEvent","previousException","_getExceptionFromEvent","currentException","_isSameExceptionEvent","_previousEvent","currentFrames","_getFramesFromEvent","previousFrames","frameA","frameB","currentFingerprint","previousFingerprint","showReportDialog","_hub$getStackTop","script","async","src","dsnLike","dialogOptions","endpoint","encodedOptions","getReportDialogEndpoint","onLoad","onload","injectionPoint","Integrations","CaptureConsole","levels","_levels","Sentry","createClient","config","_event$user","scrubEmails","showFeedback","getUserData","tracesSampleRate","replaysSessionSampleRate","replaysOnErrorSampleRate","captureConsole","nameAttr","userData","_app$session","_userData","userId"],"sourceRoot":""}